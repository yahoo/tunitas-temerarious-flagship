// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::directive { struct Fixture; }
#endiv
#divert <hpp>
struct tests::unit::directive::Fixture : public cppunit::test::Fixture {
  auto test_comment() -> void;
  auto test_uncomment() -> void;
  auto test_include() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::directive {
  auto Fixture::test_comment() -> void {
#warning WRITETHIS auto Fixture::test_comment() -> void
  }
  auto Fixture::Fixture::test_uncomment() -> void {
#warning WRITETHIS auto Fixture::Fixture::test_uncomment() -> void
  }
  auto Fixture::Fixture::Fixture::test_include() -> void {
#warning WRITETHIS auto Fixture::Fixture::Fixture::test_include() -> void
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"directive"};
    series << call("comment", &Fixture::test_comment)
           << call("uncomment", &Fixture::test_uncomment)
           << call("include", &Fixture::test_include)
           << END;
    return finalize(series);
  }
}
#endiv
