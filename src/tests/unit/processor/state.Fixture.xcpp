// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
#import tunitas.flagship.temerarious.stream
namespace tests::unit::processor::state {
  namespace [[eponymous]] fixture {
    struct Fixture;
    namespace stream = ::tunitas::flagship::temerarious::stream;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import tunitas.flagship.temerarious.processor.State
struct tests::unit::processor::state::fixture::Fixture : public cppunit::test::Fixture {
  using Subject = library::State;
  auto test_constructor_default() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.istringstream
#import std.ostringstream
#import tunitas.flagship.temerarious.stream.Input
#import tunitas.flagship.temerarious.stream.Output
namespace tests::unit::processor::state::fixture {
  auto Fixture::test_constructor_default() -> void {
    auto bufin = std::istringstream{};
    auto bufout = std::ostringstream{};
    auto inbound = stream::Input{bufin};
    auto outbound = stream::Output{bufout};
    auto subject = Subject{move(inbound), outbound};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"State"};
    series << []{
                auto con = Stream{"constructor"};
                con << call("default", &Fixture::test_constructor_default)
                    << END;
                return move(con);
              }()
           << END;
    return finalize(series);
  }
}
#endiv
