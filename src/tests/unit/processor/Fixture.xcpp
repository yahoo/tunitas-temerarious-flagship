// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::processor { struct Fixture; }
#endiv
#divert <hpp>
struct tests::unit::processor::Fixture : public cppunit::test::Fixture {
  auto test_usage_Preparation() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.flagship.temerarious.processor.Preparation
#import tests.unit.processor.state.Fixture
namespace tests::unit::processor {
  auto Fixture::test_usage_Preparation() -> void {
    using Subject = library::Preparation;
    auto a = Subject{}, b = Subject{};
    a.defines["apple"s] = "banana"s;
    a.search.push_back("/usr/tmp");
    swap(a, b);
    CPPUNIT_ASSERT(1 == b.defines.size());
    CPPUNIT_ASSERT(1 == b.search.size());
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"processor"};
    series << []{
                auto use = Stream{"usage"};
                use << call("Preparation", &Fixture::test_usage_Preparation)
                    << END;
                return use;
              }()
           << add<state::Fixture>()
           << END;
    return finalize(series);
  }
}
#endiv
