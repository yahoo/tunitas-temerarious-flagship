// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::field::get { class Identifier_And_More; }
#endiv
#divert <hpp>
#import tunitas.string.Storage
#import std.vector
struct tests::unit::field::get::Identifier_And_More : public cppunit::test::Fixture, private Here {
  auto test_good() -> void;
  auto test_fail_empty() -> void;
  auto test_fail_novalue() -> void;
  auto test_fail_bad_id() -> void;
  auto test_fail_bad_rest() -> void;
  auto test_case_1() -> void;
  auto test_case_2() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static auto generate_some_badness() -> std::vector<tunitas::string::Storage>;
  static auto generate_some_goodness() -> std::vector<tunitas::string::Storage>;
};  
#endiv
#divert <cpp>
#import langu.age.q
#import langu.age.braket
namespace tests::unit::field::get {
  auto Identifier_And_More::generate_some_badness() -> std::vector<tunitas::string::Storage> {
    // The precondition is that there is no leading or trailing blanks ... don't violate that.
    // All of these are invalid identifiers for one reason or another
    return {"a",
            "\b",
            "/path   /a/b/c",
            "1integer 123",
            "4.5 float 4.56",
            ".cshrc file",
            "\077\177",
            "\077 dot quertyuiop space\tab\fformfeed\177"};
  }
  auto Identifier_And_More::generate_some_goodness() -> std::vector<tunitas::string::Storage> {
    return {"a.b pickle"s,
            "a.b.c.d.e.f lettuce"s,
            "a1.23456789 00000000000000000000"s,
            "_a._ pencil"s,
            "_.. screwdriver"s,
            "_.- purple"s,
            "_.1 spackle"s,
            "a.-b dental floss"s,
            "a.-- shredding (as a verb), shredding (as a noun)"s,
            "a b"s,
            "a b c d e f"s,
            "a1 23456789"s,
            "_a _"s,
            "_ ."s,
            "_ -"s,
            "_ 1"s,
            "a -b"s,
            "a --"s};
  }
  auto Identifier_And_More::test_good() -> void try {
    auto [id, value] = library::get_identifier_and_more(hereinat(), "cabbage-headed-monster will eat you"sv);
    CPPUNIT_ASSERT("cabbage-headed-monster"sv == id);
    CPPUNIT_ASSERT("will eat you"sv == value);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(false);
  }
  auto Identifier_And_More::test_fail_empty() -> void try {
    library::get_identifier_and_more(hereinat(), ""sv);
    CPPUNIT_ASSERT(false);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  }
  auto Identifier_And_More::test_fail_novalue() -> void try {
    library::get_identifier_and_more(hereinat(), "one-field-only"sv); // <----- test this (has no value)
    CPPUNIT_ASSERT(false);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  }
  auto Identifier_And_More::test_fail_bad_id() -> void try {
    library::get_identifier_and_more(hereinat(), "a/b/c pathname"sv); // <----- test this (bad identifier)
    CPPUNIT_ASSERT(false);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  }
  auto Identifier_And_More::test_fail_bad_rest() -> void try {
    auto [id, rest] = library::get_identifier_and_more(hereinat(), "sandwich\t\b\b\b\bbell\b\b\b\b"sv);
    std::cerr << "DEBUG identifier=" << library::isidentifier(id) << ' ' << id << '\n';
    std::cerr << "DEBUG text=" << library::istext(rest) << ' ' << langu::age::q(rest) << '\n';
    std::cerr << "DEBUG id=" << id << ", rest=q(" << rest << ")\n";
    CPPUNIT_ASSERT(false);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  }
}
#import tests.cppunit.Exception
#import std.exception
namespace tests::unit::field::get {
  auto Identifier_And_More::test_case_1() -> void {
    // The precondition is that there is no leading or trailing blanks ... don't violate that.
    for (auto const item : generate_some_goodness()) {
      try {
        std::cerr << "DEBUG: testing for goodness --->" << item << "<---";
        library::get_identifier_and_more(hereinat(), item);
        std::cerr << "GOOD\n";
        CPPUNIT_ASSERT(true);
      } catch (cppunit::Exception const &) {
        throw;
      } catch (exception::Aspect const &) {
        std::cerr << "FAIL\n";
        CPPUNIT_ASSERT(false);
      } catch (std::exception const &) {
        std::cerr << "HARD FAIL (unexpected exception)\n";
        CPPUNIT_ASSERT(false);
      }
    }
  }
  auto Identifier_And_More::test_case_2() -> void {
    for (auto const item : generate_some_badness()) {
      try {
        auto [id, rest] = library::get_identifier_and_more(hereinat(), item);
        std::cerr << "DEBUG should fail but did not " << braket(braket(item)) << '\n';
        std::cerr << "DEBUG identifier=" << library::isidentifier(id) << ' ' << id << '\n';
        std::cerr << "DEBUG text=" << library::istext(rest) << ' ' << braket(braket(rest)) << '\n';
        std::cerr << "DEBUG id=" << q(id) << ", rest=" << q(rest) << "\n";
        

        CPPUNIT_ASSERT(false);
      } catch (exception::Aspect const &) {
        CPPUNIT_ASSERT(true);
      }
    }
  }
  auto Identifier_And_More::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"none(...)"};
    series << call("good", &Identifier_And_More::test_good)
           << []{
                auto fail = Stream{"fail"};
                fail << call("empty", &Identifier_And_More::test_fail_empty)
                     << call("multiple", &Identifier_And_More::test_fail_novalue)
                     << []{
                          auto bad = Stream{"bad"};
                          bad << call("id", &Identifier_And_More::test_fail_bad_id)
                              << call("rest", &Identifier_And_More::test_fail_bad_rest)
                              << END;
                          return move(bad);
                        }()
                     << END;
                return move(fail);
              }()
           << []{
                auto cas = Stream{"case"};
                cas << call("1", &Identifier_And_More::test_case_1)
                    << call("2", &Identifier_And_More::test_case_2)
                    << END;
                return move(cas);
              }()
           << END;
    return finalize(series);
  }
}
#endiv
