// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::field::get { class None; }
#endiv
#divert <hpp>
struct tests::unit::field::get::None : public cppunit::test::Fixture, private Here {
  auto test_good() -> void;
  auto test_fail() -> void;
  auto test_case_1() -> void;
  auto test_case_2() -> void;
  static auto suite() -> cppunit::Test *;
};  
#endiv
#divert <cpp>
namespace tests::unit::field::get {
  auto None::test_good() -> void try {
    library::get_none(hereinat(), ""sv);
    CPPUNIT_ASSERT(true);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(false);
  }
  auto None::test_fail() -> void try {
    library::get_none(hereinat(), "something"sv);
    CPPUNIT_ASSERT(false);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  }
  auto None::test_case_1() -> void {
    // The precondition is that there is no leading or trailing blanks ... don't violate that.
    library::get_none(hereinat(), ""sv);
  }
  auto None::test_case_2() -> void try {
    library::get_none(hereinat(), "bad bad bad bad bad"sv);
  } catch (exception::Aspect const &) {
    CPPUNIT_ASSERT(true);
  }
  auto None::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"none(...)"};
    series << call("good", &None::test_good)
           << call("fail", &None::test_fail)
           << []{
                auto cas = Stream{"case"};
                cas << call("1", &None::test_case_1)
                    << call("2", &None::test_case_2)
                    << END;
                return cas;
              }()
           << END;
    return finalize(series);
  }
}
#endiv
