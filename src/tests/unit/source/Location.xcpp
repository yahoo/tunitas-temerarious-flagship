// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::source { struct Location; }
#endiv
#divert <hpp>
#import tunitas.flagship.temerarious.source.Location
struct tests::unit::source::Location : public cppunit::test::Fixture {
  using Subject = library::Location;
  auto test_constructor_std() -> void;
  auto test_constructor_2view() -> void;
  auto test_constructor_2name() -> void;
  auto test_line() -> void;
  auto test_fileview() -> void;
  auto test_filepath() -> void;
  auto test_file_name() -> void;
  auto test_operator_insert() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.ostringstream
#import std.source_location
#import tunitas.flagship.temerarious.source.Line
#import tunitas.flagship.temerarious.source.Name
namespace tests::unit::source {
  auto Location::test_constructor_std() -> void {
    auto subject = Subject{std::source_location::current()};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Location::test_constructor_2view() -> void {
    auto subject = Subject{library::Line{33}, "/tmp/pickles-are-funny.roff"sv};
    CPPUNIT_ASSERT(sizeof (subject));
    CPPUNIT_ASSERT(library::Line{33} == subject.line());
  }
  auto Location::test_constructor_2name() -> void {
    auto name = library::Name{"/tmp/onions-are-sad.roff"sv};
    auto subject = Subject{library::Line{33}, name};
    CPPUNIT_ASSERT(sizeof (subject));
  }
  auto Location::test_line() -> void {
    auto subject = Subject{std::source_location::current()};
    CPPUNIT_ASSERT(library::Line{} != subject.line());
  }
  auto Location::test_fileview() -> void {
    auto subject = Subject{std::source_location::current()};
    CPPUNIT_ASSERT(Subject::Fileview{} != subject.fileview());
  }
  auto Location::test_filepath() -> void {
    auto subject = Subject{std::source_location::current()};
    CPPUNIT_ASSERT(Subject::Fileview{} != subject.filepath());
  }
  auto Location::test_file_name() -> void {
    auto subject = Subject{std::source_location::current()};
    CPPUNIT_ASSERT(Subject::Fileview{} != subject.file_name());
  }
  auto Location::test_operator_insert() -> void {
    auto subject = Subject{library::Line{33}, "/tmp/pickles-are-funny.roff"sv};
    auto buf = std::ostringstream{};
    buf << subject;
    auto const actual = buf.str();
    CPPUNIT_ASSERT(!actual.empty());
    std::cerr << "SHOW " << actual << '\n';
  }
  auto Location::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"Location"};
    series << []{
                auto con = Stream{"constructor"};
                con << call("std::source_location", &Location::test_constructor_std)
                    << call("file::Path", &Location::test_constructor_2view)
                    << call("Name", &Location::test_constructor_2name)
                    << END;
                return move(con);
              }()
           << call("line", &Location::test_line)
           << call("fileview", &Location::test_fileview)
           << call("filepath", &Location::test_filepath)
           << call("file_name", &Location::test_file_name)
           << call("operator<<", &Location::test_operator_insert)
           << END;
    return finalize(series);
  }
}
#endiv
