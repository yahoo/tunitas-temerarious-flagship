// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
#import app.exception
#import app.roff // namespace exception
#import tunitas.flagship.temerarious.source
#import tunitas.file
namespace tests::unit::exception::app {
  namespace [[eponymous]] fixture {
    struct Fixture;
    namespace library = ::app::exception;
    namespace rofflib = ::app::roff::exception;
    namespace file = ::tunitas::file;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import app.roff.exception.File
namespace tests::unit::exception::app {
  struct fixture::Fixture : public cppunit::test::Fixture {
    template<typename EXCEPTION> auto test_constructor() -> void;
    template<typename EXCEPTION> auto test_Aspect() -> void;
    static auto suite() -> cppunit::Test *;
  protected:
    template<typename EXCEPTION> static auto generate() -> EXCEPTION;
  };
  namespace fixture {
    template<> auto Fixture::generate<rofflib::File>() -> rofflib::File;
    template<> auto Fixture::test_constructor<rofflib::File>() -> void;
  }
}
#endiv
#divert <tpp>
#import app.exception.Aspect
// v2 only #import substd.exception.Exception
#import nonstd.exception.Exception
#import nonstd.same_as
namespace tests::unit::exception::app::fixture {
  template<typename EXCEPTION> auto Fixture::test_constructor() -> void {
    using Subject = EXCEPTION;
    auto subject = generate<Subject>(); // <------------------------------ test the constructor (at least)
    CPPUNIT_ASSERT(nullptr != subject.what());
  }
  template<typename EXCEPTION> auto Fixture::test_Aspect() -> void try {
    // Prove that these exceptions are throwable and that they are catchable with a library::Aspect
    auto copied = generate<EXCEPTION>();
    throw copied; // <---------------------------------------- prove the copy constructor
  } catch (library::Aspect const &) {
    CPPUNIT_ASSERT(true);
#if 0
  } catch (substd::exception::Exception const &) {
#else
  } catch (nonstd::exception::Exception const &) {
    static_assert(nonstd::same_as<nonstd::exception::Exception, std::exception>);
#endif
    CPPUNIT_ASSERT(false);
  }
}
#endiv
#divert <cpp>
#import std.cerr
#import nonstd.errcode
namespace tests::unit::exception::app::fixture {
  template<> auto Fixture::generate<rofflib::File>() -> rofflib::File {
    auto const verbie = "open for reading"sv;
    auto ec = std::error_code{(int)std::errc::no_such_file_or_directory, std::system_category()};
    return rofflib::File{verbie, "/dev/null", ec};
  }
  template<> auto Fixture::test_constructor<rofflib::File>() -> void {
    using Subject = rofflib::File;
    auto filepath = file::Path{"/dev/badplace"};
    { auto subject = Subject{"close", filepath}; // <---------------------------------------- test this, with the defaulted nonstd::errcode()
      CPPUNIT_ASSERT(nullptr != subject.what());
      std::cerr << "SHOW exception::File what=" << subject.what() << '\n';
      { auto subject = Subject{"open", filepath, nonstd::errcode()}; }
      CPPUNIT_ASSERT(nullptr != subject.what()); // <---------------------------------------- test this, with the explicit nonstd::errcode()
      std::cerr << "SHOW exception::File what=" << subject.what() << '\n'; }
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"app"};
    series << call("File", &Fixture::test_constructor<rofflib::File>)
           << []{
                auto asp = Stream{"Aspect"};
                asp << call("File", &Fixture::test_Aspect<rofflib::File>)
                    << END;
                return move(asp);
              }()
           << END;
    return finalize(series);
  }
}
#endiv
