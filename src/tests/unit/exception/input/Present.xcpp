// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::exception::input { struct Present; }
#endiv
#divert <hpp>
#import tests.unit.Here
#import tunitas.flagship.temerarious.input.exception.Present
struct tests::unit::exception::input::Present : public cppunit::test::Fixture, private Here {
  using Subject = library::Present;
  auto test_constructor_view() -> void;
  auto test_constructor_storage() -> void;
  auto test_constructor_path() -> void;
  auto test_constructor_name() -> void;
  auto test_constructor_location() -> void;
  auto test_what() -> void;
  auto test_whence() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
namespace tests::unit::exception::input {
  auto Present::test_constructor_view() -> void {
    //
    // test the constructor with the varying first argument
    //                     / ---------right here
    //                     |
    //                     v
    auto subject = Subject{string::View{"/dev/bogus"}, std::error_code{}, "no such device or address"sv};
    CPPUNIT_ASSERT(sizeof (subject));
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!subject.whence().filepath().empty());
  }
  auto Present::test_constructor_storage() -> void {
    //
    // test the constructor with the varying first argument
    //                     / ---------right here
    //                     |
    //                     v
    auto subject = Subject{string::Storage{"/dev/bogus"}, std::error_code{}, "no such device or address"sv};
    CPPUNIT_ASSERT(sizeof (subject));
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!subject.whence().filepath().empty());
  }
  auto Present::test_constructor_path() -> void {
    //
    // test the constructor with the varying first argument
    //                     / ---------right here
    //                     |
    //                     v
    auto subject = Subject{file::Path{"/dev/bogus"}, std::error_code{}, "no such device or address"sv};
    CPPUNIT_ASSERT(sizeof (subject));
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!subject.whence().filepath().empty());
  }
  auto Present::test_constructor_name() -> void {
    //
    // test the constructor with the varying first argument
    //                     / ---------right here
    //                     |
    //                     v
    auto subject = Subject{hereabout(), std::error_code{}, "no such device or address"sv};
    CPPUNIT_ASSERT(sizeof (subject));
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!subject.whence().filepath().empty());
  }
  auto Present::test_constructor_location() -> void {
    //
    // test the constructor with the varying first argument
    //                     / ---------right here
    //                     |
    //                     v
    auto subject = Subject{hereinat(), std::error_code{}, "no such device or address"sv};
    CPPUNIT_ASSERT(sizeof (subject));
    CPPUNIT_ASSERT(nullptr != subject.what());
    CPPUNIT_ASSERT(!subject.whence().filepath().empty());
  }
  auto Present::test_what() -> void {
    // already tested
  }
  auto Present::test_whence() -> void {
    // already tested
  }
  auto Present::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"Present"};
    series << []{
                auto con = Stream{"constructor{THING,error_code,reason}"};
                con << call("string::View", &Present::test_constructor_view)
                    << call("string::Storage", &Present::test_constructor_storage)
                    << call("file::Path", &Present::test_constructor_path)
                    << call("source::Name", &Present::test_constructor_name)
                    << call("source::Location", &Present::test_constructor_location)
                    << END;
                return move(con);
              }()
           << call("what", &Present::test_what)
           << call("whence", &Present::test_whence)
           << END;
    return finalize(series);
  }
}
#endiv
