// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
#import tunitas.flagship.temerarious.stream
namespace tests::unit::stream::input {
  namespace [[eponymous]] fixture {
    struct Fixture;
    namespace library = ::tunitas::flagship::temerarious::stream;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import tunitas.flagship.temerarious.stream.Input
struct tests::unit::stream::input::Fixture : public cppunit::test::Fixture {
  using Subject = library::Input;
  auto test_constructor_conversion_stream() -> void;
  auto test_constructor_conversion_file() -> void;
  auto test_constructor_copy() -> void;
  auto test_constructor_move() -> void;
  auto test_assignment_copy() -> void;
  auto test_assignment_move() -> void;
  auto test_getline() -> void;
  auto test_input_name() -> void;
  auto test_whence() -> void;
  auto test_directory() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.cin
#import std.istringstream
#import tunitas.flagship.temerarious.path.File
namespace tests::unit::stream::input {
  auto Fixture::test_constructor_conversion_stream() -> void {
    auto buf = std::istringstream{"I want something to read"};
    buf.unsetf(std::ios::skipws);
    auto subject = Subject{buf}; // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    std::string something;
    subject >> something;
    CPPUNIT_ASSERT(!something.empty());
    std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __FUNCTION__ << " finds <<" << something << ">>\n";
  }
  auto Fixture::test_constructor_conversion_file() -> void {
    auto subject = Subject{"/dev/null"}; // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    std::string something;
    subject >> something;
    CPPUNIT_ASSERT("/dev/null"sv == subject.input_name());
  }
  auto Fixture::test_constructor_copy() -> void {
#if 0 // copy is denied
    auto buf = std::istringstream{"I want something to read"};
    auto specimen = Subject{buf};
    auto subject = Subject{specimen}; // <---------------------------------------- test this
    std::string something;
    subject >> something;
#endif
  }
  auto Fixture::test_constructor_move() -> void {
    auto buf = std::istringstream{"I want something to read"};
    auto specimen = Subject{buf};
    CPPUNIT_ASSERT(specimen.good());
    auto subject = Subject{move(specimen)}; // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    std::string something;
    subject >> something;
    CPPUNIT_ASSERT(!something.empty());
    std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __FUNCTION__ << " finds <<" << something << ">>\n";
  }
  auto Fixture::test_assignment_copy() -> void {
#if 0 // copy is denied
    auto buf = std::istringstream{"I want something to read"};
    auto specimen = Subject{buf};
    auto subject = Subject{};
    subject = Subject{specimen}; // <---------------------------------------- test this
    std::string something;
    subject >> something;
#endif
  }
  auto Fixture::test_assignment_move() -> void {
    auto buf = std::istringstream{"I want something to read"};
    auto specimen = Subject{buf};
    auto subject = Subject{std::cin};
    CPPUNIT_ASSERT(subject.good());
    subject = move(specimen); // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    std::string something;
    subject >> something;
    CPPUNIT_ASSERT(!something.empty());
    std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __FUNCTION__ << " finds <<" << something << ">>\n";
  }
  auto Fixture::test_getline() -> void {
    auto in = std::istringstream{"line 1: apple\n"
                                 "line 2: banana\n"
                                 "line 3: cherry\n"
                                 "line 4: dog\n"
                                 "line 5: eagle\n"s};
    auto buf = string::Storage{};
    auto count{0u};
    while (getline(in, buf)) {
      ++count;
      std::cerr << "read <<" << buf << ">>\n";
    }
    CPPUNIT_ASSERT(5u == count);
  }
  auto Fixture::test_input_name() -> void {
    auto buf = std::istringstream{"I want something to read"};
    auto subject = Subject{buf};
    CPPUNIT_ASSERT(subject.good());
    auto name = subject.input_name(); // <---------------------------------------- test this
    CPPUNIT_ASSERT(!name.empty());
  }
  auto Fixture::test_whence() -> void {
    auto buf = std::istringstream{"I want something to read"};
    auto subject = Subject{buf};
    CPPUNIT_ASSERT(subject.good());
    auto name = subject.whence(); // <---------------------------------------- test this
    CPPUNIT_ASSERT(!name.filepath().empty());
  }
  auto Fixture::test_directory() -> void {
    auto buf = std::istringstream{"I want something to read"};
    auto subject = Subject{buf};
    CPPUNIT_ASSERT(subject.good());
    auto const expected = ::tunitas::file::Path{"."};
    auto const actual = subject.directory(); // <---------------------------------------- test this
    std::cerr << "DEBUG whence=" << subject.whence() << '\n';
    auto w = subject.whence();
    auto f = w.filepath();
    auto path = ::tunitas::file::Path{::tunitas::string::Storage{f.begin(), f.end()}};
    std::cerr << "DEBUG path=" << path << '\n';
    std::cerr << "DEBUG parent_path=" << path.parent_path() << '\n';
    std::cerr << "DEBUG whence=" << subject.whence() << '\n';
    std::cerr << "DEBUG expected=" << expected << ", actual=" << actual << '\n';
    CPPUNIT_ASSERT(actual == expected);
  }
}
#import tests.unit.stream.Filey
#import tests.unit.stream.Streamy
namespace tests::unit::stream::input {
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"Input"};
    series << []{
                auto use = Stream{"usage"};
                use << []{
                         auto con = Stream{"constructor"};
                         con << []{
                                  auto ver = Stream{"conversion"};
                                  ver << call("stream", &Fixture::test_constructor_conversion_stream)
                                      << call("file", &Fixture::test_constructor_conversion_file)
                                      << END;
                                  return move(ver);
                                }()
                             << call("copy", &Fixture::test_constructor_copy)
                             << call("move", &Fixture::test_constructor_move)
                             << END;
                         return move(con);
                       }()
                    << []{
                         auto ass = Stream{"assignment"};
                         ass << call("copy", &Fixture::test_assignment_copy)
                             << call("move", &Fixture::test_assignment_move)
                             << END;
                         return move(ass);
                       }()
                    << call("getline", &Fixture::test_getline)
                    << call("input_name", &Fixture::test_input_name)
                    << call("whence", &Fixture::test_whence)
                    << call("directory", &Fixture::test_directory)
                    << END;
                return move(use);
              }()
           << add<Filey<library::Input>>()
           << add<Streamy<library::Input>>()
           << END;
    return finalize(series);
  }
}
#endiv
