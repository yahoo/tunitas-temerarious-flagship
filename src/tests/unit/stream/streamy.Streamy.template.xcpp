// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tests::unit::stream::streamy {
  //
  // The stream-to-a-stream test fixture
  //
  // Design:
  //
  //   mostly template, a little specialization
  //
  // Usage:
  //
  //   auto series = Stream{...somehow...};
  //   series << add<Streamy<library::Input>>()
  //          << add<Streamy<library::Output>>()
  //          << END;
  //
  template<typename LIBRARY_STREAM> struct Streamy;
}
#endiv
#divert <hpp>
#import nonstd.same_as
#import std.ostream
#import std.istream
#import tests.unit.stream.Exerciser
#import tests.unit.stream.streamy.Extras
namespace tests::unit::stream {
  template<typename LIBRARY_STREAM> struct streamy::Streamy : public cppunit::test::Fixture,
                                                              private Exerciser<LIBRARY_STREAM>,
                                                              public streamy::Extras<LIBRARY_STREAM> {
    struct Ancestors {
      using Fixture = cppunit::test::Fixture;
      using Exerciser = stream::Exerciser<LIBRARY_STREAM>;
      using Extras = streamy::Extras<LIBRARY_STREAM>;
    };
  public:
    using Subject = LIBRARY_STREAM;
    // See filey::Filey<LIBRARY_STREAM>::test_constructor_conversion_file() -> void;
    auto test_constructor_conversion_stream() -> void;
    auto test_constructor_copy() -> void;
    auto test_constructor_move() -> void;
    auto test_assignment_copy() -> void;
    auto test_assignment_move() -> void;
    static auto suite() -> cppunit::Test *;
  protected:
    using Base_Stream = typename Ancestors::Extras::Base_Stream;
    static auto generate_base_stream() -> Base_Stream;
    static_assert(nonstd::same_as<Base_Stream, std::ostringstream> || nonstd::same_as<Base_Stream, std::istringstream>);
  };
}
#endiv
#divert <tpp>
#import std.stringstream
namespace tests::unit::stream::streamy {
  template<typename _> auto Streamy<_>::test_constructor_conversion_stream() -> void {
    auto buf = Ancestors::Extras::generate_base_stream();
    buf.unsetf(std::ios::skipws);
    auto subject = Subject{buf}; // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    Ancestors::Exerciser::exercise(subject);
  }
  template<typename _> auto Streamy<_>::test_constructor_copy() -> void {
#if 0 // copy is denied
    auto buf = ...somehow...
    auto specimen = Subject{buf};
    auto subject = Subject{specimen}; // <---------------------------------------- test this
    Ancestors::Exerciser::exercise(subject);
#endif
  }
  template<typename _> auto Streamy<_>::test_constructor_move() -> void {
    auto buf = Ancestors::Extras::generate_base_stream();
    auto specimen = Subject{buf};
    CPPUNIT_ASSERT(specimen.good());
    auto subject = Subject{move(specimen)}; // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    Ancestors::Exerciser::exercise(subject);
  }
  template<typename _> auto Streamy<_>::test_assignment_copy() -> void {
#if 0 // copy is denied
    auto buf = ...somehow...
    auto specimen = Subject{buf};
    auto subject = Subject{};
    subject = Subject{specimen}; // <---------------------------------------- test this
    Ancestors::Exerciser::exercise(subject);
#endif
  }
  template<typename _> auto Streamy<_>::test_assignment_move() -> void {
    auto buf = Ancestors::Extras::generate_base_stream();
    auto specimen = Subject{buf};
    auto either = std::stringstream{}; // ... doesn't matter what this is ... but needs to be good and then gone
    auto subject = Subject{either};
    CPPUNIT_ASSERT(subject.good());
    subject = move(specimen); // <---------------------------------------- test this
    CPPUNIT_ASSERT(subject.good());
    Ancestors::Exerciser::exercise(subject);
  }
  template<typename _> auto Streamy<_>::suite() -> cppunit::Test * {
    auto series = Stream{"Stream-Of-"s + typeid(Subject).name()};
    series << []{
                auto use = Stream{"usage"};
                use << []{
                         auto con = Stream{"constructor"};
                         con << []{
                                  auto ver = Stream{"conversion"};
                                  ver << call("stream", &Streamy::test_constructor_conversion_stream)
                                      << END;
                                  return move(ver);
                                }()
                             << call("copy", &Streamy::test_constructor_copy)
                             << call("move", &Streamy::test_constructor_move)
                             << END;
                         return move(con);
                       }()
                    << []{
                         auto ass = Stream{"assignment"};
                         ass << call("copy", &Streamy::test_assignment_copy)
                             << call("move", &Streamy::test_assignment_move)
                             << END;
                         return move(ass);
                       }()
                    << Ancestors::Extras::subsuite()
                    << END;
                return move(use);
              }()
           << END;
    return finalize(series);
  }
}
#endiv
