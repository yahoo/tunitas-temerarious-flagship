// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
#import tests.unit.stream.streamy.Extras.template
#forward tunitas.flagship.temerarious.stream.Input
namespace tests::unit::stream::streamy {
  template<> struct Extras<library::Input>;
}
#endiv
#divert <hpp>
#forward tests.unit.stream.Streamy
#import std.istringstream
namespace tests::unit::stream::streamy {
  template<> struct Extras<library::Input> {
    using Subject = library::Input;
    using Fixture = Streamy<library::Input>; // because we'll need the descendant for the subsuite
    using Base_Stream = std::istringstream;
    virtual ~Extras() = default;
    auto test_getline() -> void;
    auto test_input_name() -> void;
    auto test_whence() -> void;
    auto test_directory() -> void;
  protected:
    static auto subsuite() -> Stream;
    auto generate_base_stream() -> Base_Stream; // The stream is suitable for reading
  };
}
#endiv
#divert <cpp>
#import tests.unit.stream.streamy.Streamy.Input // see the full type so we can take member pointers off of it
namespace tests::unit::stream::streamy {
  auto Extras<library::Input>::generate_base_stream() -> Base_Stream { return std::istringstream{"something to read"}; }
  auto Extras<library::Input>::test_getline() -> void {
    auto in = std::istringstream{"line 1: apple\n"
                                 "line 2: banana\n"
                                 "line 3: cherry\n"
                                 "line 4: dog\n"
                                 "line 5: eagle\n"s};
    auto buf = string::Storage{};
    auto count{0u};
    while (getline(in, buf)) {
      ++count;
      std::cerr << "read <<" << buf << ">>\n";
    }
    CPPUNIT_ASSERT(5u == count);
  }
  auto Extras<library::Input>::test_input_name() -> void {
    auto in = Base_Stream{};
    auto subject = Subject{in};
    CPPUNIT_ASSERT(subject.good());
    auto name = subject.input_name(); // <---------------------------------------- test this
    CPPUNIT_ASSERT(!name.empty());
  }
  auto Extras<library::Input>::test_whence() -> void {
    auto in = Base_Stream{};
    auto subject = Subject{in};
    CPPUNIT_ASSERT(subject.good());
    auto name = subject.whence(); // <---------------------------------------- test this
    CPPUNIT_ASSERT(!name.filepath().empty());
  }
  auto Extras<library::Input>::test_directory() -> void {
    auto in = Base_Stream{};
    auto subject = Subject{in};
    CPPUNIT_ASSERT(subject.good());
    auto const expected = ::tunitas::file::Path{"."};
    auto const actual = subject.directory(); // <---------------------------------------- test this
    CPPUNIT_ASSERT(actual == expected);
  }
  auto Extras<library::Input>::subsuite() -> Stream {
    auto sub = Stream{"specifics"};
    sub << call<Fixture>("getline", &Fixture::test_getline)
        << call<Fixture>("input_name", &Fixture::test_input_name)
        << call<Fixture>("whence", &Fixture::test_whence)
        << call<Fixture>("directory", &Fixture::test_directory)
        << END;
    return sub;
  }
}
#endiv
