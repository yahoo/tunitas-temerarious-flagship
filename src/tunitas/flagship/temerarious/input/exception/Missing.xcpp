// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tunitas::flagship::temerarious::input::exception {
  //
  // A problem with a "missing" file; e.g. not in the searchpath.
  //
  // Semantic: a file (name fragment) that is missing
  //           as such, this is NOT a "system error" and there is no error code.
  //
  // Lifetimes:
  //
  //   The constructor accepts a view on a name (a view on a string).
  //   The whence() returns a view on a string (a description of a filepath) which last longer than the exception.
  //   Since this is frequently used with path::Search, some care is required.
  //   
  // Specification, Design, Usage: see partial::Filesystem
  //
  struct [[nodiscard]] Missing;
}
#endiv
#divert <hpp>
#import std.shared_ptr
#import std.declval
#import tunitas.flagship.temerarious.input.exception.Aspect
#import tunitas.flagship.temerarious.exception.partial.Runtime
#import tunitas.flagship.temerarious.source.Name
#import tunitas.file.Path
#import tunitas.string.View
#import tunitas.string.Storage
namespace tunitas::flagship::temerarious::input {
  struct exception::Missing final : public virtual input::exception::Aspect,
                                    public partial::Runtime {
    struct Ancestors {
      struct Aspects  { /* ... who cares ... */ };
      using Exception = partial::Runtime;
    };
    using Storage = string::Storage;
    using Fileview = string::View;
    using Filepath = file::Path;
  public:
    inline explicit Missing(char const *, string::View) = delete; // no  pointers!
    inline explicit Missing(Storage const &missing_filepath, string::View reason);
    inline explicit Missing(Fileview missing_filepath, string::View reason);
    inline explicit Missing(Filepath const &missing_filepath, string::View reason);
    inline explicit Missing(source::Name const &, string::View reason); // by reference so it works for Location too
    auto what() const noexcept -> char const *;
    auto whence() const noexcept -> source::Name;
  private:
    std::shared_ptr<Filepath> stored_filepath;
  };
  namespace exception {
    static_assert(noexcept(Missing{std::declval<Missing>()}), "noexcept copy constructor");
  }
}
#endiv
#divert <ipp>
namespace tunitas::flagship::temerarious::input::exception {
  Missing::Missing(source::Name const &candidate, string::View reason) : Missing{candidate.fileview(), reason} { }
  Missing::Missing(Fileview candidate, string::View reason)
    : Ancestors::Exception{reason} // because Filepath MUST be constructed from a temporary string::Storage
    , stored_filepath{std::make_shared<Filepath>(string::Storage{candidate.begin(), candidate.end()})}
  { }
  Missing::Missing(Storage const &candidate, string::View reason)
    : Ancestors::Exception{reason}
    , stored_filepath{std::make_shared<Filepath>(candidate)}
  { }
  Missing::Missing(Filepath const &candidate, string::View reason)
    : Ancestors::Exception{reason}
    , stored_filepath{std::make_shared<Filepath>(candidate)}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::flagship::temerarious::input::exception {
  auto Missing::what() const noexcept -> char const * { return Ancestors::Exception::what(); }
  auto Missing::whence() const noexcept -> source::Name { return {stored_filepath->native()}; }
};
#endiv
