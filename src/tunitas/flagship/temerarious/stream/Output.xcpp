// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tunitas::flagship::temerarious::stream {
  //
  // The output stream
  //
  // Specification:
  //
  //   An ostream
  //   A "filename" even if it is stdout
  //
  // Lifetimes
  //
  //   The ostream referenced in the Output(std::ostream &) constructor must live longer than the Output.
  //   In that case, the original istream is the owner of the streambuf.
  //
  // Design:
  //
  //   https://en.cppreference.com/w/cpp/io/basic_ostream/basic_ostream
  //   <quote>
  //     3) The move constructor uses basic_ios<CharT, Traits>::move(rhs) to move all basic_ios members, except for the rdbuf(), from rhs into *this.
  //     This move constructor is protected: it is called by the move constructors of movable output stream classes std::basic_ofstream and std::basic_ostringstream, which know how to correctly move the associated streambuffer.
  //   </quote>
  //
  // Usage:
  //
  //   auto outbound = Output{std::cout};
  //   auto outbound = Output{file::Path{...somehow...}, ...open_mode...};
  //
  struct Output;
}
#endiv
#divert <hpp>
#import tunitas.flagship.temerarious.path.File
#import tunitas.flagship.temerarious.stream.Base
#import tunitas.flagship.temerarious.stream.Filebuf
#import std.ostream
namespace tunitas::flagship::temerarious {
  namespace stream {
    using std::swap;
    inline auto swap(Output &, Output &) noexcept -> void;
  }
  class stream::Output : public std::ostream, public Base, private Filebuf {
    using Ancestor = std::ostream;
    friend auto stream::swap(Output &, Output &) noexcept -> void;
  public:
    inline explicit Output(std::ostream &);
    inline explicit Output(path::File const &, Mode = OUT);
    inline explicit Output(Output &&);
    inline auto operator=(Output &&) -> Output &;
  private:
    inline auto swap_streamstuff(Output &other) noexcept -> void;
  };
}
#endiv
#divert <ipp>
namespace tunitas::flagship::temerarious {
  auto stream::swap(Output &a, Output &b) noexcept -> void {
    Output::Base &a_base{a}, &b_base{b};
    swap(a_base, b_base);
    Output::Filebuf &a_filebuf{a}, &b_filebuf{b};
    swap(a_filebuf, b_filebuf);
    a.swap_streamstuff(b);
  }
  namespace stream {
    auto Output::swap_streamstuff(Output &that) noexcept -> void {
      // This accesses protected interfaces up in the Ancestor
      this->swap(that); // ............... swaps the format bits, but nothing else
      auto a_rdbuf = this->rdbuf(); // ... swap the streambuf pointer
      auto b_rdbuf = that.rdbuf();
      this->set_rdbuf(b_rdbuf);
      that.set_rdbuf(a_rdbuf);
    }
    Output::Output(std::ostream &outbound)
      : Ancestor{outbound.rdbuf()}
      , Filebuf{UNINITIALIZED}
    { }
    Output::Output(path::File const &filepath, Mode mode) {
      this->init(opened_file_streambuf.get());
      if (!opened_file_streambuf->open(filepath, mode)) {
        this->setstate(ios_base::failbit);
      } else {
        this->clear();
      }
    }
    Output::Output(Output &&other)
      : Ancestor{}
      , Base{forward<Output>(other)}
      , Filebuf{forward<Output>(other)} {
        swap_streamstuff(other);
      }
    auto Output::operator=(Output &&other) -> Output & {
      swap_streamstuff(other);
      Base::operator=(forward<Output>(other));
      Filebuf::operator=(forward<Output>(other));
      return *this;
    }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace std;
    using namespace tunitas::flagship::temerarious::stream;
    static_assert(!is_default_constructible_v<Output>);
    static_assert(!is_copy_constructible_v<Output>);
    static_assert(!is_copy_assignable_v<Output>);
    static_assert(is_move_constructible_v<Output>);
    static_assert(is_move_assignable_v<Output>);
  }
}
#endiv
