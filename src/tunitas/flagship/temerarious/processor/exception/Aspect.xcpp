// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tunitas::flagship::temerarious::processor::exception {
  //
  // The aspect of a processor exception
  //
  // Specification:
  //
  //   These exceptions pertain to the processor itself.
  //   Some, but not all of these to the programmer's treatment of the processor state.
  //   Some, others, but not all of these to the input provided by the luser.
  //   For example the luser can provide inputs with missing begin-end brackets.
  //      .divert/.endiv with missing end
  //      .ifdef/elifdef/.else/.endi with one of the missing ends
  //   For example an end without a corresponding begin in the current input frame.
  //
  // Usage:
  //
  //   class my::Problem : public virtual processor::exception::Aspect,
  //                       public virtual temerarious::exception::Aspect,
  //                       public virtual tunitas::exception::Aspect,
  //                       public nonstd::exception::Invalid<string::View> {
  //     struct Ancestors {
  //       using Exception = nonstd::exception::Invalid<string::View>;
  //     };
  //   public:
  //      ...constructor...
  //      auto what() const noexcept -> char const * override { return Ancestors::Exception::what(); }
  //   };
  //
  //
  struct Aspect;
}
#endiv
#divert <hpp>
struct tunitas::flagship::temerarious::processor::exception::Aspect {
protected:
  virtual ~Aspect();
public:
  virtual auto what() const noexcept -> char const * = 0;
};
#endiv
#divert <cpp>
namespace tunitas::flagship::temerarious::processor::exception {
  Aspect::~Aspect() = default;
}
#endiv
