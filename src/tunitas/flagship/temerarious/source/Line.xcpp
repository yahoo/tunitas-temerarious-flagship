// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tunitas::flagship::temerarious::source {
  //
  // A line number in a file
  //
  // Specification:
  //
  //   Unsigned
  //   Printable
  //   Incrementable
  //   Equality
  //
  // Design:
  //
  //   This is harder than it looks.
  //   What do you mean "32 bits is enough" for any translation unit?
  //
  // Usage:
  //
  //   Oh come on.
  //
  enum Line : int unsigned long;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import std.ostream
namespace tunitas::flagship::temerarious::source {
  inline constexpr auto underlying(Line l) { return std::underlying_type_t<Line>(l); }
  inline auto operator<<(std::ostream &, Line) -> std::ostream &;
  inline auto operator++(Line &) -> Line &;
  inline auto operator++(Line &, int) -> Line;
}
#endiv
#divert <ipp>
namespace tunitas::flagship::temerarious {
  auto source::operator<<(std::ostream &o, Line l) -> std::ostream & { return o << "line " << underlying(l) << ": "; }
  auto source::operator++(Line &lhs) -> Line & {
    return lhs = Line(1u+underlying(lhs));
  }
  auto source::operator++(Line &lhs, int) -> Line {
    auto old = lhs;
    ++lhs;
    return old;
  }
}
#endiv
