// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace tunitas::flagship::temerarious::error::condition {
  //
  // The simplified error condition.
  //
  enum class Companion { SUCCESS, FAILURE };
}
#endiv
#divert <hpp>
#import std.underlying_type
#import std.error_condition
namespace tunitas::flagship::temerarious::error::condition {
  // WATCHOUT - success is zero (only one way to succeed); failure is non-zero (many ways to fail)
  inline constexpr auto underlying(Companion c) { return std::underlying_type_t<Companion>(c); }
  inline constexpr auto success(Companion c) -> bool { return Companion::SUCCESS == c; }
  inline constexpr auto failure(Companion c) -> bool { return !success(c); }
  //
  inline auto make_error_condition(Companion) -> std::error_condition;
}
#endiv
#divert <ipp>
#import tunitas.flagship.temerarious.error.category
namespace tunitas::flagship::temerarious::error {
  auto condition::make_error_condition(Companion condition) -> std::error_condition { return {(int) condition, category()}; }
}
#endiv
