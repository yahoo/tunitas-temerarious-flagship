// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
#import nonstd.required.Enumeration
#import tunitas.flagship.temerarious.required // cascade the namespace
namespace tunitas::flagship::temerarious::error::condition {
  //
  // like std::error_condition, but bundles in the companion enumeration.
  // [[presumably]] with inlining and optimization in place, it has zero cost.
  //
  // Concept:
  //
  //   What you would naturally consider is going on here.
  //   namespace something::something_else::dark_side {
  //     namespace error {
  //       enum class Enumeration { GOOD, BAD };
  //       struct Package : public std::error_condition; {
  //          using error_condition::error_condition;
  //          using enum Enumeration;
  //       };
  //     }
  //   }
  //
  // Design:
  //
  //   We want both pass-by-value and pass-by-lvalue-reference to work equally well
  //   The conditions are trivially copyable, being two intptr_t sized thingies.
  //
  // Usage:
  //
  //   auto condition = error::Condition{error::Condition::GOOD};
  //   auto condition = std::error_condition{error::Condition::GOOD};
  //
  template<required::Enumeration COMPANION> struct Package;
}
#endiv
#divert <hpp>
#import std.error_category
#import std.error_condition
#import std.enable_if
#import std.is_error_condition_enum // you'll need a specialization before actually appying this constructor
#import std.is_error_condition_enum.tunitas.flagship.temerarious.error.condition.Companion
namespace tunitas::flagship::temerarious::error {
  namespace condition {
    template<required::Enumeration COMPANION> inline auto operator==(Package<COMPANION> const &, Package<COMPANION> const &) -> bool;
    template<required::Enumeration COMPANION> inline auto operator!=(Package<COMPANION> const &, Package<COMPANION> const &) -> bool;
  }
  template<required::Enumeration COMPANION> class condition::Package {
    using Category = std::error_category;
    using Contained = std::error_condition;
  public:
    using Companion = COMPANION;
#if 0 && 10 <= __GNUC__
    // gcc (GCC) 11.2.1 20210827 says error: ‘using enum’ of dependent type ‘tunitas::flagship::temerarious::error::condition::Package<COMPANION>::Companion’
    using enum Companion; // one day C++20 will allow implicit construction by ...... {Condition::FAILURE}
#else
    using E = Companion; // in the meanwhile, some implicit construction by ......... {error::Condition::E::FAILURE}
    inline static constexpr auto SUCCESS = Companion::SUCCESS;
    inline static constexpr auto FAILURE = Companion::FAILURE;
#endif
    // Follow the constructor signature for error_condition
    Package() = default;
    inline Package(int i, Category const &c) noexcept : contained{i, c} { }
    template<required::Enumeration CONDITION, typename = typename std::enable_if<std::is_error_condition_enum<CONDITION>::value>::type> Package(CONDITION c) noexcept { *this = make_error_condition(c); }
    Package(Contained d) noexcept : contained{d} { }
    operator Contained const &() const noexcept { return contained; }
  private:
    Contained contained;
  };
}
#endiv
#divert <ipp>
namespace tunitas::flagship::temerarious::error {
  template<required::Enumeration COMPANION> auto condition::operator==(Package<COMPANION> const &a, Package<COMPANION> const &b) -> bool { return (std::error_condition) a == (std::error_condition) b; }
  template<required::Enumeration COMPANION> auto condition::operator!=(Package<COMPANION> const &a, Package<COMPANION> const &b) -> bool { return (std::error_condition) a != (std::error_condition) b; }
}
#endiv
