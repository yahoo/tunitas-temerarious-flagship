// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <hpp>
namespace tunitas::flagship::temerarious::directive::package_directive {
  namespace interface {
    //
    // The simple directives
    //
    // Specification:
    //
    //   ."
    //   .'
    //   .i filename
    //
    // Design:
    //
    //   Sure, why do you ask?
    //
    // Usage:
    //
    //   see parser::assess(...)
    //
    //
    auto rest(State &, Output &, Location, Payload) -> void;
    auto comment(State &, Output &, Location, Payload) -> void;
    auto uncomment(State &, Output &, Location, Payload) -> void;
    auto block(State &, Output &, Location, Payload) -> void;
    auto define(State &, Output &, Location, Payload) -> void;
    auto endef(State &, Output &, Location, Payload) -> void;
    auto ifdef(State &, Output &, Location, Payload) -> void;
    auto elifdef(State &, Output &, Location, Payload) -> void;
    auto elsedef(State &, Output &, Location, Payload) -> void;
    auto endif(State &, Output &, Location, Payload) -> void;
    auto read(State &, Output &, Location, Payload) -> void;
    auto undef(State &, Output &, Location, Payload) -> void;
    auto notice(State &, Output &, Location, Payload) -> void;
    auto warning(State &, Output &, Location, Payload) -> void;
    auto fatal(State &, Output &, Location, Payload) -> void;
  }
  namespace package_body_directive::body {
    inline auto throw_not_in_a_condition_frame(Location where) -> void;
  }
}
#endiv
#divert <ipp>
namespace tunitas::flagship::temerarious::directive::package_directive {
  namespace package_body_directive {
    auto body::throw_not_in_a_condition_frame(Location where) -> void {
      throw exception::State{where, "not currently in a condition frame (not in a a .ifdef/.elifdef/.else/.endif)"sv};
    }
  }
}
#endiv
#divert <cpp>
#import std.clog
namespace tunitas::flagship::temerarious::directive::package_directive {
  auto interface::rest(State &state, Output &output, Location, Payload payload) -> void {
    state.passthrough(payload);
  }
  auto interface::comment(State &, Output &, Location, Payload) -> void {
    // Yes, do nothing with the commentariat
  }
  auto interface::uncomment(State &s, Output &o, Location w, Payload p) -> void {
    warning(s, o, w, "inappropriate comment character (treating it as a comment where anyway)"sv);
    comment(s, o, w, p);
  }
  auto interface::block(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      auto identifier = get_identifier(where, payload);
    state.push_diversion(identifier);
    }
  }
  auto interface::endef(State &state, Output &, Location where, Payload payload) -> void try {
    if (state.is_enabled()) {
      get_none(where, payload);
      state.pop_diversion();
    }
  } catch (processor::exception::Diversion const &) {
    throw exception::State{where, "not currently defining any variable (not in a .divert/.endiv)"sv};
  }
  auto interface::define(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      auto [identifier, remaining] = get_identifier_and_more(where, payload);
      state.define_variable(identifier, remaining);
    }
  }
  auto interface::undef(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      state.undefine_variable(get_identifier(where, payload));
    }
  }
  auto interface::ifdef(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      state.push_condition(get_identifier(where, payload));
    } else {
      // We're still processing matching ifdef...endef pairs, even in disabled mode.
      state.push_condition(false);
    }
  }
  auto interface::elifdef(State &state, Output &outbound, Location where, Payload payload) -> void {
    // Treat this as closing the .ifdef / .endif and starting a new .ifdef
    state.pop_condition();
    ifdef(state, outbound, where, payload);
  }
  auto interface::elsedef(State &state, Output &, Location where, Payload payload) -> void try {
    auto now = state.is_enabled();
    state.pop_condition();
    if (state.is_enabled()) {
      get_none(where, payload);
    }
    state.push_condition(!now);
  } catch (processor::exception::Condition const &) {
    throw_not_in_a_condition_frame(where);
  }
  auto interface::endif(State &state, Output &, Location where, Payload payload) -> void try {
    if (state.is_enabled()) {
      get_none(where, payload);
    }
    state.pop_condition();
  } catch (processor::exception::Condition const &) {
    throw_not_in_a_condition_frame(where);
  }
  auto interface::notice(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      if (payload.empty()) { payload = "is given"sv; }
      std::clog << where << "notice, " << payload << '\n';
    }
  }
  auto interface::warning(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      if (payload.empty()) { payload = "is noted"sv; }
      std::clog << where << "warning, " << payload << '\n';
    }
  }
  auto interface::fatal(State &state, Output &, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      if (payload.empty()) { payload = "quitting the processor"sv; }
      std::clog << where << "error, " << payload << '\n';
      state.fatal(payload);
    }
  }
}
#import nonstd.errcode
#import tunitas.flagship.temerarious.stream.Input
#import tunitas.flagship.temerarious.input.exception.Missing
#import tunitas.flagship.temerarious.input.exception.Present
namespace tunitas::flagship::temerarious::directive::package_directive {
  auto interface::read(State &state, Output &outbound, Location where, Payload payload) -> void {
    if (state.is_enabled()) {
      auto suffix = get_filepath(where, payload);
      if (auto found = state.search.find(suffix); fail(found)) {
        throw input::exception::Missing{suffix, "does not exist in the search path"};
      } else {
        auto resolved = value(move(found));
        auto inbound = stream::Input{resolved};
        if (!inbound) {
          throw input::exception::Present{resolved, nonstd::errcode(), ".r filename"};
        } else {
          state.push_input(move(inbound));
        }
      }
    }
  }
}
#endiv
