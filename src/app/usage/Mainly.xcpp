// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-basics/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/basics/tree/LICENSE
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import app.usage.required.Generator
#import cli.exits.constants
namespace app::usage {
  //
  // The main(...) of a usage thunk
  //
  // Specification:
  //
  //   Oh, come on!
  //
  // Usage:
  //
  //   auto main(int cc, char *vv[]) -> int { return Mainly<Message>{std::cout}(cc, vv); }
  //
  namespace [[eponymous]] mainly {
    template<required::Generator> struct Mainly;
    using namespace cli::exits::constants;
  }
  using mainly::Mainly;
}
#endiv
#divert <hpp>
#import cli.exits.Code
#import std.ostream
namespace app::usage {
  template<usage::required::Generator GENERATOR> struct mainly::Mainly {
    using Generator = GENERATOR;
    using Exit = cli::exits::Code;
    using Stream = std::ostream;
    inline explicit Mainly();
    inline explicit Mainly(Stream &);
    inline auto operator()(int, char *[]) -> Exit;
  protected:
    Stream &outbound;
    Generator generator{};
  };
}
#endiv
#divert <ipp>
#import std.cout
namespace app::usage::mainly {
  template<required::Generator _> Mainly<_>::Mainly() : Mainly{std::cout} { }
  template<required::Generator _> Mainly<_>::Mainly(Stream &outbound) : outbound{outbound} { }
  template<required::Generator _> auto Mainly<_>::operator()(int, char *[]) -> Exit {
    outbound << generator() << '\n';
    return OK;
  }
}
#endiv
