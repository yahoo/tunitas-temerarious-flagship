// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace app::roff {
  inline namespace package_run {
           namespace package_body_run::body { }
           inline namespace interface { using namespace package_body_run::body; }
  }
}
#import sys.exits.constants // [[FIXTHIS]] move to cli.exits.constants when module-options >= 2.0 is ready
namespace app::roff {
  namespace package_run::package_body_run::body {
    using Exit = sys::exits::Code;
    using namespace sys::exits::constants;
  }
}
#endiv
#divert <hpp>
#import std.istream
#import std.ostream
#import tunitas.flagship.temerarious.stream.Input
#import tunitas.flagship.temerarious.stream.Output
#import tunitas.flagship.temerarious.processor
namespace app::roff::package_run {
  namespace interface {
    //
    // This is much simpler now that the core off the processor has moved into the library
    //
    // Specification:
    //
    //    process input ... write output
    //
    // Usage:
    //
    //   return run(cin, cout);
    // 
    inline auto run(std::istream &, std::ostream &) -> Exit;
  }
  namespace package_body_run::body {
    using tunitas::flagship::temerarious::stream::Input;
    using tunitas::flagship::temerarious::stream::Output;
    namespace processor = tunitas::flagship::temerarious::processor;
  }
}
#endiv
#divert <ipp>
#import std.clog
#import tunitas.flagship.temerarious.processor.run
namespace app::roff::package_run {
  auto interface::run(std::istream &in, std::ostream &out) -> Exit {
    auto erroneity = Output{std::clog};
    auto outbound = Output{out};
    auto inbound = Input{in};
    auto ess = processor::run(move(inbound), outbound, erroneity);
    return good(ess) ? OK : FAIL;
  }
}
#endiv
