// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace app::roff::usage {
  //
  // The usage message generator
  //
  // Usage:
  //
  //   auto generator = usage::Message{program};
  //   std::cout << generator() << '\n';
  //
  //   auto generator = usage::Message{program};
  //   std::cout << usage::Message{program} << '\n';

  //
  struct Message;
}
#endiv
#divert <hpp>
#import tunitas.application.options.Program
#import tunitas.string.Storage
#import std.ostream
namespace app::roff {
  namespace usage {
    inline auto operator<<(std::ostream &, Message const &) -> std::ostream &;
  }
  class usage::Message {
    using Program = tunitas::application::options::Program;
    using String = tunitas::string::Storage;
  public:
    inline explicit Message(Program const &);
    inline auto operator()() const -> String;
    inline auto emit_onto(std::ostream &) const -> std::ostream &;
  private:
    Program program;
  };
}
#endiv
#divert <ipp>
#import std.ostringstream
namespace app::roff {
  auto usage::operator<<(std::ostream &o, Message const &m) -> std::ostream & { return m.emit_onto(o); }
  namespace usage {
    Message::Message(Program const &program) : program{program} { }
    auto Message::operator()() const -> String {
      std::ostringstream buf;
      emit_onto(buf);
      return buf.str();
    }
    auto Message::emit_onto(std::ostream &outbound) const -> std::ostream & {
      outbound << "usage: " << program << " [...options... [...files.roff]"
               << "\n"
               << "\nWhere the [...options...] comprise"
               << "\n--define <NAME>=<VALUE> ........ define NAME as VALUE in the global dictionary"
               << "\n--define <NAME> ................ define NAME as (empty) in the global dictionary"
               << "\n-D<NAME>=<VALUE> ............... same, using the well-known idiom of the C preprocessor"
               << "\n-D<NAME>=<VALUE> ............... same"
               << "\n--include <DIRECTORY> .......... add <DIRECTORY> to the searchpath"
               << "\n-I<DIRECTORY> .................. same, using the well-known idiom of the C preprocessor"
               << "\n--version ...................... emit the version of the this package"
               << "\n--help, --usage ................ this message."; // no final \n
      return outbound;
    }
  }
}
#endiv
