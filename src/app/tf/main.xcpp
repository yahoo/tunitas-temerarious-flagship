// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace app::tf {
  namespace package_main {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_main::interface;
}
#import app.controllability.Through
#import app.controllability.Controllability
#import app.exception.facet.Quitting
#import tunitas.application.exits.Code
#import tunitas.application.options.Program
#import tunitas.application.exits.constants
#import tunitas.application.options.c.Argv
#import tunitas.application.options.Arguments
#import c.const_vector // [[FIXTHIS]] move this into tunitas as' options::c::Vector
#import tunitas.flagship.temerarious
#import tunitas.file.Path
#import tunitas.Optional
#import tunitas.Tuple
#import tunitas.string.Storage
#import autotools.autoconf.Config.tunitas.flagship.temerarious.CONFIG
namespace app::tf::package_main {
  using Argv = tunitas::application::options::c::Argv;
  using Exit = tunitas::application::exits::Code;
  using app::controllability::Controllability;
  namespace body {
    inline namespace constants { using namespace tunitas::application::exits::constants; } 
    namespace version = tunitas::flagship::temerarious::version;
    using Vector = ::c::const_vector;
    using Arguments = tunitas::application::options::Arguments;
    using Program = tunitas::application::options::Program;
    using String = tunitas::string::Storage;
    using Filepath = tunitas::file::Path;
    using tunitas::Optional;
    using tunitas::Tuple;
    using Config = autotools::autoconf::Config<tunitas::flagship::temerarious::CONFIG>;
    using app::options::Dispensation;
    using app::controllability::Through;
  }
}
#endiv
#divert <hpp>
#import langu.ish.perl.split
namespace app::tf::package_main::body {
  namespace exported {
    inline auto main(int, char *[]) -> Exit;
    inline auto main(Argv) -> Exit;
    auto main(Controllability const &, Argv) -> Exit;
  }
  auto reexec_arguments(Program const &, Argv) -> Tuple<Dispensation, Exit, Vector, Optional<Filepath>>;
  auto reexec_path(Program const &, Optional<Filepath> libexec, Argv, Filepath first) -> Filepath;
  auto guess_actual_installed_prefix(Argv) -> Optional<Filepath>;
  auto guess_actual_installed_bindir_from_PATH(Filepath exe) -> Optional<Filepath>;
  inline auto const NOELIDE = langu::ish::perl::Elide{};
  inline auto debin(Filepath) -> Filepath;
}
#endiv
#divert <ipp>
#import std.exception
#import std.clog
namespace app::tf::package_main {
  auto interface::main(int cc, char *vv[]) -> Exit { return main(Argv(cc, vv)); }
  auto interface::main(Argv av) -> Exit try {
    return main(Controllability{}, av);
  } catch (std::exception const &e) {
    std::clog << "error: unexpected exception " << e.what() << '\n';
    return SOFTWARE;
  }
  auto body::debin(Filepath bindir) -> Filepath {
    //
    //              bin/tf <---- here we synthesize the '.'
    //            ./bin/tf
    // /opt/tunitas/bin/tf
    //
    if (auto trimmed = bindir.parent_path(); trimmed.empty()) {
      return ".";
    } else {
      return trimmed;
    }
  }
}
#endiv
#divert <cpp>
#import app.tf.usage.Message
#import app.exception.Testing
#import c.rest
#import langu.ish.perl.split
#import sys.posix.exec
#import sys.posix.executable
#import sys.posix.getenv
#import tunitas.flagship.temerarious.version.Generator
namespace app::tf::package_main {
  auto interface::main(Controllability const &ctl, Argv av) -> Exit try {
    auto program = Program{av.front()};
    auto [dispensation, exit, vv, libexec] = reexec_arguments(program, av);
    if (testing(ctl) <= Through::OPTIONS) { throw exception::Testing{program}; }
    switch (dispensation) {
    case Dispensation::PROCESS:
      { auto reexec = reexec_path(program, move(libexec), av, vv.front());
        auto reargs = Arguments{vv.begin(), vv.end()};
        reargs[0] = reexec; // so the other side sees the "as full path as possible" on the reexec (several of them relyo on that)
        auto done = sys::posix::exec(reexec, move(reargs));
        // Even returning here at all signals an error.
        std::clog << program << ": error, could not invoke " << reexec << " because " << error_code(done).message() << '\n';
        return OS; }
    case Dispensation::USAGE:
      std::cout << usage::Message{}(program) << '\n';
      break;
    case Dispensation::VERSION:
      std::cout << version::Generator{} << '\n';
      break;
    case Dispensation::FAIL: // the error message was already emitted
    default:
      break;
    }
    return exit;
  } catch (exception::facet::Quitting const &e) {
    e.stream() << e.what() << '\n';
    return e.exit();
  }
  auto body::reexec_arguments(Program const &program, Argv av) -> Tuple<Dispensation, Exit, Vector, Optional<Filepath>> {
    if (av.size() < 2) {
      std::clog << program << ": error, a command is required\n";
      return {Dispensation::FAIL, USAGE, {}, {}};
    }
    auto vv = c::rest(av);
    auto libexec = Optional<Filepath>{};
    while (vv.size()) {
      std::string first = vv.front();
      if (first.empty()) {
        std::clog << program << ": error, the <subprogram> cannot be empty\n";
        return {Dispensation::FAIL, USAGE, {}, {}};
      } else if ("--usage"s == first || "--help"s == first || "-h"s == first) {
        return {Dispensation::USAGE, OK, {}, {}};
      } else if ("--version"s == first || "-V"s == first) {
        return {Dispensation::VERSION, OK, {}, { }};
      } else if (auto lead="--prefix="s; lead == first.substr(0, lead.size())) {
        // not bothering to check for empty ... it will get "checked" later by execve(2) failing
        auto candidate = first.substr(lead.size());
        if (candidate.empty()) { candidate = "."; }
        libexec = Filepath{move(candidate)} / Filepath{"libexec"} / Filepath{Config::package_name()};
        vv = c::rest(vv);
      } else if (auto lead="--libexec="s; lead == first.substr(0, lead.size())) {
        auto candidate = first.substr(lead.size());
        if (candidate.empty()) { candidate = "."; }
        libexec = move(candidate);
        vv = c::rest(vv);
      } else if ('-' == first.front()) {
        std::clog << program << ": error, invalid option (use --usage to explore)\n";
        return {Dispensation::FAIL, USAGE, {}, {}};
      } else {
        // a word ... we are done.
        break;
      }
    }
    return {Dispensation::PROCESS, {}, vv, move(libexec)};;
  }
  auto body::reexec_path(Program const &, Optional<Filepath> libexec, Argv av, Filepath first) -> Filepath {
    // the first arument (Program) is unused because there are no error messages herein; but there could be (couldn't there?)
    auto redir = [&]() -> Filepath {
                   // If we can find it then take what is *actually( at hand
                   // Else fall back onto the configure-time path as-built.
                   if (libexec) {
                     return *libexec;
                   } else if (auto guessed=guess_actual_installed_prefix(av); guessed) {
                     return *guessed / Filepath{"libexec"} / Filepath{Config::package_name()};
                   } else {
                     return Config::package_applibexecdir();
                   }
                 }();
    auto subcommand = [first]{
                        auto duhfault = first.filename();
                        if ("ls"s == duhfault) {
                          duhfault = "eles"s; // because "eles" cannot be called "ls" lest that conflict with /bin/ls which MUST NOT ever be shaddowed
                        }
                        return duhfault;
                      }();
    return redir / subcommand;
  }
  auto body::guess_actual_installed_prefix(Argv av) -> Optional<Filepath> {
    //
    // Design: the shell may or MAY NOT deliver a full path to the running executable
    // In the eventuality that it does, we're good; else we have to go guessing based on PATH and hope that what we find is "the same thing"
    // 
    // WATCHOUT - libtool in or out of development; the ".libs" and the "lt-" are latent in the UX but present to our machinations.
    //
    // When installed or when linked with -no-install, the second form applies; else the 1st
    //
    //      /---------------------------------------- third parent path
    //      |       /-------------------------------  second parent path
    //      |       |   /---------------------------  first parent path
    //      |       |   |
    //      v       v   v
    // /opt/tunitas/bin/.libs/lt-tf
    //
    //      /---------------------------------------- second parent path
    //      |       /-------------------------------  first parent path
    //      |       |
    //      |       |
    //      v       v
    // /opt/tunitas/bin/tf
    //
    std::cerr << "trace " << av.front() << '\n';
    auto exe = Filepath{av.front()};
    auto binnie = exe.parent_path();
    if (".libs"s == binnie.filename()) {
      binnie = binnie.parent_path();
    }
    if (binnie.empty()) {
      if (auto guessed=guess_actual_installed_bindir_from_PATH(move(exe)); guessed) {
        return debin(*guessed);
      } else {
        return {};
      }
    } else {
      return debin(binnie.parent_path());
    }
  }
  auto body::guess_actual_installed_bindir_from_PATH(Filepath exe) -> Optional<Filepath> {
    if (auto got=sys::posix::getenv("PATH"); good(got)) {
      for (auto path=langu::ish::perl::split<std::vector<String>>(':', move(got).value(), NOELIDE); Filepath bindir : path) {
        if (bindir.empty()) {
          bindir = ".";
        }
        auto candidate = bindir / exe;
    std::cerr << "trace " << candidate << '\n';
        if (sys::posix::executable(candidate)) {
          return bindir;
        }
      }
    }
    return {};
  }
}
#endiv
