// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
namespace app::exception {
  //
  // The aspect of an Application exception
  // This is a mixin, hence the name.
  // Descendants only.
  // It is set up as an Ancestor to the mixin tree so that STL exceptions can be mixed in as well.
  //
  // The descendants of Aspect give some of the flavorings that are expected.
  //
  // Usage:
  //
  //   class my::Problem : public virtual app::exception::Aspect,
  //                       public std::runtime_error { ... };
  //
  //   try {
  //     ...
  //     throw my::Problem{...somehow...};
  //     ...
  //   } catch (exception::Aspect const &g) {
  //     ...recover...
  //   }
  //
  class Aspect;
}
#endiv
#divert <hpp>
#import cli.exits.Code
#import std.ostream
class app::exception::Aspect {
protected:
  virtual ~Aspect() = default;
  Aspect() = default;
public:
  struct Results {
    using What = char const *;
    using Stream = std::ostream &;
    using Exit = cli::exits::Code;
  };
  virtual auto what() const noexcept -> Results::What = 0;
  virtual auto stream() const noexcept -> Results::Stream = 0;
  virtual auto exit() const noexcept -> Results::Exit = 0;
  [[deprecated("instead prefer Aspect::exit()")]] virtual auto code() const noexcept -> Results::Exit = 0;
};
#endiv
