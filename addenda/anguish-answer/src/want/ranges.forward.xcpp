// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import std.declval
#import nonstd.required.Container
#import want.ranges.detail.Container
namespace want::ranges {
  //
  // Iterate over a container.
  // Deduce the type of the iterator for the container.
  //
  // The expectation is that this is->will_be subsumed by something in Ranges TS.
  //
  // Usage:
  //
  //   auto const &thing = ...somehow...;
  //   for (auto const &item : forward(thing)) {
  //     ...visit the items...
  //   }
  //
  //   for (auto const &item : reverse(thing)) {
  //     ...visit the items...
  //   }
  //
  template<nonstd::required::Container CONTAINER> inline auto forward(CONTAINER &) -> detail::Container<decltype(std::declval<CONTAINER>().begin())>;
}
#endiv
#divert <ipp>
#import std.begin
#import std.end
template<nonstd::required::Container CONTAINER> auto want::ranges::forward(CONTAINER &container) -> detail::Container<decltype(std::declval<CONTAINER>().begin())> {
  using Result = detail::Container<decltype(std::declval<CONTAINER>().begin())>;
  return Result{std::begin(container), std::end(container)};
}
#endiv
