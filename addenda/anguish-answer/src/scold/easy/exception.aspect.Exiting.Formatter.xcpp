// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.easy.exception.aspect.Exiting
#endiv
#divert <hpp>
#import std.ostream
namespace scold::easy::exception::aspect {
  //
  // The formatter of abstract exiting exceptions
  //
  // Usage:
  //
  //   exception::aspect::Exiting const &e{...somehow...}
  //   e.stream() << format(e) << '\n';
  //
  inline auto operator<<(std::ostream &, Exiting::Formatter const &) -> std::ostream &;
}
struct scold::easy::exception::aspect::Exiting::Formatter {
  using Value = Exiting;
  inline explicit Formatter(Value const &value) : value{value} { }
  Value const &value;
};
#endiv
#divert <ipp>
auto scold::easy::exception::aspect::operator<<(std::ostream &o, Exiting::Formatter const &f) -> std::ostream & {
  return o << f.value.what();
}
#endiv
