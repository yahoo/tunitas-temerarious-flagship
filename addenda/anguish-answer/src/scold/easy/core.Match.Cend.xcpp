// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward scold.easy.core.Match.declaration
namespace scold::easy::core {
  template<> struct Match<is_preprocessor_or_ending_the_C_style_comment>;
}
#endiv
#divert <hpp>
#import scold.easy.line.Object
#import lite.regex.matching.Results
#import scold.easy.core.Match.IPL
namespace scold::easy::core {
  template<> struct Match<is_preprocessor_or_ending_the_C_style_comment> {
    inline auto operator()(line::Object const &) const -> bool;
    using Preprocessor = Match<is_preprocessor_line>;
  };
}
#divert <ipp>
#import scold.easy.core // namespace regex
#import lite.regex.Pattern
#import lite.regex.search
#import scold.easy.core.Match.template // operator==
namespace scold::easy::core {
  auto Match<is_preprocessor_or_ending_the_C_style_comment>::operator()(line::Object const &subject) const -> bool {
    static regex::Pattern const C_COMMENT_END{R"regex(.*\*/)regex"};
    return subject == Preprocessor{} || regex::search(subject, C_COMMENT_END);
  }
}
#endiv
