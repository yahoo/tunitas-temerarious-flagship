// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.easy.format
namespace scold::easy::generate {
  using namespace format;
}
#endiv
#divert <hpp>
#import std.string
#import scold.easy.line.Number
#import scold.easy.name.Filepath
#import scold.easy.uuid.Point
#import scold.easy.time.Point
namespace scold::easy::generate {
  //
  // Generate the preprocessor fragments
  //
  // Usage: really?
  //
  inline auto pragma_once(uuid::Point, time::Point) -> std::string;
  inline auto include(name::Filepath const &) -> std::string;
  inline auto line(name::Filepath const &, line::Number) -> std::string;
}
#endiv
#divert <ipp>
#import scold.easy.format.put
#import format.braket
#import format.qq
namespace scold::easy {
  auto generate::pragma_once(uuid::Point uu, time::Point tt) -> std::string {
    std::ostringstream buf;
    buf << "#pragma once // " << put(uu) << ' ' << put(tt) << '\n';
    return buf.str();
  }
  auto generate::include(name::Filepath const &filepath) -> std::string {
    std::ostringstream buf;
    buf << "#include " << braket(put(filepath)) << "\n";
    return buf.str();
  }
  auto generate::line(name::Filepath const &filepath, line::Number number) -> std::string {
    std::ostringstream buf;
    buf << "#line " << put(number) << ' ' << qq(put(filepath)) << "\n";
    return buf.str();
  }
}
#endiv
