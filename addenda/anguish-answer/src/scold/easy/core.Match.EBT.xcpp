// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward scold.easy.core.Match.declaration
namespace scold::easy::core {
  //
  // EBT = Expected Begin Tag
  //
  // Examples:
  //
  //   #divert <.pp> <-------------- as expected, a begin tag
  //
  // Usage:
  //
  //   if (EBT ebt; eb << line_object) {
  //     ...
  //   }
  //
  template<> struct Match<expected_begin_tag>;
}
#endiv
#divert <hpp>
#import lite.regex.Pattern
#import lite.regex.matching.Results
#import scold.easy.core // namespace regex
#import std.string
#import std.tuple
#import scold.easy.line.Object
namespace scold::easy::core {
  template<> struct Match<expected_begin_tag> {
    inline Match();
    inline auto operator()(line::Object const &) const -> bool;
    inline auto operator<<(line::Object const &) -> bool; // same as operator()
    using Result = std::tuple<std::string>;
    inline auto result() const -> Result;
  protected:
    regex::Pattern FRAGMENT;
    lite::regex::matching::SResults captured;
  };
}
#endiv
#divert <ipp>
#import scold.easy.core // namespace regex
#import lite.regex.search
namespace scold::easy::core {
  Match<expected_begin_tag>::Match()
    : FRAGMENT{R"regex(^\s*#\s*divert\s*<(\w+)>.*)regex"}
  { }
  auto Match<expected_begin_tag>::operator()(line::Object const &subject) const -> bool {
    // No side effect on the object to recover captured values
    return regex::search(subject, FRAGMENT);
  }
  auto Match<expected_begin_tag>::operator<<(line::Object const &subject) -> bool {
    // recover the captured values
    return regex::search(subject, captured, FRAGMENT);
  }
  auto Match<expected_begin_tag>::result() const -> Result {
    // index 0 is the whole match; 1, 2 are the submatches
    return Result{captured[1].str()};
  }
}
#endiv
