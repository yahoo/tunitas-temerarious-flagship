// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#import scold.easy.Configuration
#import scold.easy.message // End end
#import scold.easy.message.Stream
namespace scold::easy {
  inline namespace logging {
    using namespace message;
    inline auto error(Configuration const &) -> Stream;
    inline auto warning(Configuration const &) -> Stream;
    inline auto notice(Configuration const &) -> Stream;
    inline auto verbose(Configuration const &) -> Stream;
    inline auto debug(Configuration const &) -> Stream;
    inline auto end(Configuration const &) -> End;
  }
}
#endiv
#divert <ipp>
#import std.clog
namespace scold::easy {
  auto logging::error(Configuration const &cfg) -> Stream {
    return Stream{std::clog} << cfg.NAME << ": error, ";
  }
  auto logging::warning(Configuration const &cfg) -> Stream {
    if (cfg.warnings_mode && ! cfg.quiet_mode) {
      return Stream{};
    } else {
      return Stream{std::clog} << cfg.NAME << ": warning, ";
    }
  }
  auto logging::notice(Configuration const &cfg) -> Stream {
    if (cfg.quiet_mode) {
      return Stream{};
    } else {
      return Stream{std::clog} << cfg.NAME << ": notice, ";
    }
  }
  auto logging::verbose(Configuration const &cfg) -> Stream {
    if (!cfg.verbose_mode) {
      return Stream{};
    } else {
      return Stream{std::clog} << cfg.NAME << ": verbose, ";
    }
  }
  auto logging::debug(Configuration const &cfg) -> Stream {
    if (!cfg.debug_mode) {
      return Stream{};
    } else {
      return Stream{std::clog} << cfg.NAME << ": debug, ";
    }
  }
  auto logging::end(Configuration const &) -> End {
    return End::END;
  }
}
#endiv
