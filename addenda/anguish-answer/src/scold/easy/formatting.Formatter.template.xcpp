// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::easy::formatting {
  //
  // The generic  a formatter
  // An implemenation detail of the nearby format(...) function.
  //
  // The Formatter object captures a reference to its argument upon construction.
  // The lifetime of the formatter object must be longer than the lifetime of its referent.
  //
  // The magic happens in operator<<, which is declared & overloaded nearby.
  //
  // Usage:
  //
  //   auto const &thing = ...somehow...
  //   std::cout << format(thing);
  //
  template<typename TYPE> class Formatter;
}
#endiv
#divert <hpp>
#import std.basic_ostream
#import nonstd.required.Character
#import nonstd.required.Character_Traits
namespace scold::easy {
  namespace formatting {
    // the default implementation provides the standard basic results of operator<< ... whatever that might be.
    template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS, typename TYPE> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Formatter<TYPE> const &) -> std::basic_ostream<CHAR, TRAITS> &;
  }
  template<typename TYPE> class formatting::Formatter {
  public:
    using Value = TYPE;
    inline explicit Formatter(Value const &value) : value{value} { }
    Value const &value;
  };
}
#endiv
#divert <ipp>
namespace scold::easy {
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS, typename TYPE> auto formatting::operator<<(std::basic_ostream<CHAR, TRAITS> &o, Formatter<TYPE> const &f) -> std::basic_ostream<CHAR, TRAITS> & {
    return o << f.value;
  }
}
#endiv
