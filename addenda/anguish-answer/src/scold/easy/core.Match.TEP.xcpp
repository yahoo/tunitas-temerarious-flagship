// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward scold.easy.core.Match.declaration
namespace scold::easy::core {
  //
  // Examples:
  //
  //   #divert </fpp> <-------------- the begin-and-end
  //   #divert </hpp>
  //   #divert </ipp>
  //   #divert </tpp>
  //   #divert </cpp>
  //
  // Usage:
  //
  //   if (TEP tep; tep << line_object) {
  //     auto [endmode_tag, endmod_name] = tep.result();
  //     ...
  //   }
  //
  template<> struct Match<tag_end_pp>;
}
#endiv
#divert <hpp>
#import scold.easy.line.Object
#import lite.regex.matching.Results
#import std.tuple
namespace scold::easy::core {
  template<> struct Match<tag_end_pp> {
    inline Match();
    inline auto operator()(line::Object const &) const -> bool;
    inline auto operator<<(line::Object const &) -> bool; // side-effects the matcher
    using Result = std::tuple<std::string, std::string>;
    inline auto result() const -> Result;
  protected:
    lite::regex::matching::SResults captured;
    std::regex TAG_END_PP;
  };
}
#divert <ipp>
#import scold.easy.core // namespace regex
#import lite.regex.search
namespace scold::easy::core {
  Match<tag_end_pp>::Match()
    : TAG_END_PP{R"regex(^\s*(?:#\s*divert\s*)?<(/(\w+))>)regex"}
  { }
  auto Match<tag_end_pp>::operator()(line::Object const &subject) const -> bool {
    // no side effect on the object to recover captured values
    return regex::search(subject, TAG_END_PP);
  }
  auto Match<tag_end_pp>::operator<<(line::Object const &subject) -> bool { // side-effects the matcher
    // recover the captured values
    return regex::search(subject, captured, TAG_END_PP);
  }
  auto Match<tag_end_pp>::result() const -> Result {
    // index 0 is the whole match; 1, 2 are the submatches
    return Result{captured[1].str(), captured[2].str()};
  }
}
#endiv
