// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::easy::line {
  //
  // The line object, with surrounding context
  // The filepath (name) whence it came.
  // The line (number) whence it came. 
  //
  // Usage:
  //
  //   Object lobj{...somehow...}
  //   auto const &f = lobj.file()
  //   auto const &l = lobj.line()
  //   auto const &p = lobj.lines()
  //
  //   while (Object lobj; get(inbound, lobj)) {
  //     ...use the line object
  //   }
  //
  //   Object baseline;
  //   if (get(inbound, lobj)) {
  //     while (Object more; get(inbound, more)) {
  //       baseline += more;
  //     }
  //   }
  //
  class Object;
}
#endiv
#divert <hpp>
#import scold.easy.line.Buffer
#import scold.easy.line.Location
#import scold.easy.line.Range
#import scold.easy.line.get
#import scold.easy.name.Filepath
class scold::easy::line::Object : public Buffer {
public:
  using ancestor = Buffer;
  using Filepath = name::Filepath;
  using Number = line::Number;
  inline Object(Filepath const &whence);
  inline auto file() const noexcept -> Filepath const &;
  inline auto line() const noexcept -> Number const &;
  inline auto lines() const noexcept -> Range const &;
  inline auto location() const noexcept -> Location;
  auto operator=(Object const &) -> Object & = default;
  inline auto operator+=(Buffer const &) -> Object &;
protected:
  friend auto line::get(Stream &, Object &) -> Stream &;
  Filepath const *whence_file;
  Range whence_line; // is zero unless read by get(...), which assigns the stream's line number
};
#endiv
#divert <ipp>
namespace scold::easy::line {
  Object::Object(Filepath const &whence) : whence_file{&whence} { }
  auto Object::file() const noexcept -> Filepath const & { return *whence_file; }
  auto Object::line() const noexcept -> Number const & { return whence_line.first; }
  auto Object::lines() const noexcept -> Range const & { return whence_line; }
  auto Object::location() const noexcept -> Location { return Location{*whence_file, whence_line.first}; }
  auto Object::operator+=(Buffer const &other) -> Object & {
    ancestor &self{*this};
    self += '\n';
    ++whence_line.second;
    self += other;
    return *this;
  }
}
#endiv
