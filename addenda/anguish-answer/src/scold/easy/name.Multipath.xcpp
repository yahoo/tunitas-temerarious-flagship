// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::easy::name {
  //
  // The multipath filename against the suffixes
  // Expect descendants; e.g. multipath::Filepath
  // expect policy-laden operations to perform the construction of the Multipath{...}
  //   e.g. multipath::burst(...)
  //
  // Usage: (see descendants)
  //
  class Multipath;
}
#endiv
#divert <hpp>
#import scold.easy.suffix.Suffix
#import scold.easy.suffix.Limits
#import scold.easy.name.Filepath
#import std.array
class scold::easy::name::Multipath {
public:
  Multipath() = default;
  inline auto operator[](suffix::Suffix s) -> Filepath & { return phasepath[(int)s]; }
  inline auto operator[](suffix::Suffix s) const -> Filepath const & { return phasepath[(int)s]; }
  inline auto at(suffix::Suffix s) -> Filepath & { return phasepath.at((int)s); }
  inline auto at(suffix::Suffix s) const -> Filepath const & { return phasepath.at((int)s); }
protected:
  //
  // FPP -> obj/modules/fpp/package.component.file
  // HPP -> obj/modules/hpp/package.component.file
  // IPP -> obj/modules/ipp/package.component.file
  // TPP -> obj/modules/package.component.file
  // CPP -> obj/src/package/component/file.cpp
  //
  std::array<Filepath, suffix::Limits<suffix::Suffix>::size()> phasepath;
};
#endiv
