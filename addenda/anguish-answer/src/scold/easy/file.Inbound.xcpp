// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::easy::file {
  //
  // The inbound file (stream).
  // There is only one input inbound stream.
  //
  // Usage:
  //
  //    auto inbound = Inbound{name};
  //
  //    Inbound inbound;
  //    auto opened = inbound.open(name);
  //    auto closed = inbound.close();
  //
  //    std::getline(inbound, stringbuf);
  //
  class Inbound;
}
#endiv
#divert <hpp>
#import scold.easy.line.Stream
#import scold.easy.file.inbound.Result
#import scold.easy.name.Filepath
#import scold.easy.suffix.Limits
#import scold.easy.suffix.Suffix
#import std.array
#import std.ifstream
#import std.ios_base
class scold::easy::file::Inbound : public line::Stream {
  using ancestor = line::Stream;
public:
  Inbound() = default;
private:
  // You can only open in inbound mode only, so there is no need for or utility in these.
  using Openmode = std::ios_base::openmode;
  inline static constexpr auto IN = std::ios_base::in;
  inline static constexpr auto OUT = std::ios_base::out;
public:
  // These occlude the ancestor's void-returning versions
  inline auto open(name::Filepath const &) -> inbound::Result;
  inline auto close() -> inbound::Result;
  auto rdstate() const noexcept -> IOState override;
  auto base() noexcept -> std::istream & override;
private:
  std::ifstream ifs;
};
#endiv
#divert <ipp>
#include <cerrno>
namespace scold::easy::file {
  auto Inbound::open(name::Filepath const &filepath) -> inbound::Result {
    ifs.open(filepath, IN);
    int errnum = errno; // capture this as soon as possible
    auto ok = ifs.is_open();
    auto value = ok ? 0 : -1;
    return inbound::Result{ok, errnum, value};
  }
  auto Inbound::close() -> inbound::Result {
    ifs.close();
    int errnum = errno; // capture this as soon as possible
    auto ok = !ifs.is_open();
    auto value = ok ? 0 : -1;
    return inbound::Result{ok, errnum, value};
  }
}
#endiv
#divert <cpp>
namespace scold::easy::file {
  auto Inbound::rdstate() const noexcept -> IOState {
    return ifs.rdstate();
  }
  auto Inbound::base() noexcept -> std::istream & {
    return ifs;
  }
}
#endiv
