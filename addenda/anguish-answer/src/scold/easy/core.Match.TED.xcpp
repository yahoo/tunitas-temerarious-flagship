// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward scold.easy.core.Match.declaration
namespace scold::easy::core {
  //
  // Examples:
  //
  //   #endiv
  //
  // Usage:
  //
  //   if (ted ted; ted << line_object) {
  //     ...
  //   }
  //
  template<> struct Match<tag_end_div>;
}
#endiv
#divert <hpp>
#import scold.easy.line.Object
namespace scold::easy::core {
  template<> struct Match<tag_end_div> {
    inline Match();
    inline auto operator()(line::Object const &) const -> bool;
    inline auto operator<<(line::Object const &) -> bool; // same as operator()
  protected:
    std::regex TAG_END_DIV;
  };
}
#divert <ipp>
#import scold.easy.core // namespace regex
#import lite.regex.search
namespace scold::easy::core {
  Match<tag_end_div>::Match()
    : TAG_END_DIV{R"regex(^\s*(?:#\s*endiv\b))regex"}
  { }
  auto Match<tag_end_div>::operator()(line::Object const &subject) const -> bool {
    // no side effect on the object to recover captured values
    return regex::search(subject, TAG_END_DIV);
  }
  auto Match<tag_end_div>::operator<<(line::Object const &subject) -> bool {
    return operator()(subject);
  }
}
#endiv
