// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::easy::line {
  //
  // A range of lines.
  // But most commonly, a single line.
  //
  // Usage:
  //
  //   Range r = 1;
  //   r++; ++r;
  //   r.first = 1;
  //   r.second = 2;
  //   auto r = Range{3, 5};
  //
  class Range;
}
#endiv
#divert <hpp>
#import scold.easy.line.Number
#import std.pair
class scold::easy::line::Range : public std::pair<Number, Number> {
  using ancestor = std::pair<Number, Number>;
public:
  Range() = default;
  using ancestor::pair;
  using ancestor::operator=;
  inline explicit Range(Number);
  Range(Range const &) = default;
  inline auto operator=(Number) -> Range &;
  auto operator=(Range const &) -> Range & = default;
  inline auto operator++() -> Range &;
  inline auto operator++(int) -> Range;
};
#endiv
#divert <ipp>
namespace scold::easy::line {
  Range::Range(Number n)
    : ancestor{n, n}
  { }
  auto Range::operator=(Number n) -> Range & {
    ancestor::operator=(ancestor{n, n});
    return *this;
  }
  auto Range::operator++() -> Range & {
    ++first;
    second = first;
    return *this;
  }
  auto Range::operator++(int) -> Range {
    Range old{*this};
    operator++();
    return old;
  }
}
#endiv
