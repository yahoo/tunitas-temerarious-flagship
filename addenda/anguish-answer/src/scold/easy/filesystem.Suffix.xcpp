// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.easy.filesystem
namespace scold::easy::suffix::filesystem {
  using namespace scold::easy::filesystem; // cascaded namespaces
}
#endiv
#divert <hpp>
#import scold.easy.filesystem.Path
#import scold.easy.name.Module
#import scold.easy.suffix.Suffix
namespace scold::easy::suffix::filesystem {
  inline auto operator/(name::Module const &, suffix::Suffix) -> Path;
  inline auto operator/(suffix::Suffix, name::Module const &) -> Path;
}
namespace scold::easy::suffix::filesystem {
  inline auto operator/(Path, Suffix) -> Path;
  inline auto operator/(Suffix, Path) -> Path;
  inline auto operator*(Path, Suffix) -> Path;
}
namespace scold::easy::suffix {
  // publish them so ADL can find they by Suffix
  using filesystem::operator/;
  using filesystem::operator*;
}
#endiv
#divert <ipp>
#import std.forward
#import scold.easy.tagged.String.traits
namespace scold::easy::suffix {
  auto filesystem::operator/(name::Module const &m, suffix::Suffix s) -> Path {
    return Path{static_cast<std::string const &>(m)} / to_string(s);
  }
  auto filesystem::operator/(suffix::Suffix s, name::Module const &m) -> Path {
    return to_string(s) / Path{static_cast<std::string const &>(m)};
  }
  auto filesystem::operator/(Path p, Suffix s) -> Path {
    return p / to_string(s);
  }
  auto filesystem::operator/(Suffix s, Path p) -> Path {
    return to_string(s) / p;
  }
  auto filesystem::operator*(Path p, Suffix s) -> Path {
    p += ".";
    p += to_string(s);
    return std::move(p);
  }
}
#endiv
