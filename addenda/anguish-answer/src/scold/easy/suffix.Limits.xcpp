// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.easy.suffix.Suffix
#import scold.easy.suffix.Step
namespace scold::easy::suffix {
  //
  // The (constexpr) limits
  // Rhymes with std::numeric_limits
  //
  // Usage: really?
  //
  template<typename TYPE> struct Limits;
  template<> struct Limits<Suffix>;
  template<> struct Limits<Step>;
}
#endiv
#divert <hpp>
#import std.size_t
namespace scold::easy::suffix {
  template<> struct Limits<Suffix> {
    // REMINDER - Limits<Suffix> spans [FPP, CPP], omitting BEGIN and END as latent sentinels
    using Value = Suffix;
    inline static constexpr auto min() -> Value { return Suffix::FPP; }
    inline static constexpr auto max() -> Value { return Suffix::CPP; }
    inline static constexpr auto size() -> std::size_t { return 1u + (std::size_t)max() - (std::size_t)min(); }
  };
  template<> struct Limits<Step> {
    // REMINDER - Limits<Step> spans [BEGIN, END]
    using Value = Step;
    inline static auto min() -> Value { return Step::BEGIN; }
    inline static auto max() -> Value { return Step::END; }
    inline static auto size() -> std::size_t { return 1u + (std::size_t)(Suffix)max() - (std::size_t)(Suffix)min(); }
  };
}
#endiv
