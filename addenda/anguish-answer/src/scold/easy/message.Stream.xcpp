// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.easy.message // End
namespace scold::easy::message {
  //
  // A message stream establishing an (message) message record.
  // The head of the record is created; the tail must be completed by the caller.
  //
  // Usage:
  //
  //   Context const &ctx{...somehow...};
  //   file(ctx, "file.cpp") << "that is bad, very bad" << end;
  //   line(ctx, "file.cpp", 33) << "line thirty three" << end;
  //
  //   Configuration const &cfg{...somehow...};
  //   error(cfg) << "you see here now" << end;
  //   warning(cfg) << "you see here now" << end;
  //   notice(cfg) << "you see here now" << end;
  //   verbose(cfg) << "you see here now" << end;
  //   debug(cfg) << "you see here now" << end;
  //
  class [[nodiscard]] Stream;
}
#endiv
#divert <hpp>
#import std.optional
#import std.ostream
#import std.reference_wrapper
class scold::easy::message::Stream {
public:
  inline Stream();
  inline explicit Stream(std::ostream &);
  template<typename TYPE> inline auto operator<<(TYPE const &) -> Stream;
  inline auto operator<<(End) -> void;
protected:
  std::ostream *outbound;
  // WAIT A MINUTE ... an optional reference_wrapper is a POINTER
  // std::optional<std::reference_wrapper<std::ostream>> outbound;
};
#endiv
#divert <ipp>
#import std.ref
namespace scold::easy::message {
  Stream::Stream()
    : outbound{nullptr}
  { }
  Stream::Stream(std::ostream &outbound)
    : outbound{&outbound}
  { }
  auto Stream::operator<<(End) -> void {
    if (outbound) {
      static_cast<std::ostream &>(*outbound) << '\n';
    }
  }
  template<typename TYPE> auto Stream::operator<<(TYPE const &that) -> Stream {
    if (outbound) {
      static_cast<std::ostream &>(*outbound) << that;
    }
    return Stream{*this};
  }
}
#endiv
