// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <hpp>
#forward scold.easy.line.Stream
#forward scold.easy.line.Object
namespace scold::easy::line {
  //
  // Get a line object off the stream.
  // increment the line number
  //
  // Like std::getline(...) but manages the line counting.
  //
  // Usage:
  //
  //   filesystem::Path filepath{...somehow...};
  //   line::Object object{filepath};
  //   my::Stream stream{...somehow...}
  //   while (get(stream, object)) {
  //      ...use the line object...
  //      std::string const &payload = object;
  //      auto const &name = object.file();
  //      auto const number = object.line();
  //   }
  //
  inline auto get(Stream &, Object &) -> Stream &;
}
#endiv
#divert <ipp>
#import scold.easy.line.Stream
#import scold.easy.line.Object
#import std.getline
auto scold::easy::line::get(Stream &stream, Object &object) -> Stream & {
  //
  // Increment the line number first so "line 1" has the correct sense.
  // At the end of reading the line with std::getline(...)
  //
  // Cases:
  //   an exception is thrown -> the object's line number is invalid.
  //   the stream is good     -> line number is valid
  //   the stream is bad      -> line number is invalid
  //   the stream is fail     -> line number is invalid
  //   the stream is eof      -> line number is valid;
  //                             such indicates that the last line in the stream did not end in '\n'
  //
  object.whence_line = ++stream.line_number;
  std::getline(stream.base(), static_cast<std::string &>(object));
  return stream;
}
#endiv
