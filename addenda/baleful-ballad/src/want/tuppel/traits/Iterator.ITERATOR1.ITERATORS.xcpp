// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import want.tuppel.traits.Iterator
namespace want {
  namespace tuppel {
    namespace traits {
      template<typename ITERATOR1, typename... ITERATORS> struct Iterator<ITERATOR1, ITERATORS...>;
    }
  }
}
#endiv
#divert <hpp>
#import std.conditional
#import std.forward_iterator_tag
#import std.is_copy_constructible
#import std.iterator
#import std.iterator_traits
#import std.tuple
#import want.doppel.traits.Combine
template<typename ITERATOR1, typename... ITERATORS> struct want::tuppel::traits::Iterator<ITERATOR1, ITERATORS...> : public Iterator<ITERATORS...> {
private:
  using ancestor = Iterator<ITERATORS...>;
public:
  using traits1_type = std::iterator_traits<ITERATOR1>;
private:
  template<typename TRAITS> struct value_or_reference {
    using type = typename std::conditional<std::is_copy_constructible<typename TRAITS::value_type>::value, typename TRAITS::value_type, typename TRAITS::value_type &>::type;
  };
  using value1_type = typename value_or_reference<traits1_type>::type;
public:
  // the basics of std::iterator
  // because we're returning tuples, we can't meaningfully have a difference, pointer or reference type.
  using iterator_category = typename doppel::traits::Combine<typename traits1_type::iterator_category, typename ancestor::iterator_category>::type;
  using value_type = std::tuple<value1_type, typename value_or_reference<std::iterator_traits<ITERATORS>>::type...>;
  using difference = void;
  using pointer = void;           // we're not using pointer_pair
  using reference = void;         // we're not using reference_pair
  // capture the result of the decisions recorded herein
  using iterator = std::iterator<iterator_category, value_type, difference, pointer, reference>;
  using traits_type = iterator; // ahem, in case you forget
};
#endiv
