// -*- c++ -*- but in the SCOLD stylings which are the fashion nowadays.
#divert <hpp>
#import want.regex.unbusted
#import want.regex.basic_pattern
#import want.regex.constants
#import want.regex.match_results
#import std.basic_string
namespace want {
  namespace regex {
    //
    // see http://www.cplusplus.com/reference/regex/regex_search/
    // following C++14
    //
    // Wow this is a long way to go to rename a function over vanity & small-minded symmetry.
    //
    template <class charT, class traits>
    bool search(const charT *s, const basic_pattern<charT,traits> &rgx,
                constants::match_flag_type flags = constants::match_default)
    { return unbusted::regex_search(s, rgx, flags); }

    template <class ST, class SA, class charT, class traits>
    bool search(const std::basic_string<charT,ST,SA> &s,
                const basic_pattern<charT,traits> &rgx,
                constants::match_flag_type flags = constants::match_default)
    { return unbusted::regex_search(s, rgx, flags); }

    template <class BidirectionalIterator, class charT, class traits>
    bool search(BidirectionalIterator first, BidirectionalIterator last,
                const basic_pattern<charT,traits> &rgx,
                constants::match_flag_type flags = constants::match_default)
    { return unbusted::regex_search(first, last, rgx, flags); }

    template <class charT, class Alloc, class traits>
    bool search(const charT *s, match_results<const charT *, Alloc> &m,
                const basic_pattern<charT,traits> &rgx,
                constants::match_flag_type flags = constants::match_default)
    { return unbusted::regex_search(s, m, rgx, flags); }

    template <class ST, class SA, class Alloc, class charT, class traits>
    bool search(const std::basic_string<charT,ST,SA> &s,
                match_results<typename std::basic_string<charT,ST,SA>::const_iterator,Alloc> &m,
                const basic_pattern<charT,traits> &rgx,
                constants::match_flag_type flags = constants::match_default)
    { return unbusted::regex_search(s, m, rgx, flags); }

    template <class BidirectionalIterator, class Alloc, class charT, class traits>
    bool search(BidirectionalIterator first, BidirectionalIterator last,
                match_results<BidirectionalIterator, Alloc> &m,
                const basic_pattern<charT,traits> &rgx,
                constants::match_flag_type flags = constants::match_default)
    { return unbusted::regex_search(first, last, m, rgx, flags); }

    template <class ST, class SA, class Alloc, class charT, class traits>
    bool search(const std::basic_string<charT,ST,SA>&&,
                match_results<typename std::basic_string<charT,ST,SA>::const_iterator,Alloc>&,
                const basic_pattern<charT,traits>&,
                constants::match_flag_type=constants::match_default) = delete;
  }
}
#endiv
