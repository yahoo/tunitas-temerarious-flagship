// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#if ((4 == _GNUC__ && 8 < __GNUC_MINOR__) || 4 < __GNUC__)
#define __std_regex_IS_IMPLEMENTED_BY_GCC__
//
// WATCHOUT - in gcc 4.8, std::regex is incomplete.  Merely throwing an exception.
// https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html
//
#include <regex>
#else
  // maybe the boost stuff works
#include <boost/regex.hpp>
#endif

namespace want {
  namespace regex {
    namespace unbusted {
      // Nasty ... handle the binding of the boost::- or the std::- implementation
      // ... whichever one actually is complete enough to actually use.
#ifdef __std_regex_IS_IMPLEMENTED_BY_GCC__
      using std::basic_regex;
      using std::regex;
      using std::regex_error;
      using std::regex_constants::error_type;
      using std::regex_iterator;
      using std::match_results;
      using std::cmatch;
      using std::smatch;
      using std::sub_match;
      using std::csub_match;
      using std::ssub_match;
      using std::regex_match;
      using std::regex_replace;
      using std::regex_search;
      using std::regex_traits;
      namespace regex_constants = std::regex_constants;
#else
      using boost::basic_regex;
      using boost::regex;
      using boost::regex_error;
      using boost::regex_constants::error_type;
      using boost::regex_iterator;
      using boost::match_results;
      using boost::cmatch;
      using boost::smatch;
      using boost::sub_match;
      using boost::csub_match;
      using boost::ssub_match;
      using boost::regex_match;
      using boost::regex_replace;
      using boost::regex_search;
      using boost::regex_traits;
      namespace regex_constants = boost::regex_constants;
#endif
      // Yes, left out the "wide" variants
    }
  }
}
#endiv
