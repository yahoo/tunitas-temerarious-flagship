// -*- c++ -*- but in the SCOLD stylings which are the fashion nowadays.
#divert <hpp>
#import std.tuple
namespace want {
  // whereas tuple_cat takes arguments of tuples and flattens them out into one big tuple
  // tuple_const adds an element to the tuple on either end, front or back.
  template<typename TYPE, typename... TYPES> inline auto tuple_cons(TYPE &&, std::tuple<TYPES...> &&) -> std::tuple<TYPE, TYPES...>;
  template<typename... TYPES, typename TYPE> inline auto tuple_cons(std::tuple<TYPES...> &&, TYPE &&) -> std::tuple<TYPES..., TYPE>;
}
#endiv
#divert <ipp>
#import std.forward
template<typename TYPE, typename... TYPES> auto want::tuple_cons(TYPE &&anon1, std::tuple<TYPES...> &&anonN) -> std::tuple<TYPE, TYPES...> {
  return std::tuple_cat(std::tuple<TYPE>(std::forward<TYPE>(anon1)), std::forward<std::tuple<TYPES...>>(anonN));
}

template<typename... TYPES, typename TYPE> auto want::tuple_cons(std::tuple<TYPES...> &&anonN, TYPE &&anon1) -> std::tuple<TYPES..., TYPE> {
  return std::tuple_cat(std::forward<std::tuple<TYPES...>>(anonN), std::tuple<TYPE>(std::forward<TYPE>(anon1)));
}
#endiv

