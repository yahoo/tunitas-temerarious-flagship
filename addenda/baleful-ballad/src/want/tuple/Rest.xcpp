// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import std.size_t
namespace want {
  namespace tuple {
    template<std::size_t START, typename... TYPES> struct Rest;
    namespace detail {
      template<bool ZERO, std::size_t START, typename... TYPES> struct Rest;
      template<std::size_t START, typename TYPE, typename... TYPES> struct Rest<false, START, TYPE, TYPES...>;
      template<typename... TYPES> struct Rest<true, 0, TYPES...>;
    }
  }
}
#endiv
#divert <hpp>
template<std::size_t START, typename TYPE, typename... TYPES> struct want::tuple::detail::Rest<false, START, TYPE, TYPES...> : public Rest<0 == (START-1), START-1, TYPES...> {
private:
  using ancestor = Rest<0 == (START-1), START-1, TYPES...>;
public:
  using type = typename ancestor::type;
};

#import std.tuple
template<typename... TYPES> struct want::tuple::detail::Rest<true, 0, TYPES...> {
  using type = std::tuple<TYPES...>;
};

template<std::size_t START, typename... TYPES> struct want::tuple::Rest : public detail::Rest<0u == START, START, TYPES...> { };
#endiv
