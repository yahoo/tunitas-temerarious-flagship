// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace remonstrate {
  class Usage;
}
#divert </fpp>
#divert <hpp>
#import options.throwable.Usage

class remonstrate::Usage : public options::throwable::Usage {
  using ancestor = options::throwable::Usage;
public:
  using ancestor::Usage;
  auto unformatted() const -> std::string override final;
};
#divert </hpp>
#divert <cpp>
#import autotools.autoconf.Config.scold.CONFIG
#import std.ostringstream
auto remonstrate::Usage::unformatted() const -> std::string {
  auto frag1 =
    ("usage: ${NAME} [ options ] ... files.xcpp ...\n"
     "\n"
     "options :=\n"
     "\n"
     "--srcdir=<scold-source-directory>                    same as --srcdir-directory\n"
     "-s <scold-source-directory>                          [input] SCOLD source directory\n"
     "--srcdir-directory=<scold-source-directory>\n"
     "-S '$(VARIABLE)'                                     [input] SCOLD variable directory\n"
     "--srcdir-variable='$(VARIABLE)'                      defaults to $(srcdir)\n"
     "\n"
     "--modulesdir=<directory>                             same as --modulesdir-directory\n"
     "-m <directory>                                       [output] declarations directory\n"
     "--modulesdir-directory=<c++-declarations-directory>\n"
     "-M '$(VARIABLE)'                                     [output] modulesdir variable\n"
     "--modulesdir-variable='$(VARIABLE)'                  defaults to '$(modulesdir)'\n"   
     "  maybe you want '$(scold_modulesdir)' for baleful-ballad in hypogeal-twilight\n"
     "\n"
     "--objdir=DIRECTORY                                   same as --objdir-directory\n"
     "--objdir-directory=<c++-objects-directory>           definitions directory\n"
     "--objdir-variable='$(VARIABLE)'                      defaults to '$(objdir)'\n"
     "  maybe you want '$(scold_cxx_objdir)' for baleful-ballad in hypogeal-twilight\n"
     "\n"
     "[ -I<directory>                     include file to find other modules\n"
     "  --include=<directory> ]\n"
     "[ -E<rootdir>                       external (sub-)modules with\n"
     "  --external=<rootdir>                  .../obj/modules, .../obj/src, .../src\n"
     "  --submodule=<rootdir> ]\n"
     "\n"
     "[ -n | --insert-namespace                     insert enclosing namespace (or not)\n"
     "  -N | --no-insert-namespace ]                default: on\n"
     "[ -k | --matryoshka-namespace-nesting         insert enclosing namespace (or not)\n"
     "  -K | --no-matryoshka-namespace-nesting ]    default: off\n"
     "[ -d                                          make directories\n"
     "  --make-directories ]                        default: off\n"
     "[ -1 | --one-step                             (deprecated)\n"
     "     | --one-step-regeneration                one-step dependency regeneration rule\n"
     "[ -2 | --two-step                             (current, default)\n"
     "     | --two-step-regeneration                one-step dependency regeneration rule\n"
     "[ -b=<script>                                 make directories\n"
     "  --make-depend-script=<script> ]             default\n"
     "    script: "); // script follows
  auto frag2 =
    ("\n"
     "[ --help | --usage ]                        emit this\n"
     "[ --version ]                               emit the version, exit\n"
     "[ --verbose ]                               prattle\n"
     "[ --quiet ]                                 shut. up.\n"
     "[ --dry-run ]                               show what might be done"); // caller supplies the \n
  using ac = autotools::autoconf::Config<scold::CONFIG>;
  std::ostringstream buf;
  buf << frag1 << ac::make_depend_script() << frag2;
  return buf.str();
}
#divert </cpp>
