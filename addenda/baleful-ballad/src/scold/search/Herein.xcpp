// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  namespace search {
    //
    // The build "right here"
    // It may be as simple as "."
    //
    // Herein is where current source code lives.
    //     it does not exist until it is built, so we have to guess
    //
    // Usage:
    //
    //     Herein search(".")
    //     scold::Module module{"std", "iostream"}; <------------- probe that
    //     auto searched = search(module);
    //     if (ok(searched)) {
    //         std::string directory = value(searched);
    //         ...use directory...
    //     }
    //
    // The current build is like a submodule,
    // it has have a triple of directories where the module might exist
    //    modulesdir     -- once built, the module { *.fpp, *.hpp, *.ipp, *.tpp }
    //    objdir         -- once built the module *.cpp exist here
    //    srcdir         -- prior to building, the *.xcpp exists here
    //
    class Herein;
  }
}
#endiv
#divert <hpp>
#import scold.Module
#import scold.search.aspect.Herein
#import scold.search.cache.Unit
class scold::search::Herein : public aspect::Herein, protected cache::Unit {
  using ancestor = aspect::Herein;
public:
  using ancestor::Herein;
  using ancestor::operator=;
  inline auto operator()(scold::Module const &) -> result_type;
};
#endiv
#divert <ipp>
auto scold::search::Herein::operator()(scold::Module const &module) -> result_type {
  return operator_call(*this, module);
}
#endiv
