// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  //
  // The dependency regeneration method.
  //
  // The integer coding is used in printed representations to document the scheme being used.
  // It can be found in the *.mk files generated by Accruals<DEPEND>.
  //
  // Method: ONE-STEP (with both Step 1 and Step 2 being done once and together, with no regeneration)
  //    
  // In .../Makefrag.am
  //
  // [FIXTHIS]][[WRONG]][[WRONG]][[WRONG]][[WRONG]][[WRONG]][[WRONG]][[WRONG]][[WRONG]]
  //     $(scold_cxxdir)/scold/dependencies.mk:
  //         $(AM_V_BB1ST) $(call bbSCOLD_DISAGGREGATE_COMPILE, $(lib_libscold_la_SOURCES)) ....... Step 1
  //         $(AM_V_BB2ND) $(call bbSCOLD_DEPENDENCIES_COMPILE, $(lib_libscold_la_SOURCES)) ....... Step 2
  //         @test -e $@
  //
  // In .../Some_Class.mk
  //
  //    $(scold_cxxdir)/scold/config/Some_Class.mk : $(scold_srcdir)/scold/config/Some_Class.xcpp
  //        $(AM_V_BB1ST) $(bbDC) $(bbDC_OPTIONS) $(SEARCHPATH) $<
  //
  // Method: TWO-STEP (with Step 1 and Step 2 starting out, but then Step 2 can be repeated to regenerate)
  //
  // In .../Makefrag.am
  //
  //     $(lib_libscold_la_SOURCES) : obj/src/%.cpp : src/%.xcpp
  //         $(AM_V_BB1ST) $(call bbSCOLD_DISAGGREGATE_COMPILE, $@) ................. regeneration of Step 2.
  //         @test -e $@
  //     $(scold_cxxdir)/scold/dependencies.mk:
  //         $(AM_V_BB2ND) $(call bbSCOLD_COMPILE, $(lib_libscold_la_SOURCES))  ...... does both Steps 1 and 2 to start out
  //         @test -e $@
  //
  // In .../Some_Class.mk
  //
  //     set up dependencies
  //         LO -> MK
  //         O --> MK -> TPP -> IPP -> HPP -> FPP -> CPP
  //     expects the .../Makefrag.am recipe to continue with
  //         CPP -> XCPP
  //
  enum class Regeneration {
    ONE_STEP = 1,
    DEPRECATING_ONE_STEP = ONE_STEP,
    TWO_STEP = 2,
    CURRENT_TWO_STEP = TWO_STEP,
  };
}
#endiv
#divert <cpp>
#warning the documentariat is wrong here
#endiv
