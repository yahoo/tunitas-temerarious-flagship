// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.Phase
namespace scold {
  namespace phase {
    namespace detail {
      template<Phase PHASE> struct MidrangeDefinition;
    }
  }
}
#endiv
#divert <hpp>
#import std.string
#forward scold.stream // steam::index_t
template<scold::Phase PHASE> struct scold::phase::detail::MidrangeDefinition {
  inline static constexpr auto value() -> Phase { return PHASE; }
  inline static constexpr auto has_diversion() -> bool { return true; }
  inline static constexpr auto diversion_counter(unsigned base) -> stream::index_t { return base+has_diversion(); }
  inline static constexpr auto has_index() -> bool { return has_diversion(); }
  inline static constexpr auto index() -> stream::index_t { return (int)(value()) - (int)(Phase::FPP); }
  inline static constexpr auto can_endiv() -> bool { return true; }
  inline static constexpr auto has_succ() -> bool { return true; }
  inline static constexpr auto has_pred() -> bool { return true; }
  inline static constexpr auto has_suffix() -> bool { return true; }
  inline static constexpr auto c_str() -> char const *; // see the specialization
  inline static auto str() -> std::string { return std::string(c_str()); }
};

namespace scold {
  namespace phase {
    namespace detail {
      template<> constexpr auto MidrangeDefinition<Phase::FPP>::c_str() -> char const *;
      template<> constexpr auto MidrangeDefinition<Phase::HPP>::c_str() -> char const *;
      template<> constexpr auto MidrangeDefinition<Phase::IPP>::c_str() -> char const *;
      template<> constexpr auto MidrangeDefinition<Phase::TPP>::c_str() -> char const *;
      template<> constexpr auto MidrangeDefinition<Phase::CPP>::c_str() -> char const *;
    }
  }
}
#endiv
#divert <ipp>
template<> constexpr auto scold::phase::detail::MidrangeDefinition<scold::Phase::FPP>::c_str() -> char const * {
  return "fpp";
}

template<> constexpr auto scold::phase::detail::MidrangeDefinition<scold::Phase::HPP>::c_str() -> char const * {
  return "hpp";
}

template<> constexpr auto scold::phase::detail::MidrangeDefinition<scold::Phase::IPP>::c_str() -> char const * {
  return "ipp";
}

template<> constexpr auto scold::phase::detail::MidrangeDefinition<scold::Phase::TPP>::c_str() -> char const * {
  return "tpp";
}

template<> constexpr auto scold::phase::detail::MidrangeDefinition<scold::Phase::CPP>::c_str() -> char const * {
  return "cpp";
}
#endiv
