// -*- c++ -*- in the SCOLD stylings
#divert <hpp>
#import scold.phase.Phase
#import path.filename.mount.Value
namespace scold {
  namespace phase {
    // "package/subpackage/Class" * Phase::FPP -> "package/subpackage/Class.fpp"
    inline auto operator*(path::filename::mount::Value &&, Phase) -> path::filename::mount::Value;

    // "package.subpackage.Class" / Phase::FPP -> "package.subpackage.Class/fpp"
    inline auto operator/(path::filename::mount::Value &&, Phase) -> path::filename::mount::Value;
    // Phase::FPP / "package.subpackage.Class" -> "fpp/package.subpackage.Class"
    inline auto operator/(Phase, path::filename::mount::Value &&) -> path::filename::mount::Value;
  }
}
#endiv
#divert <ipp>
#import scold.phase.Definition

auto scold::phase::operator*(path::filename::mount::Value &&anon, Phase phase) -> path::filename::mount::Value {
  Definition def(phase);
  anon.subject += '.';
  anon.subject += def.str();
  return std::forward<path::filename::mount::Value>(anon);
}

auto scold::phase::operator/(path::filename::mount::Value &&anon, Phase phase) -> path::filename::mount::Value {
  Definition def(phase);
  anon.subject += '/';
  anon.subject += def.str();
  return std::forward<path::filename::mount::Value>(anon);
}

auto scold::phase::operator/(Phase phase, path::filename::mount::Value &&anon) -> path::filename::mount::Value {
  Definition def(phase);
  anon.subject.insert(0, (def.str() + '/'));
  return std::forward<path::filename::mount::Value>(anon);
}
#endiv

