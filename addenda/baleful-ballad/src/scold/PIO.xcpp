// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  //
  // PIO = (phase, ins, outs)
  //
  // Give names to the tuple members ... for easy reference
  // Usage:
  //     for (PIO pio : multigang(phases, ins, outs) {
  //         pio.phase is a Phase
  //         pio.in is a Stream among the input streams as ins[phase]
  //         pio.out is a Stream among the output streams as outs[phase]
  //         ....do stuff...
  //     }
  //
  class PIO;
}
#endiv
#divert <hpp>
#import scold.processor.Prototype
#import std.tuple
class scold::PIO : public processor::Prototype {
  using ancestor = processor::Prototype;
public:
  using tuple_type = std::tuple<phase_type, input_type &, output_type &>;
  inline /*implicit*/ PIO(tuple_type &);
  inline /*implicit*/ PIO(tuple_type &&);
  phase_type const phase;
  input_type &in;
  output_type &out;
};
#endiv
#divert <ipp>
#import std.get
scold::PIO::PIO(tuple_type &arg)
  : phase(std::get<0>(arg))
  , in(std::get<1>(arg))
  , out(std::get<2>(arg)) {
  ;
}

scold::PIO::PIO(tuple_type &&anon)
  : phase(std::get<0>(std::forward<tuple_type>(anon)))
  , in(std::get<1>(std::forward<tuple_type>(anon)))
  , out(std::get<2>(std::forward<tuple_type>(anon))) {
  ;
}
#endiv
