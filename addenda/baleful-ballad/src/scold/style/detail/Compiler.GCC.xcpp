// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#forward scold.style.detail.Compiler
namespace scold {
  namespace style {
    namespace detail {
      //
      // Emit gcc-themed error messaging against the filename
      // Examples:
      //
      //     filename.cpp:99: error, this is really bad here on line nintey-nine
      //     filename.cpp: error, the file is poisoned altogether.
      // 
      // Usage:
      //     std::cout << style::gcc(ctx, line) << " and that was really bad\n";
      //
      enum class GCC { };
      template<> struct Compiler<GCC>;
    }
  }
}
#endiv
#divert <hpp>
#import std.ostream
namespace scold {
  namespace style {
    namespace detail {
      inline auto operator<<(std::ostream &, Compiler<GCC> const &) -> std::ostream &;
    }
  }
}

#import scold.config.Context
#import scold.line.Item
template<> struct scold::style::detail::Compiler<scold::style::detail::GCC> {
  using context_type = scold::config::Context;
  using line_type = scold::line::Item;
  inline Compiler(context_type const &, line_type const &);
  // the lifetime of these references has to be longer than that of the object
  context_type const &ctx;
  line_type const &line;
};
#endiv
#divert <ipp>
auto scold::style::detail::operator<<(std::ostream &o, Compiler<GCC> const &c) -> std::ostream & {
  o << c.ctx.filename << ':';
  if (has_lineno(c.line)) {
    o << lineno(c.line) << ':';
  }
  o << ' ';
  return o;
}

scold::style::detail::Compiler<scold::style::detail::GCC>::Compiler(context_type const &arg_ctx, line_type const &arg_line)
  : ctx(arg_ctx)
  , line(arg_line) {
  ;
}
#endiv
