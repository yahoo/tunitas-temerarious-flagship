// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  namespace option {
    //
    // A directory has a symbolic name and a literal (actual) name.
    //
    class Directory;
  }
}
#endiv
#divert <hpp>
#import std.string
class scold::option::Directory {
public:
  inline Directory(std::string const &conceptual, std::string const &symbolic, std::string const &literal);
  // The conceptual name of this datum; e.g. modulesdir, objdir, srcdir
  std::string conceptual;
  // The (GNU-)makefile symbolic name of this datum; e.g. $(modulesdir), $(objdir), $(srcdir)
  // The Makefile syntax is preferred so that callers can set fragments; e.g. --objdir="$(builddir)/obj/src"
  std::string symbolic;
  // A pathname fragment; e.g. "src/project"
  std::string literal;
  // The 'concept' name is never reset
  // If the symbolic name is empty, then it becomes the literal.
  // If the literal name is empty then an exception is thrown.
  auto finalize() -> void;
};
#endiv
#divert <ipp>
#import std.logic_error
scold::option::Directory::Directory(std::string const &arg_conceptual, std::string const &arg_symbolic, std::string const &arg_literal)
  : conceptual(arg_conceptual)
  , symbolic(arg_symbolic)
  , literal(arg_literal) {
  if (conceptual.empty()) {
    // This is a programmer error as the programmer defines & consumes the conceptual name
    throw std::logic_error("conceptual cannot be empty");
  }
}
#endiv
#divert <cpp>
#import scold.exception.Quitting
#import sys.posix.isdir
#import std.ostringstream
#import std.logic_error
auto scold::option::Directory::finalize() -> void {
  if (conceptual.empty()) {
    // How did this happen? See the constructor
    throw std::logic_error("conceptual cannot be empty");
  }
  if (literal.empty()) {
    std::ostringstream buf;
    buf << "the " << conceptual << " directory cannot be empty";
    throw scold::exception::Quitting(buf.str());
  }
  if (! sys::posix::isdir(literal) ) {
    std::ostringstream buf;
    buf << "the " << conceptual << " directory " << literal << " does not exist";
    throw scold::exception::Quitting(buf.str());
  }
  if (symbolic.empty()) {
    symbolic = literal;
  }
}
#endiv
