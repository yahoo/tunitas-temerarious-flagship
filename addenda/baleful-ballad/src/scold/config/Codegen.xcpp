// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  namespace config {
    class Codegen;
  }
}
#endiv
#divert <hpp>
#import options.Boolean
#import scold.Regeneration
#import std.string
#import std.vector
class scold::config::Codegen {
protected:
  // descendants only
  inline Codegen();
  ~Codegen() = default;
public:
  //
  // Automatically insert an #import for the nearest enclosing (namespace.xcpp)
  // Default: do this, it is a convenience, but there must be a namespace.xcpp file for every namespace.
  //
  options::Boolean insert_namespace;
  //
  // Automatically insert an #import from a child namespace to a parent
  // Themed as: https://en.wikipedia.org/wiki/Matryoshka_doll
  // Default: do not do this, as each namespace is an independent space.
  //
  options::Boolean matryoshka_namespace_nesting;
  //
  // The -I direcotry (a "searchpath")
  //
  std::vector<std::string> MODULES;
  //
  // The -E roodir (a root directory of a submodule)
  //
  std::vector<std::string> SUBMODULES;
  //
  // The --make-depend-script
  //     default: $(bbDC) $(bbDC_FLAGS) $(SEARCHPATH) $<
  //     see configure.ac
  //
  std::string make_depend_script;
  //
  // To create or not to create the *.mk dependency line in Codegen.mk
  // As documented in scold.Regeneration
  // The new default is NOT create require the 2-step method
  //
  scold::Regeneration regeneration;
  inline static auto const DEFAULT_REGENERATION = scold::Regeneration::TWO_STEP;
};
#endiv
#divert <ipp>
#import autotools.autoconf.Config.scold.CONFIG
scold::config::Codegen::Codegen()
  : insert_namespace(true)
  , matryoshka_namespace_nesting(false)
  , MODULES()
  , SUBMODULES()
  , make_depend_script(autotools::autoconf::Config<CONFIG>::make_depend_script())
  , regeneration{DEFAULT_REGENERATION}
  { }
#endiv
