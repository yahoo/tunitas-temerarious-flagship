// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
//
// Part of the interface of scold::config::Generic
//
#import std.ostream
#import scold.config.Generic
#import nonstd.stream.null // [[FIXTHIS]] by naming convention, this should be nonstd.stream.Null
namespace scold::config {
  inline auto error(Generic const &) -> std::ostream &;
  inline auto warning(Generic const &) -> std::ostream &;
  inline auto notice(Generic const &) -> std::ostream &;
  inline auto verbose(Generic const &) -> std::ostream &;
  inline auto debug(Generic const &) -> std::ostream &;
  namespace detail {
    extern nonstd::stream::null devnull; // [[FIXTHIS]] by the Naming Convention, the typename should be nonstd::stream::Null 
  }
}
#endiv
#divert <ipp>
#import std.cerr
auto scold::config::error(Generic const &cfg) -> std::ostream & {
  return std::cerr << cfg.NAME << ": error, ";
}

auto scold::config::warning(Generic const &cfg) -> std::ostream & {
  if (cfg.quiet_mode) {
    return detail::devnull;
  } else {
    return std::cerr << cfg.NAME << ": warning, ";
  }
}

auto scold::config::notice(Generic const &cfg) -> std::ostream & {
  if (cfg.quiet_mode) {
    return detail::devnull;
  } else {
    return std::cerr << cfg.NAME << ": notice, ";
  }
}

auto scold::config::verbose(Generic const &cfg) -> std::ostream & {
  if (cfg.verbose_mode) {
    return std::cerr << cfg.NAME << ": verbose, ";
  } else {
    return detail::devnull;
  }
}

auto scold::config::debug(Generic const &cfg) -> std::ostream & {
  if (cfg.debug_mode) {
    return std::cerr << cfg.NAME << ": debug, ";
  } else {
    return detail::devnull;
  }
}
#endiv
#divert <cpp>
namespace scold::config {
  nonstd::stream::null detail::devnull;
}
#endiv
