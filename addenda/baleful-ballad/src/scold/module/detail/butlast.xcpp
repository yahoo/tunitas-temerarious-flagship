// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <hpp>
namespace scold {
  namespace module {
    namespace detail {
      template<typename ITERATOR> inline auto butlast(ITERATOR start, ITERATOR finish) -> ITERATOR;
    }
  }
}
#endiv
#divert <ipp>
#import std.random_access_iterator_tag
#import std.iterator_traits
#import std.is_same
template<typename ITERATOR> auto scold::module::detail::butlast(ITERATOR start, ITERATOR finish) -> ITERATOR {
  if (start == finish) {
    return start;
  } else {
    static_assert(std::is_same<std::random_access_iterator_tag, typename std::iterator_traits<ITERATOR>::iterator_category>::value, "not a random_access iterator");
    return finish-1;
  }
}
#endiv
