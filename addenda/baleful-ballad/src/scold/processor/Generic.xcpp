// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  namespace processor {
    //
    // The generic processor ... captures the configuration & context.
    //
    class Generic;
  }
}
#endiv
#divert <hpp>
#import scold.config.Context
#import scold.config.Generic
#import scold.processor.Prototype
class scold::processor::Generic : public Prototype {  
  using ancestor = Prototype;
protected:
  using configuration_type = config::Generic;
  using context_type = config::Context;
  inline explicit Generic(configuration_type const &, context_type &);
public:
  virtual ~Generic() = default;
  virtual auto operator()(phase_type, line_type &, output_type &, imports_type &, entails_type &, depends_type &) -> void = 0;
protected:
  configuration_type const &cfg;
  // non-const so that it can track error (warning) counts
  context_type &ctx;
};
#endiv
#divert <ipp>
scold::processor::Generic::Generic(configuration_type const &arg_cfg, context_type &arg_ctx)
  : ancestor()
  , cfg(arg_cfg)
  , ctx(arg_ctx) {
  ;
}
#endiv

