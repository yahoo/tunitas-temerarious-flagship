// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold.Suffix
namespace scold {
  namespace suffix {
    namespace detail {
      template<Suffix> struct Definition;
      template<> struct Definition<Suffix::FPP>;
      template<> struct Definition<Suffix::HPP>;
      template<> struct Definition<Suffix::IPP>;
      template<> struct Definition<Suffix::TPP>;
      template<> struct Definition<Suffix::CPP>;
      template<> struct Definition<Suffix::XCPP>;
      template<> struct Definition<Suffix::NS>;
      template<> struct Definition<Suffix::MK>;
      template<> struct Definition<Suffix::O>;
      template<> struct Definition<Suffix::LO>;
    }
  }
}
#endiv
#divert <hpp>
#import scold.Suffix
#import std.string
#import std.numeric_limits

template<scold::Suffix SUFFIX> struct scold::suffix::detail::Definition {
  static_assert(0 == (int)(SUFFIX) && 0 != (int)(SUFFIX), "specializations only");
};

#import scold.suffix.detail.MidrangeDefinition
template<> struct scold::suffix::detail::Definition<scold::Suffix::FPP> : public detail::MidrangeDefinition<Suffix::FPP> { };
template<> struct scold::suffix::detail::Definition<scold::Suffix::HPP> : public detail::MidrangeDefinition<Suffix::HPP> { };
template<> struct scold::suffix::detail::Definition<scold::Suffix::IPP> : public detail::MidrangeDefinition<Suffix::IPP> { };
template<> struct scold::suffix::detail::Definition<scold::Suffix::TPP> : public detail::MidrangeDefinition<Suffix::TPP> { };
template<> struct scold::suffix::detail::Definition<scold::Suffix::CPP> : public detail::MidrangeDefinition<Suffix::CPP> { };

template<> struct scold::suffix::detail::Definition<scold::Suffix::XCPP> {
  inline static constexpr auto value() -> Suffix { return Suffix::XCPP; } 
  inline static constexpr auto c_str() -> char const * { return "xcpp"; }
  inline static auto str() -> std::string { return std::string(c_str()); }
};

template<> struct scold::suffix::detail::Definition<scold::Suffix::NS> {
  inline static constexpr auto value() -> Suffix { return Suffix::NS; } 
  inline static constexpr auto c_str() -> char const * { return "xcpp"; }
  inline static auto str() -> std::string { return std::string(c_str()); }
};

template<> struct scold::suffix::detail::Definition<scold::Suffix::MK> {
  inline static constexpr auto value() -> Suffix { return Suffix::MK; } 
  inline static constexpr auto c_str() -> char const * { return "mk"; }
  inline static auto str() -> std::string { return std::string(c_str()); }
};

template<> struct scold::suffix::detail::Definition<scold::Suffix::O> {
  inline static constexpr auto value() -> Suffix { return Suffix::O; } 
  inline static constexpr auto c_str() -> char const * { return "o"; }
  inline static auto str() -> std::string { return std::string(c_str()); }
};

template<> struct scold::suffix::detail::Definition<scold::Suffix::LO> {
  inline static constexpr auto value() -> Suffix { return Suffix::LO; } 
  inline static constexpr auto c_str() -> char const * { return "lo"; }
  inline static auto str() -> std::string { return std::string(c_str()); }
};
#endiv
