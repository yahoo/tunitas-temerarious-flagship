// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#import scold
#import scold.Suffix
namespace scold {
  namespace suffix {
    struct Definition;
  }
}
#endiv
#divert <hpp>
#import std.string
#import scold.Suffix
#import scold.suffix.detail.Caller
#import scold.suffix.detail.Definition
#import mvr.SAV
struct scold::suffix::Definition {
  inline explicit Definition(Suffix);
  Suffix const value;
  inline auto c_str() const -> char const *;
  inline auto str() const -> std::string;
  // parse ... convert "to" a Suffix, returning the status of success
  inline static auto to(std::string const &specimen) -> mvr::SAV<Suffix>;
protected:
  using caller_type = detail::Caller<detail::Definition<Suffix::FPP>,
                                     detail::Definition<Suffix::HPP>,
                                     detail::Definition<Suffix::IPP>,
                                     detail::Definition<Suffix::TPP>,
                                     detail::Definition<Suffix::CPP>,
                                     detail::Definition<Suffix::XCPP>,
                                     detail::Definition<Suffix::NS>,
                                     detail::Definition<Suffix::MK>,
                                     detail::Definition<Suffix::O>,
                                     detail::Definition<Suffix::LO>>;
};
#endiv
#divert <ipp>
scold::suffix::Definition::Definition(Suffix arg_value)
  : value(arg_value) {
  ;
}

auto scold::suffix::Definition::c_str() const -> char const * {
  return caller_type::c_str(value);
}

auto scold::suffix::Definition::str() const -> std::string {
  return caller_type::str(value);
}

auto scold::suffix::Definition::to(std::string const &specimen) -> mvr::SAV<Suffix> {
  return caller_type::to(specimen);
}
#endiv
