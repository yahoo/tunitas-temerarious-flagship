// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <hpp>
#import scold.detail.plural.Noun
#import scold.detail.plural.Policies
#import std.string
namespace scold {
  //
  // The pluralization concept for the standard (English) cases.
  //
  // Templated on INTEGER so that it handles "all the many" integral types
  // With with Policy to allow overloading for other policies; e.g. "add 's'", "add 'es'" and so forth.
  //
  // Easy: "1 error", "2 errors"
  template<typename INTEGER> inline auto pluralize(INTEGER, std::string const &noun) -> detail::plural::Noun<INTEGER, detail::plural::AddS>;
}
#endiv
#divert <ipp>
template<typename INTEGER> inline auto scold::pluralize(INTEGER value, std::string const &noun) -> detail::plural::Noun<INTEGER, detail::plural::AddS> {
  using namespace detail::plural;
  using result_type = Noun<INTEGER, AddS>;
  return result_type(value, noun);
}
#endiv
