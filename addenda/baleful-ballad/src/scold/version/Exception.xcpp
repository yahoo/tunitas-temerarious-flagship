// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::version {
  //
  // The application (package) version as a throwable exception
  //
  // Usage:
  //
  //   auto NAME = Program{...somehow...};
  //   throw Version{NAME};
  //
  [[nodiscard]] class Exception;
}
#endiv
#divert <hpp>
#import options.Version
#import options.throwable.Version
#import options.version.String
class scold::version::Exception : public options::throwable::Version {
  using Ancestor = options::throwable::Version;
public:
  using Ancestor::Version;
  using String = options::version::String;
  auto version() const -> String final;
};
#endiv
#divert <cpp>
#import scold.version.String
#import std.is_same
auto scold::version::Exception::version() const -> String {
  static_assert( /* NOT NOT NOT */ !std::is_same_v<scold::version::Exception::String, scold::version::String>, "WATCHOUT subtle WATCHOUT");
  return static_cast<String const &>(scold::version::String{}); // WATCHOUT the return type is the scold::version::String::Ancestor
}
#endiv
