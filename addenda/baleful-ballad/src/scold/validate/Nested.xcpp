// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold {
  namespace validate {
    template<Name> class Nested; 
  }
}
#endiv
#divert <hpp>
#import scold.validate.detail.Nested
template<scold::validate::Name IDENTIFIER_NAME> class scold::validate::Nested : public detail::Nested {
  using ancestor = detail::Nested;
public:
  inline Nested();
  static constexpr Name const NAME = IDENTIFIER_NAME;
public:
  struct tests { struct Suite; };
  friend struct tests::Suite;
};

namespace scold {
  namespace validate {
    template<> inline Nested<MODULE>::Nested();
    template<> inline Nested<NAMESPACE>::Nested();
    template<> inline Nested<CLASS>::Nested();
  }
}
#endiv
#divert <ipp>
#import scold.splitting.On
#import scold.validate.Leaf

template<> scold::validate::Nested<scold::validate::MODULE>::Nested()
  : ancestor(splitting::On::DOT, "module", validate::Leaf<NAME>::factory()) {
  ;
}

template<> scold::validate::Nested<scold::validate::NAMESPACE>::Nested()
  : ancestor(splitting::On::COLONCOLON, "namespace", validate::Leaf<NAME>::factory()) {
  ;
}

template<> scold::validate::Nested<scold::validate::CLASS>::Nested()
  : ancestor(splitting::On::COLONCOLON, "class", validate::Leaf<NAME>::factory()) {
  ;
}
#endiv
