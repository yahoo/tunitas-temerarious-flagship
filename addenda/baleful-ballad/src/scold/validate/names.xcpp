// -*- c++ -*- in the SCOLD styling that is so popular these days
#divert <hpp>
#import std.string
#import scold.validate.Result
namespace scold {
  namespace validate {

    // Specimen: org.example.some.Class   | org.example.some.other
    // grammar ::= snake_case* CamelCase  | snake_case+
    inline auto module_path(std::string const &) -> Result;
    inline auto module_leaf(std::string const &) -> Result;

    // Specimen: org::example::some
    // grammar ::= snake_case+
    inline auto namespace_path(std::string const &) -> Result;
    inline auto namespace_leaf(std::string const &) -> Result;

    // Specimen: org::example::some::Class
    // grammar ::= snake_case* CamelCase
    inline auto class_path(std::string const &) -> Result;
    inline auto class_leaf(std::string const &) -> Result;

    auto is_xcpp(std::string const &) -> Result;
  }
}
#endiv
#divert <ipp>
#import scold.validate.Leaf
#import scold.validate.Nested
auto scold::validate::module_path(std::string const &subject) -> Result {
  Nested<MODULE> check;
  return check(subject);
}

auto scold::validate::module_leaf(std::string const &subject) -> Result {
  Leaf<MODULE> check;
  return check(subject);
}

auto scold::validate::namespace_path(std::string const &subject) -> Result {
  Nested<NAMESPACE> check;
  return check(subject);
}

auto scold::validate::namespace_leaf(std::string const &subject) -> Result {
  Leaf<NAMESPACE> check;
  return check(subject);
}

auto scold::validate::class_path(std::string const &subject) -> Result {
  Nested<CLASS> check;
  return check(subject);
}

auto scold::validate::class_leaf(std::string const &subject) -> Result {
  Leaf<CLASS> check;
  return check(subject);
}
#endiv
#divert <cpp>
#import std.ostringstream
auto scold::validate::is_xcpp(std::string const &subject) -> Result {
  std::string const suffix(".xcpp");
  std::string::size_type pos = subject.rfind(suffix);
  bool ok = std::string::npos != pos && subject.size() == pos+suffix.size();
  if (ok) {
    return Result::is_valid();
  } else {
    std::ostringstream err;
    err << "the filename '" << subject << " does not end in '" << suffix << "'";
    return Result::is_invalid(err.str());
  }
}
#endiv
