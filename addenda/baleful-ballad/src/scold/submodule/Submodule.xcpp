// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace scold::submodule {
  //
  // Capture the placement of the build parts of a submodule
  //
  // Policy:
  //
  //    There is an implicit policy that the three subdirectories will be defaulted as:
  //
  //      modulesdir = obj/modules                  override with --modulesdir=DIRECTORY
  //      objdir     = $root/obj/src                override with --objdir=DIRECTORY
  //      srcdir     = $root/src                    override with --srcdir=DIRECTORY
  //
  // Fields:
  //
  //   modulesdir     C++23 declaration and definition-bearing files for <fpp> <hpp> <ipp and <tpp>
  //   objdir         C++23 definition-bearing files for <cpp>; translation unit (cpp) sources and Makefile fragments (mk)
  //   srcdir         S.C.O.L.D. C++ 23 sources
  //
  // Details:
  //
  //   modules
  //
  //     (the erstwhile *.tpp layer) files will be generated into  $root/obj/modules; e.g. $root/obj/modules/package.subpackage.component.Class
  //     use $root/obj/modules because that is where synthetic
  //     NOT $root/modules because non-synthetic (permanent) code goes there (searchpath will always find it)
  //
  //   objdir
  //
  //     generated *.cpp files will likely go in $root/obj/src
  //
  //   srcdir
  //
  //     original SCOLD sources (*.xcpp) files will be found $root/src; e.g. in $root/src/package/subpackage/component/Class.xcpp
  //
  // Design:
  //
  //   There is a Functional and an Object-Oriented interface.  Why?  Why not?
  //
  // Usage:
  //
  //     see process.xcpp in remonstrate
  //
  class Submodule;
}
#endiv
#divert <hpp>
#import std.string
namespace scold {
  namespace submodule {
    // The functional interface
    inline auto modulesdir(Submodule const &) -> std::string const &;
    inline auto objdir(Submodule const &) -> std::string const &;
    inline auto srcdir(Submodule const &) -> std::string const &;
    using std::move;
  }
  struct submodule::Submodule {
    inline explicit Submodule(std::string const &root);
    inline explicit Submodule(std::string const &modulesdir, std::string const &objdir, std::string const &srcdir);
    inline explicit Submodule(std::string &&modulesdir, std::string &&objdir, std::string &&srcdir);
    // The object-oriented interface
    inline auto modulesdir() const -> std::string const &;
    inline auto objdir() const -> std::string const &;
    inline auto srcdir() const -> std::string const &;
  protected:
    // and hey .. .this is C++, so direct public access to the fields is passe... (sic)
    std::string the_modulesdir;
    std::string the_objdir;
    std::string the_srcdir;
  };
}
#endiv
#divert <ipp>
#import path.filename.workbench
namespace scold {
  auto submodule::modulesdir(Submodule const &sub) -> std::string const & { return sub.modulesdir(); } 
  auto submodule::objdir(Submodule const &sub) -> std::string const &     { return sub.objdir(); }
  auto submodule::srcdir(Submodule const &sub) -> std::string const &     { return sub.srcdir(); }
  submodule::Submodule::Submodule(std::string const &root)
    : the_modulesdir(finalize(path::filename::workbench() * root / "obj/modules"))
    , the_objdir(finalize(path::filename::workbench() * root / "obj/src"))
    , the_srcdir(finalize(path::filename::workbench() * root / "src"))
  { }
  submodule::Submodule::Submodule(std::string const &arg_modulesdir, std::string const &arg_objdir, std::string const &arg_srcdir)
    : the_modulesdir(arg_modulesdir)
    , the_objdir(arg_objdir)
    , the_srcdir(arg_srcdir)
  { }
  submodule::Submodule::Submodule(std::string &&arg_modulesdir, std::string &&arg_objdir, std::string &&arg_srcdir)
    : the_modulesdir(std::forward<std::string>(arg_modulesdir))
    , the_objdir(std::forward<std::string>(arg_objdir))
    , the_srcdir(std::forward<std::string>(arg_srcdir))
  { }
  auto submodule::Submodule::modulesdir() const -> std::string const & { return the_modulesdir; }
  auto submodule::Submodule::objdir() const -> std::string const &     { return the_objdir; }
  auto submodule::Submodule::srcdir() const -> std::string const &     { return the_srcdir; }
}
#endiv
