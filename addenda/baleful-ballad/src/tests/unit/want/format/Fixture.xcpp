// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace format {
        class Fixture;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::format::Fixture : public cppunit::test::Fixture {
public:
  auto test_braket() -> void;
  auto test_dot() -> void;
  auto test_q() -> void;
  auto test_qq() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.ostringstream
#import std.string

#import want.format.braket
auto tests::unit::want::format::Fixture::test_braket() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::want::format::braket;
  buf << braket(specimen);
  std::string const expected = "<hpp>";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT(expected == actual);
}

#import want.format.dot
auto tests::unit::want::format::Fixture::test_dot() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::want::format::dot;
  buf << dot(specimen);
  std::string const expected = ".hpp";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT(expected == actual);
}

#import want.format.q
auto tests::unit::want::format::Fixture::test_q() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::want::format::q;
  buf << q(specimen);
  std::string const expected = "'hpp'";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT(expected == actual);
}

#import want.format.qq
auto tests::unit::want::format::Fixture::test_qq() -> void {
  std::ostringstream buf;
  std::string specimen = "hpp";
  using ::want::format::qq;
  buf << qq(specimen);
  std::string const expected = "\"hpp\"";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT(expected == actual);
}

auto tests::unit::want::format::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("format");
  s << call("braket", &Fixture::test_braket)
    << call("dot", &Fixture::test_dot)
    << call("q", &Fixture::test_q)
    << call("qq", &Fixture::test_qq)
    ;
  return finalize(s);
}
#endiv
