// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace series {
        class Fixture;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::series::Fixture : public cppunit::test::Fixture {
public:
  auto test_function() -> void;
  auto test_for_loop() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import want.series
auto tests::unit::want::series::Fixture::test_function() -> void {
  auto is = ::want::series(1, 2, 3, 4, 5);
  CPPUNIT_ASSERT(!is.empty());
  CPPUNIT_ASSERT_EQUAL(5lu, is.size());
}

auto tests::unit::want::series::Fixture::test_for_loop() -> void {
  enum Alphabet { A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z };
  auto s = ::want::series(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z);
  CPPUNIT_ASSERT(!s.empty());
  CPPUNIT_ASSERT_EQUAL(26lu, s.size());
  int ith = 0;
  for (auto alpha : s) {
    CPPUNIT_ASSERT_EQUAL(ith, (int)(alpha));
    ith++;
  }
  CPPUNIT_ASSERT_EQUAL(26, ith);
}

#import tests.unit.want.series.Object
auto tests::unit::want::series::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("series");
  s << call("function", &Fixture::test_function)
    << call("for_loop", &Fixture::test_for_loop)
    << add<Object>()
    ;
  return finalize(s);
}
#endiv
