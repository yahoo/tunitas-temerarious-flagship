// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::Fixture : public cppunit::test::Fixture {
public:
  auto test_join() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.vector
#import want.join
auto tests::unit::want::Fixture::test_join() -> void {
  std::vector<std::string> specimen{"apple", "banana", "cherry"};
  {
    std::string actual = ::want::join('/', specimen);
    std::string expected = "apple/banana/cherry";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string actual = ::want::join("/", specimen);
    std::string expected = "apple/banana/cherry";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string actual = ::want::join(std::string("/"), specimen);
    std::string expected = "apple/banana/cherry";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string actual = ::want::join(9, specimen);
    std::string expected = "apple9banana9cherry";
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import tests.unit.want.doppel.Fixture
#import tests.unit.want.format.Fixture
#import tests.unit.want.mvr.Fixture
#import tests.unit.want.path.Fixture
#import tests.unit.want.series.Fixture
#import tests.unit.want.regex.Fixture
#import tests.unit.want.tuple.Fixture
#import tests.unit.want.tuppel.Fixture
auto tests::unit::want::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("want");
  s << call("join", &Fixture::test_join)
    << add<doppel::Fixture>()
    << add<format::Fixture>()
    << add<mvr::Fixture>()
    << add<path::Fixture>()
    << add<regex::Fixture>()
    << add<series::Fixture>()
    << add<tuple::Fixture>()
    << add<tuppel::Fixture>()
    ;
  return finalize(s);
}
#endiv
