// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace path {
        class Dedot;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::path::Dedot : public cppunit::test::Fixture {
public:
  auto test_copy() -> void;
  auto test_move() -> void;
  auto test_finalize() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import want.path.dedot
using ::want::path::dedot;

auto tests::unit::want::path::Dedot::test_copy() -> void {
  {
    std::string const specimen("");
    std::string const actual(dedot(specimen));
    std::string const expected(".");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".");
    std::string const actual(dedot(specimen));
    std::string const expected(".");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./");
    std::string const actual(dedot(specimen));
    std::string const expected(".");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./a");
    std::string const actual(dedot(specimen));
    std::string const expected("a");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./a/b");
    std::string const actual(dedot(specimen));
    std::string const expected("a/b");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//a/b");
    std::string const actual(dedot(specimen));
    std::string const expected("a/b");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//./a/b");
    std::string const actual(dedot(specimen));
    std::string const expected("a/b");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//././././././././././././a/b");
    std::string const actual(dedot(specimen));
    std::string const expected("a/b");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

auto tests::unit::want::path::Dedot::test_move() -> void {
  using ss = std::string;
  CPPUNIT_ASSERT_EQUAL(ss("."), dedot(ss("")));
  CPPUNIT_ASSERT_EQUAL(ss("."), dedot(ss(".")));
  CPPUNIT_ASSERT_EQUAL(ss(".."), dedot(ss("..")));
  CPPUNIT_ASSERT_EQUAL(ss("."), dedot(ss("./")));
  CPPUNIT_ASSERT_EQUAL(ss("a"), dedot(ss("a")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss("ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss("./ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss("././ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss("./././ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss(".//ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss(".////////////ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(ss(".//.//.//ab")));
}

#import path.filename.workbench
auto tests::unit::want::path::Dedot::test_finalize() -> void {
  using ::path::filename::workbench;
  using ss = std::string;
  CPPUNIT_ASSERT_EQUAL(ss("."), dedot(workbench() * ss("")));
  CPPUNIT_ASSERT_EQUAL(ss("."), dedot(workbench() * ss(".")));
  CPPUNIT_ASSERT_EQUAL(ss(".."), dedot(workbench() * ss("..")));
  CPPUNIT_ASSERT_EQUAL(ss("."), dedot(workbench() * ss("./")));
  CPPUNIT_ASSERT_EQUAL(ss("a"), dedot(workbench() * ss("./a")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss("ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss("./ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss("././ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss("./././ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss(".//ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss(".////////////ab")));
  CPPUNIT_ASSERT_EQUAL(ss("ab"), dedot(workbench() * ss(".//.//.//ab")));

  // The leading ../ protects the algo from operating within the string
  { ss const specimen("../ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
  { ss const specimen(".././ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
  { ss const specimen("../././ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
  { ss const specimen(".././././ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
  { ss const specimen(".././/ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
  { ss const specimen(".././///////////ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
  { ss const specimen(".././/.//.//ab");
    ss const expected(specimen);
    ss const actual(dedot(workbench() * specimen));
    CPPUNIT_ASSERT_EQUAL(expected, actual); }
}

auto tests::unit::want::path::Dedot::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("dedot");
  s << call("copy", &Dedot::test_copy)
    << call("move", &Dedot::test_move)
    << call("finalize", &Dedot::test_finalize)
    ;
  return finalize(s);
}
#endiv
