// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace path {
        class Endot;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::path::Endot : public cppunit::test::Fixture {
public:
  auto test_copy() -> void;
  auto test_move() -> void;
  auto test_finalize() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import want.path.endot
using ::want::path::endot;

auto tests::unit::want::path::Endot::test_copy() -> void {
  {
    std::string const specimen("");
    std::string const actual(endot(specimen));
    std::string const expected(".");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./a");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./a/b");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//a/b");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//./a/b");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//././././././././././././a/b");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("../a");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("../");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/..");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/a");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/./a");
    std::string const actual(endot(specimen));
    std::string const expected(specimen);
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import std.move
auto tests::unit::want::path::Endot::test_move() -> void {
  {
    std::string const specimen("");
    std::string const expected(".");
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("..");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("a");
    std::string const expected("./a");
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("ab");
    std::string const expected("./ab");
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./ab");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("././ab");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./././ab");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//ab");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".////////////ab");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//.//.//ab");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/.");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("/..");
    std::string const expected(specimen);
    std::string const actual(endot(std::string(specimen)));
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

#import path.filename.workbench
auto tests::unit::want::path::Endot::test_finalize() -> void {
  using ::path::filename::workbench;
  {
      std::string const specimen("");
      std::string const actual(endot(workbench() * specimen));
      std::string const expected(".");
      CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected(".");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("..");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("..");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("./");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("a");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("./a");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("./ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("./ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("././ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("././ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen("./././ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected("./././ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected(".//ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".////////////ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected(".////////////ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  } {
    std::string const specimen(".//.//.//ab");
    std::string const actual(endot(workbench() * specimen));
    std::string const expected(".//.//.//ab");
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}

auto tests::unit::want::path::Endot::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("endot");
  s << call("copy", &Endot::test_copy)
    << call("move", &Endot::test_move)
    << call("finalize", &Endot::test_finalize)
    ;
  return finalize(s);
}
#endiv
