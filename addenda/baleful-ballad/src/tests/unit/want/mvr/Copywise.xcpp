// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace mvr {
        class Copywise;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::mvr::Copywise {
public:
  Copywise();
  Copywise(Copywise const &);
  auto operator=(Copywise const &) -> Copywise &;
  Copywise(Copywise &&);
  auto operator=(Copywise &&) -> Copywise &;
  ~Copywise();
  static unsigned serial;
};
#endiv
#divert <cpp>
unsigned tests::unit::want::mvr::Copywise::serial = 0;

#import std.cout
tests::unit::want::mvr::Copywise::Copywise() {
  std::cout << "serial " << serial++ << " in " << __FUNCTION__ << " (constructor)\n";
}

tests::unit::want::mvr::Copywise::Copywise(Copywise const &other) {
  std::cout << "serial " << serial++ << " in " << __FUNCTION__ << " (copy constructor)\n";
}

auto tests::unit::want::mvr::Copywise::operator=(Copywise const &other) -> Copywise & {
  std::cout << "serial " << serial++ << " in " << __FUNCTION__ << " (copy assignment)\n";
  return *this;
}

tests::unit::want::mvr::Copywise::Copywise(Copywise &&other) {
  std::cout << "serial " << serial++ << " in " << __FUNCTION__ << " (move constructor)\n";
}

auto tests::unit::want::mvr::Copywise::operator=(Copywise &&other) -> Copywise & {
  std::cout << "serial " << serial++ << " in " << __FUNCTION__ << " (move assignment)\n";
  return *this;
}

tests::unit::want::mvr::Copywise::~Copywise() {
  std::cout << "serial " << serial++ << " in " << __FUNCTION__ << " (destructor)\n";
}
#endiv
