// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace mvr {
        template<typename VALUE> class SAV;
      }
    }
  }
}
#endiv
#divert <hpp>
#import want.mvr.SAV
#import want.mvr.State
template<typename VALUE> class tests::unit::want::mvr::SAV : public cppunit::test::Fixture {
public:
  using value_type = VALUE;
  using sav_value_type = ::want::mvr::SAV<VALUE>;
  using state_type = ::want::mvr::State;

  auto test_DefaultConstructor() -> void;
  auto test_ValueConstructor() -> void;
  auto test_OperatorBool() -> void;
  auto test_OperatortNOT() -> void;
  auto test_OperatortTuple() -> void;
  auto test_AccessorValue() -> void;
  auto test_AccessorValueConst() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import want.mvr.SAV

template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_DefaultConstructor() -> void {
  // Whee! it constructs
  sav_value_type s;
  CPPUNIT_ASSERT(false == (bool) s);
  CPPUNIT_ASSERT(true == ! s);
}

template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_ValueConstructor() -> void {
  // Whee! it constructs
  value_type v = value_type();
  state_type t = ::want::mvr::state(true);
  sav_value_type s(t, v);
  CPPUNIT_ASSERT(true == (bool) s);
  CPPUNIT_ASSERT(false == ! s);
}

template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_OperatorBool() -> void {
  {
    sav_value_type s;
    CPPUNIT_ASSERT(false == (bool) s);
  } {
    state_type t = ::want::mvr::state(true);
    CPPUNIT_ASSERT(state_type::VALUE == t);
    sav_value_type s(t, value_type());
    CPPUNIT_ASSERT(t == (state_type) s);
    CPPUNIT_ASSERT(true == (bool) s);
  }
}

template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_OperatortNOT() -> void {
  {
    sav_value_type s;
    CPPUNIT_ASSERT(true == ! s);
  } {
    state_type t = ::want::mvr::state(true);
    sav_value_type s(t, value_type());
    CPPUNIT_ASSERT(false == ! s);
  }
}

#import want.mvr.recv
template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_OperatortTuple() -> void {
  bool status;
  typename sav_value_type::value_type value;
  sav_value_type s;
  // Does this work?  It must.
  ::want::mvr::recv(status, value) = std::tuple<bool, typename sav_value_type::value_type>(); // <--- test this
  CPPUNIT_ASSERT(false == status);
}

template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_AccessorValue() -> void {
  value_type t;
  sav_value_type s(::want::mvr::State::VALUE, t);
  value_type &u = s.value();
  u = value_type(); // "use" the variable.
}

template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::test_AccessorValueConst() -> void {
  value_type t;
  sav_value_type const s(::want::mvr::State::VALUE, t);
  value_type const &u = s.value();
  t = u; // "use" the variable
}

#import std.type_info
template<typename VALUE> auto tests::unit::want::mvr::SAV<VALUE>::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s(typeid(VALUE).name());
  s << call("DefaultConstructor", &SAV<VALUE>::test_DefaultConstructor)
    << call("ValueConstructor", &SAV<VALUE>::test_ValueConstructor)
    << call("OperatorBool", &SAV<VALUE>::test_OperatorBool)
    << call("OperatortNOT", &SAV<VALUE>::test_OperatortNOT)
    << call("OperatortTuple", &SAV<VALUE>::test_OperatortTuple)
    << call("AccessorValue", &SAV<VALUE>::test_AccessorValue)
    << call("AccessorValueConst", &SAV<VALUE>::test_AccessorValueConst)
    ;
  return finalize(s);
}
#endiv
