// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace want {
      namespace doppel {
        class Combine;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::want::doppel::Combine : public cppunit::test::Fixture {
public:
  auto test_something() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.is_same
#import std.input_iterator_tag
#import std.output_iterator_tag
#import want.doppel.traits.Combine
auto tests::unit::want::doppel::Combine::test_something() -> void {
  using ::want::doppel::traits::Combine;
  bool b = std::is_same<std::output_iterator_tag, Combine<std::output_iterator_tag, std::input_iterator_tag>::type>::value;
  CPPUNIT_ASSERT(b);
}

auto tests::unit::want::doppel::Combine::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Combine");
  s << call("something", &Combine::test_something)
    ;
  return finalize(s);
}
#endiv
