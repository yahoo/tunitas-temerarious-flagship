// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace search {
      class Build;
    }
  }
}
#endiv
#divert <hpp>
#import scold.search.Build
#import scold.Submodule
#import scold.Module
struct tests::unit::search::Build : public cppunit::test::Fixture {
  using Submodule = ::scold::Submodule;
  using Module = ::scold::Module;
  using Subject = ::scold::search::Build;
  auto test_constructor_submodule_move() -> void;
  auto test_constructor_string_copy() -> void;
  auto test_constructor_string_move() -> void;
  auto test_operator_call_string() -> void;
  auto test_operator_call_Module() -> void;
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.string
#import std.vector
#import std.move

auto tests::unit::search::Build::test_constructor_submodule_move() -> void {
  auto dot = Submodule{"."};
  auto vsm = std::vector<Submodule>{ Submodule{"external/module-c-string"} };
  auto vs = std::vector<std::string>{ "/build/scold" };
  auto search = Subject{move(dot), move(vsm), move(vs)};
  auto specimen = Module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(specimen);
  CPPUNIT_ASSERT(ok(searched));
}

auto tests::unit::search::Build::test_constructor_string_copy() -> void {
  using s = std::string;
  std::string const dot(".");
  std::vector<std::string> vsm{ s("external/module-c-string") };
  std::vector<std::string> vs{ s("/build/scold") };
  ::scold::search::Build search(dot, vsm, vs);
  ::scold::Module some_module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(some_module);
  CPPUNIT_ASSERT(ok(searched));
}

#import std.move
auto tests::unit::search::Build::test_constructor_string_move() -> void {
  using s = std::string;
  std::string const dot(".");
  std::vector<std::string> vsm{ s("external/module-c-string") };
  std::vector<std::string> vs{ s("/build/scold") };
  ::scold::search::Build search(std::move(dot), std::move(vsm), std::move(vs));
  ::scold::Module some_module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(some_module);
  CPPUNIT_ASSERT(ok(searched));
}

auto tests::unit::search::Build::test_operator_call_string() -> void {
  using s = std::string;
  std::string const dot(".");
  std::vector<std::string> vsm{ s("external/module-c-string") };
  std::vector<std::string> vs{ s("/build/scold"), s("/usr/include") };
  ::scold::search::Build search(dot, vsm, vs);
  std::string some_basename = "sys/types.h";
  auto searched = search(some_basename);
  CPPUNIT_ASSERT(ok(searched));
}

auto tests::unit::search::Build::test_operator_call_Module() -> void {
  // The previous tests used operator()(...)
  CPPUNIT_ASSERT(true);
}

auto tests::unit::search::Build::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Build");
  s << call("constructor-submodule-move", &Build::test_constructor_submodule_move)
    << call("constructor-string-copy", &Build::test_constructor_string_copy)
    << call("constructor-string-move", &Build::test_constructor_string_move)
    << call("operator()-string", &Build::test_operator_call_string)
    << call("operator()-Module", &Build::test_operator_call_Module)
    ;
  return finalize(s);
}
#endiv
