// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace search {
      class Herein;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::search::Herein : public cppunit::test::Fixture {
public:
  auto test_constructor_submodule_copy() -> void;
  auto test_constructor_submodule_move() -> void;
  auto test_constructor_string_copy() -> void;
  auto test_constructor_string_move() -> void;
  auto test_operator_call_Module() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.search.Herein
#import scold.Submodule
#import scold.Module
#import std.string

auto tests::unit::search::Herein::test_constructor_submodule_copy() -> void {
  ::scold::Submodule const dot(".");
  ::scold::search::Herein search(dot);
  ::scold::Module some_module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(some_module);
  CPPUNIT_ASSERT(ok(searched));
}

#import std.move
auto tests::unit::search::Herein::test_constructor_submodule_move() -> void {
  ::scold::Submodule dot(".");
  ::scold::search::Herein search(std::move(dot));
  ::scold::Module some_module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(some_module);
  CPPUNIT_ASSERT(ok(searched));
}

auto tests::unit::search::Herein::test_constructor_string_copy() -> void {
  std::string const dot(".");
  ::scold::search::Herein search(dot);
  ::scold::Module some_module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(some_module);
  CPPUNIT_ASSERT(ok(searched));
}

#import std.move
auto tests::unit::search::Herein::test_constructor_string_move() -> void {
  std::string dot(".");
  ::scold::search::Herein search(std::move(dot));
  ::scold::Module some_module{"tests", "unit", "search", "Fixture"};// <--- this is this!
  auto searched = search(some_module);
  CPPUNIT_ASSERT(ok(searched));
}

auto tests::unit::search::Herein::test_operator_call_Module() -> void {
  // The previous tests used operator()(...)
  CPPUNIT_ASSERT(true);
}

auto tests::unit::search::Herein::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Herein");
  s << call("constructor-submodule-copy", &Herein::test_constructor_submodule_copy)
    << call("constructor-submodule-move", &Herein::test_constructor_submodule_move)
    << call("constructor-string-copy", &Herein::test_constructor_string_copy)
    << call("constructor-string-move", &Herein::test_constructor_string_move)
    << call("operator()-Module", &Herein::test_operator_call_Module)
    ;
  return finalize(s);
}
#endiv
