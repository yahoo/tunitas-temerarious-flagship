// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace search {
      namespace cache {
        class Fixture;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::search::cache::Fixture : public cppunit::test::Fixture {
public:
  auto test_Type_usage() -> void;
  auto test_Entry_usage() -> void;
  auto test_Unit_usage() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.search.cache.Type
#import scold.search.cache.Entry
#import scold.search.cache.Unit

auto tests::unit::search::cache::Fixture::test_Type_usage() -> void {
  ::scold::search::cache::Type t = ::scold::search::cache::Type();
  CPPUNIT_ASSERT(t == type(t));
}

auto tests::unit::search::cache::Fixture::test_Entry_usage() -> void {
  ::scold::search::cache::Entry e;
  CPPUNIT_ASSERT(::scold::search::cache::Type::INCLUDE == e.type);
}

#import tests.unit.search.cache.Unit_Finalized
auto tests::unit::search::cache::Fixture::test_Unit_usage() -> void {
  Unit_Finalized u;
  // nothing to test...
  CPPUNIT_ASSERT(true);
}

#import tests.unit.search.cache.Type
#import tests.unit.search.cache.Entry
#import tests.unit.search.cache.Unit
auto tests::unit::search::cache::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("cache");
  s << call("Type-usage", &Fixture::test_Type_usage)
    << call("Entry-usage", &Fixture::test_Entry_usage)
    << call("Unit-usage", &Fixture::test_Unit_usage)
    << add<Type>()
    << add<Entry>()
    << add<Unit>()
    ;
  return finalize(s);
}
#endiv
