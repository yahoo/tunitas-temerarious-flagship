// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace search {
      namespace cache {
        class Type;
      }
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::search::cache::Type : public cppunit::test::Fixture {
public:
  auto test_constructor() -> void;
  auto test_type() -> void;
  auto test_buildable_from_sources() -> void;
  auto test_include_interfaces_only() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.search.cache.Type

auto tests::unit::search::cache::Type::test_constructor() -> void {
  using ::scold::search::cache::Type;
  {
    Type t = Type();
    CPPUNIT_ASSERT(t == type(t));
  } {
    Type t = Type::INCLUDE;
    CPPUNIT_ASSERT(t == type(t));
  } {
    Type t = Type::HEREIN;
    CPPUNIT_ASSERT(t == type(t));
  } {
    Type t = Type::SUBMODULE;
    CPPUNIT_ASSERT(t == type(t));
  }
}

auto tests::unit::search::cache::Type::test_type() -> void {
  using ::scold::search::cache::Type;
  Type t = Type::SUBMODULE;
  CPPUNIT_ASSERT(t == type(t));
}

auto tests::unit::search::cache::Type::test_buildable_from_sources() -> void {
  using ::scold::search::cache::Type;
  CPPUNIT_ASSERT( ! buildable_from_sources(Type::INCLUDE) );
  CPPUNIT_ASSERT(   buildable_from_sources(Type::HEREIN) );
  CPPUNIT_ASSERT(   buildable_from_sources(Type::SUBMODULE) );
}

auto tests::unit::search::cache::Type::test_include_interfaces_only() -> void {
  using ::scold::search::cache::Type;
  CPPUNIT_ASSERT(   include_interfaces_only(Type::INCLUDE) );
  CPPUNIT_ASSERT( !  include_interfaces_only(Type::HEREIN) );
  CPPUNIT_ASSERT( !  include_interfaces_only(Type::SUBMODULE) );
}

auto tests::unit::search::cache::Type::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Type");
  s << call("constructor", &Type::test_constructor)
    << call("type", &Type::test_type)
    << call("buildable_from_sources", &Type::test_buildable_from_sources)
    << call("include_interfaces_only", &Type::test_include_interfaces_only)
    ;
  return finalize(s);
}
#endiv
