// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
#forward tests.unit.Cleanup
namespace tests {
  namespace unit {
    enum RMDIR { };
    template<> class Cleanup<RMDIR>;
  }
}
#divert </fpp>
#divert <hpp>
#import tests.unit.Cleanable
template<> class tests::unit::Cleanup<tests::unit::RMDIR> : public Cleanable {
  using ancestor = Cleanable;
public:
  using ancestor::Cleanable; // standardized constructor
  inline ~Cleanup();         // destructor unlinks (under all conditions)
};
#endiv
#divert <ipp>
#import sys.posix.rmdir
tests::unit::Cleanup<tests::unit::RMDIR>::~Cleanup() {
  // Try really hard to rmdir ... but if it doesn't work then we can't do anything.
  // This is a destructor so we musn't throw another exception.  Suppress.  Move on.
  sys::posix::rmdir(ancestor::pathname);
}
#endiv
