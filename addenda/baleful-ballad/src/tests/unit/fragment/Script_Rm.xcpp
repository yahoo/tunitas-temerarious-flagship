// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace fragment {
      class Script_Rm;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::fragment::Script_Rm : public cppunit::test::Fixture {
public:
  auto test_script_rm() -> void;
  auto test_script_rm_string() -> void;
  auto test_script_rm_string_string() -> void;
  auto test_script_rm_string_string_string() -> void;
  auto test_script_rm_string_string_string_string() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.fragment.workbench
#import scold.fragment.make.script_rm
#import scold.line.Item
#import std.move
#import std.string

auto tests::unit::fragment::Script_Rm::test_script_rm() -> void {
  std::string qualifier = "$(lhs_objdir)"; 
  auto actual = ::scold::fragment::make::script_rm(qualifier);
  decltype(actual) expected = ::scold::line::Item("\trm -f");
  CPPUNIT_ASSERT_EQUAL(value(expected), value(actual));
}

auto tests::unit::fragment::Script_Rm::test_script_rm_string() -> void {
  std::string qualifier = "$(lhs_objdir)";
  std::string filename1 = "filename1"; 
  auto actual = ::scold::fragment::make::script_rm(qualifier, filename1);
  decltype(actual) expected = ::scold::line::Item("\trm -f $(lhs_objdir)/filename1");
  CPPUNIT_ASSERT_EQUAL(value(expected), value(actual));
}

auto tests::unit::fragment::Script_Rm::test_script_rm_string_string() -> void {
  std::string qualifier = "$(lhs_objdir)";
  std::string filename1 = "filename1";
  std::string filename2 = "filename2"; 
  auto actual = ::scold::fragment::make::script_rm(qualifier, filename1, filename2);
  decltype(actual) expected = ::scold::line::Item("\trm -f $(lhs_objdir)/filename1 $(lhs_objdir)/filename2");
  CPPUNIT_ASSERT_EQUAL(value(expected), value(actual));
}

auto tests::unit::fragment::Script_Rm::test_script_rm_string_string_string() -> void {
  std::string qualifier = "$(lhs_objdir)";
  std::string filename1 = "filename1";
  std::string filename2 = "filename2";
  std::string filename3 = "filename3";
  auto actual = ::scold::fragment::make::script_rm(qualifier, filename1, filename2, filename3);
  decltype(actual) expected = ::scold::line::Item("\trm -f $(lhs_objdir)/filename1 $(lhs_objdir)/filename2 $(lhs_objdir)/filename3");
  CPPUNIT_ASSERT_EQUAL(value(expected), value(actual));
}

auto tests::unit::fragment::Script_Rm::test_script_rm_string_string_string_string() -> void {
  std::string qualifier = "$(lhs_objdir)";
  std::string filename1 = "filename1";
  std::string filename2 = "filename2";
  std::string filename3 = "filename3";
  std::string filename4 = "filename4"; 
  auto actual = ::scold::fragment::make::script_rm(qualifier, filename1, filename2, filename3, filename4);
  decltype(actual) expected = ::scold::line::Item("\trm -f $(lhs_objdir)/filename1 $(lhs_objdir)/filename2 $(lhs_objdir)/filename3 $(lhs_objdir)/filename4");
  CPPUNIT_ASSERT_EQUAL(value(expected), value(actual));
}

auto tests::unit::fragment::Script_Rm::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("script_rm");
  s << call("none", &Script_Rm::test_script_rm)
    << call("string", &Script_Rm::test_script_rm_string)
    << call("string-string", &Script_Rm::test_script_rm_string_string)
    << call("string-string-string", &Script_Rm::test_script_rm_string_string_string)
    << call("string-string-string-string", &Script_Rm::test_script_rm_string_string_string_string) 
    ;
  return finalize(s);
}
#endiv
