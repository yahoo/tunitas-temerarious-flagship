// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace to {
      class string;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::to::string : public cppunit::test::Fixture {
public:
  auto test_1arg_Module() -> void;
  auto test_1arg_Phase() -> void;
  auto test_1arg_Suffix() -> void;
  auto test_2arg() -> void;
  auto test_3arg() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Module
#import scold.Phase
#import scold.Suffix
#import std.string
#import scold.to

auto tests::unit::to::string::test_1arg_Module() -> void {
  ::scold::Module const module{"apple", "banana", "cherry", "Class"};
  CPPUNIT_ASSERT("apple.banana.cherry.Class" == ::scold::to<std::string>(module));
}


auto tests::unit::to::string::test_1arg_Phase() -> void {
  CPPUNIT_ASSERT("fpp" == ::scold::to<std::string>(::scold::Phase::FPP));
  CPPUNIT_ASSERT("hpp" == ::scold::to<std::string>(::scold::Phase::HPP));
  CPPUNIT_ASSERT("ipp" == ::scold::to<std::string>(::scold::Phase::IPP));
  CPPUNIT_ASSERT("tpp" == ::scold::to<std::string>(::scold::Phase::TPP));
  CPPUNIT_ASSERT("cpp" == ::scold::to<std::string>(::scold::Phase::CPP));
}

auto tests::unit::to::string::test_1arg_Suffix() -> void {
  CPPUNIT_ASSERT("fpp" == ::scold::to<std::string>(::scold::Suffix::FPP));
  CPPUNIT_ASSERT("hpp" == ::scold::to<std::string>(::scold::Suffix::HPP));
  CPPUNIT_ASSERT("ipp" == ::scold::to<std::string>(::scold::Suffix::IPP));
  CPPUNIT_ASSERT("tpp" == ::scold::to<std::string>(::scold::Suffix::TPP));
  CPPUNIT_ASSERT("cpp" == ::scold::to<std::string>(::scold::Suffix::CPP));
}

auto tests::unit::to::string::test_2arg() -> void {
  // There are none
  CPPUNIT_ASSERT(true);
}

auto tests::unit::to::string::test_3arg() -> void {
  // There are none
  CPPUNIT_ASSERT(true);
}

auto tests::unit::to::string::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("to<string>");
  s << call("1-arg_Module", &string::test_1arg_Module)
    << call("1-arg_Phase", &string::test_1arg_Phase)
    << call("1-arg_Suffix", &string::test_1arg_Suffix)
    << call("2-arg", &string::test_2arg)
    << call("3-arg", &string::test_3arg)
    ;
  return finalize(s);
}
#endiv
