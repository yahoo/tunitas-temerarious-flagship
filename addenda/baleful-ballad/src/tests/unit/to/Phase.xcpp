// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace to {
      class Phase;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::to::Phase : public cppunit::test::Fixture {
public:
  auto test_1arg() -> void;
  auto test_2arg() -> void;
  auto test_3arg() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Phase
#import scold.to

auto tests::unit::to::Phase::test_1arg() -> void {
  CPPUNIT_ASSERT(::scold::Phase::FPP == scold::to<::scold::Phase>("fpp"));
  CPPUNIT_ASSERT(::scold::Phase::HPP == scold::to<::scold::Phase>("hpp"));
  CPPUNIT_ASSERT(::scold::Phase::IPP == scold::to<::scold::Phase>("ipp"));
  CPPUNIT_ASSERT(::scold::Phase::TPP == scold::to<::scold::Phase>("tpp"));
  CPPUNIT_ASSERT(::scold::Phase::CPP == scold::to<::scold::Phase>("cpp"));
}

auto tests::unit::to::Phase::test_2arg() -> void {
  // There are none
  CPPUNIT_ASSERT(true);
}

auto tests::unit::to::Phase::test_3arg() -> void {
  // There are none
  CPPUNIT_ASSERT(true);
}

auto tests::unit::to::Phase::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("to<Phase>");
  s << call("1-arg", &Phase::test_1arg)
    << call("2-arg", &Phase::test_2arg)
    << call("3-arg", &Phase::test_3arg)
    ;
  return finalize(s);
}
#endiv
