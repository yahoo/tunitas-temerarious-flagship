// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace to {
      class Suffix;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::to::Suffix : public cppunit::test::Fixture {
public:
  auto test_1arg() -> void;
  auto test_2arg() -> void;
  auto test_3arg() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Suffix
#import scold.to

auto tests::unit::to::Suffix::test_1arg() -> void {
  CPPUNIT_ASSERT(::scold::Suffix::FPP == scold::to<::scold::Suffix>("fpp"));
  CPPUNIT_ASSERT(::scold::Suffix::HPP == scold::to<::scold::Suffix>("hpp"));
  CPPUNIT_ASSERT(::scold::Suffix::IPP == scold::to<::scold::Suffix>("ipp"));
  CPPUNIT_ASSERT(::scold::Suffix::TPP == scold::to<::scold::Suffix>("tpp"));
  CPPUNIT_ASSERT(::scold::Suffix::CPP == scold::to<::scold::Suffix>("cpp"));
  CPPUNIT_ASSERT(::scold::Suffix::XCPP == scold::to<::scold::Suffix>("xcpp"));
}

auto tests::unit::to::Suffix::test_2arg() -> void {
  // there are none
  CPPUNIT_ASSERT(true);
}

auto tests::unit::to::Suffix::test_3arg() -> void {
  // there are none
  CPPUNIT_ASSERT(true);
}

auto tests::unit::to::Suffix::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("to<Suffix>");
  s << call("1-arg", &Suffix::test_1arg)
    << call("2-arg", &Suffix::test_2arg)
    << call("3-arg", &Suffix::test_3arg)
    ;
  return finalize(s);
}
#endiv
