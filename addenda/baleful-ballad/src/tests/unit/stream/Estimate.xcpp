// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace stream {
      class Estimate;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::stream::Estimate : public cppunit::test::Fixture {
public:
  auto test_constructor() -> void;
  auto test_prev() -> void;
  auto test_ground() -> void;
  auto test_diversion() -> void;
  auto test_drop() -> void;
  auto test_keep() -> void;
  auto test_ok() -> void;
  auto test_has_error() -> void;
  auto test_error_message() -> void;
  auto test_has_warning() -> void;
  auto test_warning_message() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Phase
#import scold.Ground
#import std.string
#import scold.stream.Estimate

auto tests::unit::stream::Estimate::test_constructor() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  std::string emsg, wmsg;
  ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
  // sure.
  CPPUNIT_ASSERT(true);
}

auto tests::unit::stream::Estimate::test_prev() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  std::string emsg, wmsg;
  ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
  CPPUNIT_ASSERT(Phase::FPP == prev(e));
}

auto tests::unit::stream::Estimate::test_ground() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  std::string emsg, wmsg;
  ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
  CPPUNIT_ASSERT(Ground::FORE == ground(e));
}

auto tests::unit::stream::Estimate::test_diversion() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  std::string emsg, wmsg;
  ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
  CPPUNIT_ASSERT(Phase::HPP == diversion(e));
}

auto tests::unit::stream::Estimate::test_drop() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  std::string emsg, wmsg;
  ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
  CPPUNIT_ASSERT(drop(e));
}

auto tests::unit::stream::Estimate::test_keep() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  std::string emsg, wmsg;
  ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
  CPPUNIT_ASSERT(!keep(e));
}

auto tests::unit::stream::Estimate::test_ok() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  {
    std::string emsg, wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(ok(e));
  } {
    std::string emsg, wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(ok(e));
  } {
    std::string emsg("bad"), wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!ok(e));
  } {
    std::string emsg("bad"), wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!ok(e));
  }
}

auto tests::unit::stream::Estimate::test_has_error() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  {
    std::string emsg, wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!has_error(e));
  } {
    std::string emsg, wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!has_error(e));
  } {
    std::string emsg("bad"), wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(has_error(e));
  } {
    std::string emsg("bad"), wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(has_error(e));
  }
}

auto tests::unit::stream::Estimate::test_error_message() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  {
    std::string emsg, wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(error_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(emsg, error_message(e));
  } {
    std::string emsg, wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(error_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(emsg, error_message(e));
  } {
    std::string emsg("bad"), wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!error_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(emsg, error_message(e));
  } {
    std::string emsg("bad"), wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!error_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(emsg, error_message(e));
  }
}

auto tests::unit::stream::Estimate::test_has_warning() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  {
    std::string emsg, wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!has_warning(e));
  } {
    std::string emsg, wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(has_warning(e));
  } {
    std::string emsg("bad"), wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!has_warning(e));
  } {
    std::string emsg("bad"), wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(has_warning(e));
  }
}

auto tests::unit::stream::Estimate::test_warning_message() -> void {
  using scold::Phase;
  using scold::Ground;
  using scold::stream::Action;
  {
    std::string emsg, wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(warning_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(wmsg, warning_message(e));
  } {
    std::string emsg, wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!warning_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(wmsg, warning_message(e));
  } {
    std::string emsg("bad"), wmsg;
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(warning_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(wmsg, warning_message(e));
  } {
    std::string emsg("bad"), wmsg("don't do that");
    ::scold::stream::Estimate e(Phase::FPP, Ground::FORE, Phase::HPP, Action::DROP, emsg, wmsg);
    CPPUNIT_ASSERT(!warning_message(e).empty());
    CPPUNIT_ASSERT_EQUAL(wmsg, warning_message(e));
  }
}

auto tests::unit::stream::Estimate::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Estimate");
  s << call("constructor", &Estimate::test_constructor)
     << call("prev", &Estimate::test_prev)
     << call("ground", &Estimate::test_ground)
     << call("diversion", &Estimate::test_diversion)
     << call("drop", &Estimate::test_drop)
     << call("keep", &Estimate::test_keep)
     << call("ok", &Estimate::test_ok)
     << call("has_error", &Estimate::test_has_error)
     << call("error_message", &Estimate::test_error_message)
     << call("has_warning", &Estimate::test_has_warning)
     << call("warning_message", &Estimate::test_warning_message)
    ;
  return finalize(s);
}
#endiv
