// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace module {
      class Value;
    }
  }
}
#endiv
#divert <hpp>
#import scold.Module
#import scold.module.operators
class tests::unit::module::Value : public cppunit::test::Fixture {
public:
  auto test_operator_slash_case1() -> void;
  auto test_operator_slash_case2() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Module
#import scold.Phase
#import scold.fragment.workbench
#import std.string
auto tests::unit::module::Value::test_operator_slash_case1() -> void {
  auto fpp = ::scold::Phase::FPP;
  auto module = ::scold::Module{"com", "example", "Class"};
  //
  // test the operator/ ---------------------------------------------------\ (here)
  //                                                                       |
  //                                                                       v
  std::string const actual = finalize(::scold::fragment::workbench() * fpp / module);
  std::string const expected = "fpp/com.example.Class";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::module::Value::test_operator_slash_case2() -> void {
  auto module = ::scold::Module{"com", "example", "Class"};
  //
  // test the operator/ -----------------------------------------------------\ (here)
  //                                                                         |
  //                                                                         v
  std::string const actual = finalize(::scold::fragment::workbench() * "fpp" / module);
  std::string const expected = "fpp/com.example.Class";
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}

auto tests::unit::module::Value::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Value");
  s << call("operator/ #1", &Value::test_operator_slash_case1)
    << call("operator/ #2", &Value::test_operator_slash_case2)
    ;
  return finalize(s);
}
#endiv
