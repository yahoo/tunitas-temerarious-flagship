// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace module {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::module::Fixture : public cppunit::test::Fixture {
public:
  auto test_ispure() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import ish.shell.dirname
#import scold.ispure
#import scold.Module
#import std.string
#import sys.posix.mkdirp
#import sys.posix.touch
#import tests.unit.Cleanup
auto tests::unit::module::Fixture::test_ispure() -> void {
  using ish::shell::dirname;
  using sys::posix::mkdirp;
  using sys::posix::touch;
  // Need to make a filesystem object to allow force the 'namespace.xcpp' filename
  std::string srcdir = "/tmp/t99.filenames";
  Cleanup<RMDIR> cleanup_srcdir(srcdir);
  {
    ::scold::Module m{"top", "pure"};
    std::string puredir = srcdir + "/top" + "/pure";
    Cleanup<RMDIR> cleanup_top(dirname(puredir));
    Cleanup<RMDIR> cleanup_pure(puredir);
    std::string file_xcpp = puredir + "/namespace.xcpp";
    Cleanup<UNLINK> cleanup_file(file_xcpp);
    CPPUNIT_ASSERT(ok(mkdirp(puredir, 0777)));
    CPPUNIT_ASSERT(ok(touch(file_xcpp, 0666)));
    auto is = ispure(m, srcdir); 
    CPPUNIT_ASSERT(is); // <----------------- test this (is pure)
  } {
    ::scold::Module m{"top", "Impure"};
    std::string puredir = srcdir + "/top";
    Cleanup<RMDIR> cleanup_top(dirname(puredir));
    Cleanup<RMDIR> cleanup_pure(puredir);
    std::string file_xcpp = puredir + "/Impure.xcpp";
    Cleanup<UNLINK> cleanup_file(file_xcpp);
    CPPUNIT_ASSERT(ok(mkdirp(puredir, 0777)));
    CPPUNIT_ASSERT(ok(touch(file_xcpp, 0666)));
    auto is = ispure(m, srcdir);
    CPPUNIT_ASSERT(!is); // <----------------- test this (not pure)
  }
}

#import tests.unit.module.Enclosing
#import tests.unit.module.Module
#import tests.unit.module.Less
#import tests.unit.module.Value
auto tests::unit::module::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("module");
  s << call("ispure", &Fixture::test_ispure) 
    << add<Enclosing>()
    << add<Module>()
    << add<Less>()
    << add<Value>()
    ;
  return finalize(s);
}
#endiv
