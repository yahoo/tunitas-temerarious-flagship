// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace phase {
      class Fixture;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::phase::Fixture : public cppunit::test::Fixture {
public:
  // detailed testing is in tests::unit::phase::Functions
  auto test_declaration() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Phase

auto tests::unit::phase::Fixture::test_declaration() -> void {
  ::scold::Phase beg = ::scold::Phase::BEG;
  ::scold::Phase fpp = ::scold::Phase::FPP;
  ::scold::Phase hpp = ::scold::Phase::HPP;
  ::scold::Phase ipp = ::scold::Phase::IPP;
  ::scold::Phase tpp = ::scold::Phase::TPP;
  ::scold::Phase cpp = ::scold::Phase::CPP;
  ::scold::Phase end = ::scold::Phase::END;
  CPPUNIT_ASSERT(beg < fpp);
  CPPUNIT_ASSERT(fpp < hpp);
  CPPUNIT_ASSERT(hpp < ipp);
  CPPUNIT_ASSERT(ipp < tpp);
  CPPUNIT_ASSERT(tpp < cpp);
  CPPUNIT_ASSERT(cpp < end);
  // Yup, declaration should be tested.
  // But there are other fixtures nearby that do detailed testing on the Phase system.
  CPPUNIT_ASSERT(true);
}

#import tests.unit.phase.Definition
#import tests.unit.phase.Functions
#import tests.unit.phase.Sequence
auto tests::unit::phase::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("phase");
  s << call("declaration", &Fixture::test_declaration) 
    << add<Definition>()
    << add<Functions>()
    << add<Sequence>()
    ;
  return finalize(s);
}
#endiv
