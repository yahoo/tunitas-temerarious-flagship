// -*- c++ -*- C++23 with S.C.O.L.D. stylings; For terms, see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests {
  namespace unit {
    namespace suffix {
      class Functions;
    }
  }
}
#endiv
#divert <hpp>
class tests::unit::suffix::Functions : public cppunit::test::Fixture {
public:
  auto test_declaration() -> void;
  auto test_operator_insert() -> void;
  auto test_operator_extract_good() -> void;
  auto test_operator_extract_fail_at_char1() -> void;
  auto test_operator_extract_fail_at_char2() -> void;
  auto test_operator_extract_fail_at_char3() -> void;
  auto test_operator_extract_fail_at_char4() -> void;
  auto test_operator_extract_throwing() -> void;
  auto test_operator_mul_string_Suffix() -> void;
  auto test_operator_mul_Module_Suffix() -> void;
  auto test_resuffix() -> void;

  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import scold.Suffix
auto tests::unit::suffix::Functions::test_declaration() -> void {
  ::scold::Suffix s;
  s = ::scold::Suffix::FPP;
  s = ::scold::Suffix::TPP;
  CPPUNIT_ASSERT(::scold::Suffix::TPP == s);
}

#import std.ostringstream
auto tests::unit::suffix::Functions::test_operator_insert() -> void {
  using scold::Suffix;
  std::ostringstream buf;
  buf << Suffix::FPP << '.' << Suffix::HPP << '.' << Suffix::IPP << '.' << Suffix::TPP << '.' << Suffix::CPP << '.'<<  Suffix::XCPP << '.'<<  Suffix::MK << '.'<<  Suffix::O << '.'<<  Suffix::LO;
  std::string const expected = "fpp.hpp.ipp.tpp.cpp.xcpp.mk.o.lo";
  std::string const actual = buf.str();
  CPPUNIT_ASSERT(expected == actual);
}

#import std.istringstream 
auto tests::unit::suffix::Functions::test_operator_extract_good() -> void {
  std::istringstream ibuf("fpp hpp ipp tpp cpp xcpp mk o lo");
  using scold::Suffix;
  Suffix fpp, hpp, ipp, tpp, cpp, xcpp, mk, o, lo;
  ibuf >> fpp >> hpp >> ipp >> tpp >> cpp >> xcpp >> mk >> o >> lo;
  CPPUNIT_ASSERT(!ibuf.fail());
  CPPUNIT_ASSERT(!ibuf.bad());
  CPPUNIT_ASSERT(!ibuf.eof());
  char onepast;
  ibuf >> onepast;
  CPPUNIT_ASSERT(ibuf.eof());
  CPPUNIT_ASSERT(Suffix::FPP == fpp);
  CPPUNIT_ASSERT(Suffix::HPP == hpp);
  CPPUNIT_ASSERT(Suffix::IPP == ipp);
  CPPUNIT_ASSERT(Suffix::TPP == tpp);
  CPPUNIT_ASSERT(Suffix::CPP == cpp);
  CPPUNIT_ASSERT(Suffix::XCPP == xcpp);
  CPPUNIT_ASSERT(Suffix::MK == mk);
  CPPUNIT_ASSERT(Suffix::O == o);
  CPPUNIT_ASSERT(Suffix::LO == lo);
}

auto tests::unit::suffix::Functions::test_operator_extract_fail_at_char1() -> void {
  //
  // bogusness --------------------\ (here)
  //                               |
  //                               v
  std::istringstream ibuf("fpp hpp Ipp tpp cpp xcpp FAIL fpp");
  using scold::Suffix;
  Suffix fpp, hpp, ipp, tpp, cpp, xcpp, fail, fpp2;
  ibuf >> fpp >> hpp >> ipp >> tpp >> cpp >> xcpp >> fail >> fpp2;
  CPPUNIT_ASSERT(Suffix::FPP == fpp);
  CPPUNIT_ASSERT(Suffix::HPP == hpp);
  CPPUNIT_ASSERT(ibuf.fail());
  // The other variables aren't set because the stream has failed
}


auto tests::unit::suffix::Functions::test_operator_extract_fail_at_char2() -> void {
  //
  // bogusness ---------------------\ (here)
  //                                |
  //                                v
  std::istringstream ibuf("fpp hpp iPp tpp cpp xcpp FAIL fpp");
  using scold::Suffix;
  Suffix fpp, hpp, ipp, tpp, cpp, xcpp, fail, fpp2;
  ibuf >> fpp >> hpp >> ipp >> tpp >> cpp >> xcpp >> fail >> fpp2;
  CPPUNIT_ASSERT(Suffix::FPP == fpp);
  CPPUNIT_ASSERT(Suffix::HPP == hpp);
  CPPUNIT_ASSERT(ibuf.fail());
  // Ibidem.
}

auto tests::unit::suffix::Functions::test_operator_extract_fail_at_char3() -> void {
  //
  // bogusness ----------------------\ (here)
  //                                 |
  //                                 v
  std::istringstream ibuf("fpp hpp ipP tpp cpp xcpp FAIL fpp");
  using scold::Suffix;
  Suffix fpp, hpp, ipp, tpp, cpp, xcpp, fail, fpp2;
  ibuf >> fpp >> hpp >> ipp >> tpp >> cpp >> xcpp >> fail >> fpp2;
  CPPUNIT_ASSERT(Suffix::FPP == fpp);
  CPPUNIT_ASSERT(Suffix::HPP == hpp);
  CPPUNIT_ASSERT(ibuf.fail());
  // Ibidem.
}

auto tests::unit::suffix::Functions::test_operator_extract_fail_at_char4() -> void {
  //
  // bogusness -----------------------------------\ (here)
  //                                              |
  //                                              v
  std::istringstream ibuf("fpp hpp ipp tpp cpp xcpQ FAIL fpp");
  using scold::Suffix;
  Suffix fpp, hpp, ipp, tpp, cpp, xcpp, fail, fpp2;
  ibuf >> fpp >> hpp >> ipp >> tpp >> cpp >> xcpp >> fail >> fpp2;
  CPPUNIT_ASSERT(Suffix::FPP == fpp);
  CPPUNIT_ASSERT(Suffix::HPP == hpp);
  CPPUNIT_ASSERT(Suffix::IPP == ipp);
  CPPUNIT_ASSERT(Suffix::TPP == tpp);
  CPPUNIT_ASSERT(Suffix::CPP == cpp);
  CPPUNIT_ASSERT(ibuf.fail());
  // Ibidem.
}

#import std.ios
#import std.cerr
auto tests::unit::suffix::Functions::test_operator_extract_throwing() -> void {
  std::istringstream ibuf("fpp hpp ipp tpp cpp xcpp FAIL fpp");
  try {
    ibuf.exceptions(std::ios::failbit);
    using scold::Suffix;
    Suffix fpp, hpp, ipp, tpp, cpp, xcpp, fail, fpp2;
    ibuf >> fpp >> hpp >> ipp >> tpp >> cpp >> xcpp >> fail >> fpp2;
    CPPUNIT_ASSERT(false);
  } catch (std::ios::failure const &e) {
    std::cerr << "caught std::ios::failure because ... the compiler " << e.what() << "\n";
    CPPUNIT_ASSERT(true);
  } catch (std::exception const &e) {
    std::cerr << "caught std::exception because ... the compiler" << e.what() << "\n";
    CPPUNIT_ASSERT(true);
  }
  CPPUNIT_ASSERT(ibuf.fail());
}

#import scold.suffix.operators
auto tests::unit::suffix::Functions::test_operator_mul_string_Suffix() -> void {
  std::string file{"file"};
  CPPUNIT_ASSERT("file.fpp" == file * ::scold::Suffix::FPP);
  CPPUNIT_ASSERT("file.hpp" == file * ::scold::Suffix::HPP);
  CPPUNIT_ASSERT("file.ipp" == file * ::scold::Suffix::IPP);
  CPPUNIT_ASSERT("file.tpp" == file * ::scold::Suffix::TPP);
  CPPUNIT_ASSERT("file.cpp" == file * ::scold::Suffix::CPP);
  CPPUNIT_ASSERT("file.xcpp" == file * ::scold::Suffix::XCPP);
}

auto tests::unit::suffix::Functions::test_operator_mul_Module_Suffix() -> void {
  ::scold::Module const module{"apple", "prune", "Class"};
  CPPUNIT_ASSERT("apple.prune.Class.fpp" == module * ::scold::Suffix::FPP);
  CPPUNIT_ASSERT("apple.prune.Class.hpp" == module * ::scold::Suffix::HPP);
  CPPUNIT_ASSERT("apple.prune.Class.ipp" == module * ::scold::Suffix::IPP);
  CPPUNIT_ASSERT("apple.prune.Class.tpp" == module * ::scold::Suffix::TPP);
  CPPUNIT_ASSERT("apple.prune.Class.cpp" == module * ::scold::Suffix::CPP);
  CPPUNIT_ASSERT("apple.prune.Class.xcpp" == module * ::scold::Suffix::XCPP);
}

#import tests.unit.suffix.Resuffix
auto tests::unit::suffix::Functions::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream s("Functions");
  s << call("declaration", &Functions::test_declaration)
    << call("operator<<", &Functions::test_operator_insert)
    << call("operator>>-good", &Functions::test_operator_extract_good)
    << call("operator>>-fail1", &Functions::test_operator_extract_fail_at_char1)
    << call("operator>>-fail2", &Functions::test_operator_extract_fail_at_char2)
    << call("operator>>-fail3", &Functions::test_operator_extract_fail_at_char3)
    << call("operator>>-fail4", &Functions::test_operator_extract_fail_at_char4)
    << call("operator>>-throwing", &Functions::test_operator_extract_throwing)
    << call("operator*-string-Suffix", &Functions::test_operator_mul_string_Suffix)
    << call("operator*-Module-Suffix", &Functions::test_operator_mul_Module_Suffix)
    << add<Resuffix>()
    ;
  return finalize(s);
}
#endiv
