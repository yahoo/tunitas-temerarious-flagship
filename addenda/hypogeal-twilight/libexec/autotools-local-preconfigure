#!/bin/sh
# For terms and provenance see the LICENSE file at the top of the repository.
#
# Run this on the first time out
#
# usage:
# autotools-local-preconfigure [no arguments or some arguments]
#
# usage
# git clone git://git.scold-lang.org/.../scold/module-EXAMPLE
# cd module-EXAMPLE
# .../hypogeal-twilight/ac/buildconf
#
#
# ./buildconf <--------------- upon receiving the dist (see above)
# ./configure <--------------- first time
# make <---------------------- rinse & repeat: edit-compile-test-debug
# [sudo] make install <------- ready
#

# DO NOT
#    cd ${0%/*}
# we want to be somewhere else ... namely in the buildconf that called here

declare _NAME=${0##*/}
declare NAME="${_NAME}[${PWD##*/}]"

# recover the AC_CONFIG_MACRO_DIR statement out of configure.ac
function fetch_AC_CONFIG_MACRO_DIR() {
    sed -ne '
/^[ 	]*AC_CONFIG_MACRO_DIR/ {
    #
    # specimen:
    #    AC_CONFIG_MACRO_DIR(m4)   dnl ...comment...
    #    AC_CONFIG_MACRO_DIR([m4]) dnl ...comment...
    #
    s/AC_CONFIG_MACRO_DIR(\[\([^()]*\)\]).*/\1/
    s/AC_CONFIG_MACRO_DIR(\([^()]*\)).*/\1/
    s/^[[:space:]]*//
    s/[[:space:]]*$//
    s/^\[//
    s/\]$//
    p
    q
}' "$@" /dev/null
}

declare DEFAULT_DEFAULT_TOPLEVEL_M4_DIRECTORY=${PWD}/m4
declare DEFAULT_TOPLEVEL_M4_DIRECTORY
if [ -f configure.ac ] ; then
    AC_CONFIG_MACRO_DIR=$(fetch_AC_CONFIG_MACRO_DIR configure.ac)
    if ((0 != $?)) || [ -z "$AC_CONFIG_MACRO_DIR" ] ; then
        echo "$NAME: info, cannot recover the AC_CONFIG_MACRO_DIR declaration in configure.ac"
        echo "$NAME: error, could not establish the default toplevel m4 cache, a directory"
        echo "$NAME: error, quitting"
        exit 2
    fi 2>&1
    DEFAULT_TOPLEVEL_M4_DIRECTORY="${AC_CONFIG_MACRO_DIR?AC_CONFIG_MACRO_DIR is empty}"
else
    # there is no configure.ac, so make up the location
    DEFAULT_TOPLEVEL_M4_DIRECTORY="$DEFAULT_DEFAULT_TOPLEVEL_M4_DIRECTORY"
    echo "$NAME: notice, there is no configure.ac, so there is no AC_CONFIG_MACRO_DIR declaration"
    echo "$NAME: notice, the default local cache directory becomes ${DEFAULT_TOPLEVEL_M4_DIRECTORY}"
fi

declare -i recursive_mode=0
if test 1 == "${autotools_local_preconfigure_discover_and_buildconf_the_subdirs:-0}"; then
    recursive_mode=1 
fi

function version_subcommand() {
    # [[FIXTHIS]] ... interlock to ensure that ChangeLog, package.spec and herein all agree
    echo "${_NAME}: version v0.45.1-0.devel of hypogeal-twilight"
    exit 0
}

function usage_subcommand() {
    local -i e=$1; shift
    local space='  '
    (
        if ((0 == e)); then
            cat
        else
            cat 1>&2
        fi
    ) <<EOF
usage: ${_NAME} [options]

Options
${space}--is-recursive, --recursive   forego checks already done at the top
${space}--is-top-level, --toplevel    force top-level mode
${space}-I DIRECTORY                  per aclocal(1), first mention is the local cache
${space}-I DIRECTORY                  per aclocal(1), subsequent mentions are read-only libraries
${space}--include=DIRECTORY           per aclocal(1), locate the autoconf macro library
${space}--system-acdir=DIRECTORY      per aclocal(1), the system-level library, macros are copied out of here
${space}--aclocal=DIRECTORY           same
${space}--autoconf=DIRECTORY          same

The semantics of the options follows that of aclocal (which is dubious and vaguely documented)
The first -I DIRECTORY is required, it defines the location of the local cache area.
The subsequent -I DIRECTORY are optional, they define the location of readonly resources.
When in doubt, read aclocal(1)
To wit:
       --automake-acdir=DIR
              directory holding automake-provided m4 files
       --system-acdir=DIR
              directory holding third-party system-wide files
       -I DIR add directory to search list for .m4 files

But upon reading the source code of /usr/bin/aclocal
[aclocal] searches macros in this order:
1. user-supplied directories first, then the directory containing the
2. automake macros, and finally
3. the system-wide directories for third-party macros.
Wherein..
@user_includes can be augmented with -I or AC_CONFIG_MACRO_DIRS.
@automake_includes can be reset with the '--automake-acdir' option.
@system_includes can be augmented with the 'dirlist' file or the
ACLOCAL_PATH environment variable, and reset with the '--system-acdir' option. 

Also:
--verbose           moar prattle
--dry-run           do nothing, but parse options and do some self-checks
--version           emit the version indicator
--usage, --help     emit this message
EOF
    exit ${e:-2}
}

declare aclocal_system_acdir
declare aclocal_automake_acdir
declare -a aclocal_SEARCHPATH
declare -i quiet_mode=0
declare -i verbose_mode=0
declare -i dry_run_mode=0
while ((0 != $#)); do
    case $1 in
    ( --is-recursive | --recursive )
        recursive_mode=1
        shift
        ;;
    ( --is-top[-_]level | --is-toplevel | --top[-_]level | --toplevel )
        recursive_mode=0
        shift
        ;;
    ( -I )
        shift
        if ((0 == $#)); then
            echo "$NAME, error, missing directory after -I" 1>&2
            usage_subcommand 1
        fi
        __directory=$1
        shift
        # need an absolute path because we are passing this value down the submodule hierarchy
        if ((recursive_mode)); then
            if ! expr "${__directory?}" : '^/' > /dev/null ; then
                __directory="${PWD}/${__directory?}"
            fi
        fi
        if [ -z "$TOPLEVEL_M4_DIRECTORY" ] ; then
            TOPLEVEL_M4_DIRECTORY=${__directory?}
        else
            aclocal_SEARCHPATH=("${aclocal_SEARCHPATH[@]}" "${__directory?}")
        fi
        ;;
    ( -I?* )
        __directory=$(expr "x$1" : 'x-I\(.*\)')
        shift
        if ((recursive_mode)); then
            if ! expr "${__directory?}" : '^/' > /dev/null ; then
                __directory="${PWD}/${__directory?}"
            fi
        fi
        if [ -z "$TOPLEVEL_M4_DIRECTORY" ] ; then
            TOPLEVEL_M4_DIRECTORY=${__directory?}
        else
            aclocal_SEARCHPATH=("${aclocal_SEARCHPATH[@]}" "${__directory?}")
        fi
        ;;
    ( --include=* )
        __directory=$(expr "x$1" : 'x--[^=]*=\(.*\)')
        shift
        if ((recursive_mode)); then
            if ! expr "${__directory?}" : '^/' > /dev/null ; then
                __directory="${PWD}/${__directory?}"
            fi
        fi
        aclocal_SEARCHPATH=("${aclocal_SEARCHPATH[@]}" "${__directory?}")
        ;;
    ( --automake-acdir=* )
        __directory=$(expr "x$1" : 'x--[^=]*=\(.*\)')
        shift
        if ! expr "${__directory?}" : '^/' > /dev/null ; then
            __directory="${PWD}/${__directory?}"
        fi
        aclocal_automake_acdir="${__directory?}"
        ;;
    ( --system-acdir=* )
        __directory=$(expr "x$1" : 'x--[^=]*=\(.*\)')
        shift
        if ! expr "${__directory?}" : '^/' > /dev/null ; then
            __directory="${PWD}/${__directory?}"
        fi
        aclocal_system_acdir="${__directory?}"
        ;;
    ( --aclocal=* | --autoconf=* )
        __directory=$(expr "x$1" : 'x--[^=]*=\(.*\)')
        __old=$1
        shift
        __new="--include=$__directory"
        set -- "${__new}" "$@"
        {
            echo "${NAME}: deprecation: the styling '${__old?}' is deprecated, instead use '${__new?}"
            echo "${NAME}: deprecation: continuing as if '${__new?} was given"
        } 1>&2
        ;;
    ( --quiet | -q )
        shift
        quiet_mode=1
        verbose_mode=0
        ;;
    ( --verbose | -v )
        shift
        verbose_mode=1
        ;;
    ( --dryrun | --dry-run )
        shift
        dry_run_mode=1
        ;;
    ( --version | -V )
        version_subcommand
        ;;
    ( --usage | --help | -h )
        usage_subcommand 0
        ;;
    ( -- )
        shift
        break
        ;;
    ( -* )
        {
            echo "$NAME, error, unknown option '$1'"
            usage_subcommand 1
        } 1>&2
        ;;
    ( * )
        break
        ;;
    esac
done
if ((0 != $#)); then
    echo "$NAME, notice, use '--usage' to see the list of valid options"
    echo "$NAME, error, invalid option '$1'"
    usage_subcommand 1
fi 1>&2
if [ -z "$TOPLEVEL_M4_DIRECTORY" ] ; then
    TOPLEVEL_M4_DIRECTORY="$DEFAULT_TOPLEVEL_M4_DIRECTORY"
fi
case "$TOPLEVEL_M4_DIRECTORY" in
    ( /* ) : ok ;;
    ( * ) TOPLEVEL_M4_DIRECTORY="${PWD}/$TOPLEVEL_M4_DIRECTORY" ;;
esac

# n.b. aclocal will error out if this directory does not exist (no need to check it here)
#
# -I DIR                first instance defines the local cache of m4 macros
# -I DIR                subsequent instances adds to the search path
#
# --automake-acdir=DIR  directory holding automake macro files
#                       can only be specified once
#
# --system-acdir=DIR    directory holding third-party system-wide macro files
#                       can only be specified once
#                       macros located here are copied into the local cache
#                       following dependents down the aclocal_SEARCHPATH
#
# --install             copies the "third party files" into the first -I directory
#
# Acquire get ${0%/*} where we can strip off multiple
declare guess_base_root=$(cd "$(dirname ${0})" && pwd)
# /build/scold/hypogeal-twilight/ac -> /build/scold/hypogeal-twilight (the root of the dev tree)
declare guess_dev_root=$(dirname "$guess_base_root")
# /opt/scold/libexec/hypogeal-twilight -> /opt/scold (the prod root)
declare guess_prod_root=$(dirname $(dirname "$guess_base_root"))
# $0 is installed in the development tree; e.g. /build/scold/hypogeal-twilight/ac
# $0 is installed in a production tree;    e.g. /opt/scold/share/hypogeal-twilight/ac
declare -a guess_roots=( "$guess_dev_root/ac" "$guess_prod_root/share/hypogeal-twilight/ac" )
declare -a guess_old_roots=( "$guess_dev_root/m4" "$guess_prod_root/share/hypogeal-twilight/m4" )
if [ -z "$aclocal_system_acdir" ] ; then
    for guess in "${guess_roots[@]}" "${guess_old_roots[@]}"; do
        if [ -d "$guess" ] ; then
            aclocal_SEARCHPATH=( "${aclocal_SEARCHPATH[@]}" "$guess" )
            break
        fi
    done
fi
if [[ -z "${aclocal_system_acdir}" ]] && ((0 == ${#aclocal_SEARCHPATH[@]})); then
    sed -e "s/^/$NAME: /" <<__ERROR__
notice, the system-wide m4 library was expected to be discoverable by heuristic rule
notice, in a location relative to autotools-local-preconfigure in the PATH
notice, found $(type -p autotools-local-preconfigure 2>&1)
notice, so derived ${guess_prod_root:-...}/share/hypogeal-twilight/ac
notice, or else in the declared searchpath ( ${guess_roots[@]} )
repair, redo but manually specify --system-acdir=ROOT/share/hypogeal-twilight/ac
repair, as an argument to ./buildconf or autotools-local-preconfigure
repair, e.g. ./buildconf --system-acdir=/opt/scold/share/hypogeal-twilight/ac
error, could not identify the m4 library by heuristic rules
__ERROR__
    exit 78
fi 1>&2
if ((verbose_mode)); then
cat <<EOF
searchpath:     ${aclocal_SEARCHPATH[@]}
automake-acdir: ${aclocal_automake_acdir:-(unset)}
system-acdir:   ${aclocal_system_acdir:-(unset)}
EOF
fi

function instantiate_etc_config_site() {
    # pwd is expected to be the top of the repo ($top_srcdir)
    # where the ./buildconf lives and as such ${top_srcdir}/etc/config.site.in
    local in=$1; shift
    local out=${in%.in}
    local tmp="${out%/*}/t99.$$.${out##*/}~"
    if [ -f "$out" ] && [ "$out" -nt "$in" ] ; then
        echo "$NAME: notice, $out already exists, and is newer, not overwriting it"
        sed -e "s|^|${out##*/}> |" < "$out"
    elif ! [ -f "$in" ] ; then
        # this isn't an error, not even a soft one; it is not an error for config.site.in to be absent
        echo "$NAME: notice, there is no file $in" 1>&2
        return 1
    else
        sed -e "
s!@GENERATOR@!${0##*/}!g;
s!@DATE3339@!$(date --rfc-3339=seconds)!;
s!@PWD@!${PWD}!g;
" < "$in" > "$tmp" && chmod a-w "$tmp" && mv -f "$tmp" "$out"
        echo "$NAME: notice, created $out from $in"
    fi
}

#
# Automatic dependency tracking is on by default;
# To turn it off
#     automake -i
#     AUTMAKE_OPTIONS = no-dependencies (and other options)
#

function grok_configure_ac_for_AC_CONFIG_HEADERS() {
    local config_h_in
    config_h_in=$(sed -ne '
/^[ 	]*AC_CONFIG_HEADERS(/ {
    s/ dnl .*//
    #
    # WATCHOUT - we MUST have a minimal match here in case there is more (but sed does not have such?)
    # Witness:
    #    AC_CONFIG_HEADERS([obj/include/module-sys/config.h]) dnl include/module-sys/netdb.h which does an #undef hack [[FIXTHAT]]
    #
    # Only print if a match occurred.  Expect an error later if still no match occurred.
    #
    #                                            /---------- MUST end in .h
    #                                            |
    #                                            v
    s/.*[ 	]*AC_CONFIG_HEADERS(\[\([^() #]*\.h\)\]).*/\1/p
    q
}' "$@")
    if ((0 != $?)); then
        echo "$NAME: error, failed to grok $@ for AC_CONFIG_HEADERS"
        exit 1
    fi 1>&2
    #
    # Expect:
    #   config_h_in="config.h.in"
    #   config_h_in="include/MODULENAME/config.h.in"
    # Return
    #   .                    -- the config.h will not be published with the package
    #   include/MODULENAME   -- the config.h will be published with the package
    #
    # echo "DEBUG $0 DEBUG ------------------> q(${config_h_in:-(empty)}) q($(dirname "$config_h_in"))" 1>&2
    dirname "$config_h_in"
}

function grok_configure_for_subdirs() {
    sed -ne '
/^[ 	]*subdirs=/ {
    s/[ 	]*subdirs="\([^"]*\)"$/\1/
    s/subdirs=//g
    s/\$subdirs//g
    # get rid of the leading ./ as it looks unkempt
    s|\./||g
    p
    # q <-- NO there many be many subdir lines
}' "$@"
}

function grok_Makefile_for_subdirs() {
    sed -ne '
/^subdirs *=/ {
    s/subdirs *= *\(...*\)$/\1/
    s/[ 	][ 	]*/ /g
    # get rid of the leading ./ as it looks unkempt
    s|\./||g
    p
    # q <-- NO there many be many subdir lines
}' "$@"
}

function discover_and_prattle_the_subdirs() {
    discover_and_possibly_prattle_possibly_buildconf_the_subdirs 0
}

function discover_and_buildconf_the_subdirs() {
    discover_and_possibly_prattle_possibly_buildconf_the_subdirs 1
}

function discover_and_possibly_prattle_possibly_buildconf_the_subdirs() {
    export autotools_local_preconfigure_discover_and_buildconf_the_subdirs=1
    local -i do_buildconf=$1; shift
    local configure_file=./configure
    local Makefile_file=./Makefile.in
    if ! [ -f "$configure_file" ] ; then
        echo "$NAME: error, there is no $configure_file from which to guess the subdirs"
        return 1
    fi 1>&2
    if ! [ -f "$Makefile_file" ] ; then
        echo "$NAME: error, there is no $Makefile_file from which to guess the subdirs"
        return 1
    fi 1>&2
    #
    # autoconf converts configure.ac into configure
    # There may or may not be subdir declarations of AC_CONFIG_SUBDIRS([ ...directories... ])
    # If there are such then a shell variables is produced which mentions them all.
    # Find that shell variable and use it to drive the subdirectory buildconf execution.
    #
    # Specimen
    #
    # subdirs="$subdirs external/module-c external/module-std external/module-cppunit external/module-unit-rigging external/module-c-string external/module-posix external/module-sys external/module-options external/module-path"
    #
    # WATCHOUT - later versions of configure seem to have moved to use ac_subdirs_all='...' but in a multi-ine format
    # which will not work for naive grepping. However, automake seems to produce a relevantly-shaped variable
    # BUT ./Makefile.in seems to have it
    #
    # WATCHOUT - when the subdirs are done in parts
    #
    #     $ grep subdir= configure
    #     configure:17462:    subdirs="$subdirs "
    #     configure:17472:        subdirs="$subdirs ./anguish-answer"
    #     configure:17495:        subdirs="$subdirs ./hypogeal-twilight"
    #
    # use
    #   SCOLD_CONFIG_SUBMODULES([external], [module1 module2 module3])
    #   SCOLD_CONFIG_SUBMODULES([.], [module1 module2 module3]))
    #
    local -a subdirs
    if grep -qe '^[ 	]*subdirs="[^"]*"$' "$configure_file"; then
        subdirs=( $(grok_configure_for_subdirs "$configure_file") )
    else
        if grep -qe '^SUBDIRS *= *...*$' "$Makefile_file"; then
            subdirs=( $(grok_Makefile_for_subdirs "$Makefile_file") )
        else
            echo "$NAME: notice, there are no SUBDIRS to be built (skipping the recursion)"
            return 0
        fi
    fi
    #
    # WATCHOUT - this does not account for conditional use of AC_CONFIG_SUBDIRS
    # For example
    #     SCOLD_CHECK_JSONCPP conditionally builds external/jsoncpp if it is present as a submodule
    #     it is present in module-json, but not at the top level
    #
    echo "$NAME: notice, candidates for the subdirs & SUBDIRS variables are ( ${subdirs[@]} )"
    for subdir in ${subdirs[@]} ; do
        if [ -f $subdir/buildconf ] ; then
            echo "$NAME: notice, buildconf within ${PWD}/$subdir"
            if [ ! -x $subdir/buildconf ] ; then
                echo "$NAME: error, buildconf within ${PWD}/$subdir, exists but is not executable"
                return 1
            fi
            if ((do_buildconf)); then
                m4=${TOPLEVEL_M4_DIRECTORY?${0##*/}: error, TOPLEVEL_M4_DIRECTORY is UNSET}
                if ! ( cd $subdir && ./buildconf  --is-recursive -I ${m4?} ${aclocal_system_acdir:+--system-acdir=${aclocal_system_acdir}} ${aclocal_SEARCHPATH[@]/#/-I} ); then
                    echo "$NAME: error, in $subdir, failed to complete the ./buildconf within ${PWD}"
                    return 1
                fi
            else
                echo "$NAME: notice, there is a valid buildconf at ${PWD}/$subdir/buildconf"
                echo "$NAME: notice, operating in recursive mode, therefore ${PWD}/$subdir/buildconf is ignored"
            fi
        fi 2>&1
    done
    return 0
}

# with arguments because we want config.h.in to be somewhere else than ./
# https://www.gnu.org/software/autoconf/manual/autoconf-2.66/html_node/autoheader-Invocation.html
#
# <quote>
#   It searches for the first invocation of AC_CONFIG_HEADERS in configure sources to determine
#   the name of the template. (If the first call of AC_CONFIG_HEADERS specifies more than one input file name,
#   autoheader uses the first one.)
#   <snip/>
#   If you give autoheader an argument, it uses that file instead of configure.ac and writes the
#   header file to the standard output instead of to config.h.in. If you give autoheader an argument of -,
#   it reads the standard input instead of configure.ac and writes the header file to the standard output.
# </quote>
#

function hack_in_the_HGTW_APPEND_SUBCONFIGURE_ARGUMENT() {
    #
    # IMPORTANT IMPORTANT IMPORTANT IMPORTANT
    #
    # Hack In The hgtw subconfigure arguments so thatn
    # configure.ac's use of HGTW_APPEND_SUBCONFIGURE_ARGUMENT has effect
    #
    # This scheme depends upon the fact that configure accepts arguments repeatedly
    # but only affects the direction of the last one.  So later options override earlier.
    #
    # Specimen (from configure circa autoconf-2.69-25.fc27.noarch)
    #
    #    { $as_echo "$as_me:${as_lineno-$LINENO}: running $SHELL $ac_sub_configure $ac_sub_configure_args --cache-file=$ac_sub_cache_file --srcdir=$ac_srcdir" >&5
    #    $as_echo "$as_me: running $SHELL $ac_sub_configure $ac_sub_configure_args --cache-file=$ac_sub_cache_file --srcdir=$ac_srcdir" >&6;}
    #    # The eval makes quoting arguments work.
    #    eval "\$SHELL \"\$ac_sub_configure\" $ac_sub_configure_args \
    #         --cache-file=\"\$ac_sub_cache_file\" --srcdir=\"\$ac_srcdir\"" ||
    #
    sed -i -e '
# this pattern needs to hit all three lines, each of which operates within shell "..."
/SHELL.*ac_sub_configure.*ac_sub_configure_args/ s|ac_sub_configure_args|ac_sub_configure_args \\\
--enable-dynamic-subconfigure-arguments \\\
${hgtw_sub_configure_args:---disable-hgtw_sub_configure_args=SURPRISE} |
' configure
}

function buildconf_here() {
    echo "$NAME: notice, buildconf here within ${PWD}"
    #
    # aclocal --force because we always want the updated hypogeal-twilight macro definitions
    #
    # autoheader writes to ./config.h.in or to ./include/MODULE/config.h.in as defined in configure.ac
    # WATCHOUT - rm -rf obj removes the directory into which config.h.in may need to be written
    #            see AC_CONFIG_HEADERS in configure.ac
    #
    # AC_CONFIG_MACRO_DIR(directory)       defines the dump, the first '-I directory'
    # AC_CONFIG_MACRO_DIRS(directory_path) defines the path, the remaining '-I directory' series
    local autoheader_output_directory=$(grok_configure_ac_for_AC_CONFIG_HEADERS ./configure.ac)
    local m4=${TOPLEVEL_M4_DIRECTORY?${_NAME}: error, TOPLEVEL_M4_DIRECTORY is UNSET}
    if true &&
        run rm -rf ./tmp/config.cache &&
        run rm -rf ./obj &&
        : NOT $m4 but local AC_CONFIG_MACRO_DIR guessing ./m4 && run rm -rf ./m4 &&
        if true || ((!recursive_mode)); then
            if [ -n "${AC_CONFIG_MACRO_DIR}" ] && [ "${AC_CONFIG_MACRO_DIR}" != "$m4" ] ; then
                echo "$NAME, warning, AC_CONFIG_MACRO_DIR=${AC_CONFIG_MACRO_DIR?} in configure.ac does not match --autoconf=${m4?}"
                echo "$NAME, notice, these might be the same location by another name"
                echo "$NAME, notice, libtoolize will might fail because of this, continuing anyway"
            fi 1>&2 &&
            run libtoolize &&
            run mkdir -p "${m4?}" &&
            run aclocal --force --install -I "${m4?}" ${aclocal_system_acdir:+--system-acdir=${aclocal_system_acdir}} ${aclocal_SEARCHPATH[@]/#/-I}
        else
            : do NOT --force or --install && 
            run aclocal -I "${m4}"
        fi &&
        run mkdir -p $autoheader_output_directory &&
        run autoheader -I "${m4}" ${aclocal_system_acdir:+-I ${aclocal_system_acdir}} ${aclocal_SEARCHPATH[@]/#/-I } &&
        run autoconf -I "${m4}" ${aclocal_system_acdir:+-I ${aclocal_system_acdir}} ${aclocal_SEARCHPATH[@]/#/-I } &&
        { true || {
            # You are missing AC_OUTPUT which is called transitively from HGTW_FINALIZE
            # /usr/share/automake-1.15/am/check2.am: error: am__EXEEXT does not appear in AM_CONDITIONAL;
            : propylaxis against
            : DOES. NOT. HELP;
            run autoreconf -I "${m4}" --install
        }; } &&
        run hack_in_the_HGTW_APPEND_SUBCONFIGURE_ARGUMENT &&
        run automake --add-missing --foreign --include-deps &&
        run write_buildconf_ambient_variables &&
        true
    then
        echo "$NAME: notice, OK, the autotools are ready and configured in ${PWD}"
        return 0
    else
        echo "$NAME: error, FAILED to initialize the autotools in ${PWD}"
        return 1
    fi
}

function run() {
    local -a args=( "$@" )
    local -i e
    echo -n "$1"; shift
    while ((0 != $#)); do
        echo -n " $1"; shift
    done
    echo
    "${args[@]}"
    e=$?
    if ((0 != e)); then
        echo "$args exit $e"
    fi
    return $e
}

function write_buildconf_ambient_variables() {
    # the outfile name is known to ../ac/with-hypogeal-twilight.mk
    local outfile="mk/buildconfed.mk"
    local tmpfile="${outfile%/*}/t99.$$.${outfile##*/}~"
    local hgtw="${with_hypogeal_twilight:+with_hypogeal_twilight=$with_hypogeal_twilight}"
    local vndg="${with_vernacular_doggerel:+with_vernacular_doggerel=$with_vernacular_doggerel}"
    local inso="${with_incendiary_sophist:+with_incendiary_sophist=$with_incendiary_sophist}"
    local no="no setting was preestablished for"
    local so="so it will have to be discovered at configure time"
    # no error detection or messaging here, but the return code delegate to the caller (who cares)
    mkdir -p mk && cat > $tmpfile <<EOF && chmod a-w $tmpfile && mv -f $tmpfile $outfile
# Generated by $0 at $(date --rfc-3339=seconds || date +"%Y-%m-%d %H:%M:%S")
${hgtw:-# $no hypogeal-twilight, $so}
${vndg:-# $no vernacular-doggerel, $so}
${inso:-# $no incendiary-sophist, $so}
EOF
}

if ((dry_run_mode)); then
    echo "$NAME: notice, in dry-run mode, quitting without doing anything"
    exit 0
fi
echo "$NAME: notice, running $0"
echo "$NAME: notice, in ${PWD}"

if ((recursive_mode)); then
    echo "$NAME: notice, using recursive mode"
else
    echo "$NAME: notice, using toplevel mode"
    declare -a BUILD_RPMS=( libtool autoconf automake m4 make gcc gcc-c++ )
    echo "$NAME: notice, checking for the build packages development ( ${BUILD_RPMS[@]} )"
    if ! rpm -q "${BUILD_RPMS[@]}" ; then
        echo "$NAME: error, the development environment is incomplete"
        echo "$NAME: quitting."
        exit 1
    fi 1>&2
    # remember, we want libuuid-devel, not uuid-devel
    declare -a DEVEL_RPMS=( boost-devel cppunit-devel libcurl-devel curlpp-devel jsoncpp-devel libuuid-devel sqlite-devel )
    echo "$NAME: notice, checking for the build packages development ( ${DEVEL_RPMS[@]} )"
    if ! rpm -q "${DEVEL_RPMS[@]}" ; then
        echo "$NAME: warning, certain development packages are missing, the configuration will fail later on..."
        echo "$NAME: continuing..."
    fi 1>&2
    declare config_site_in=${PWD}/etc/config.site.in
    if ! instantiate_etc_config_site "$config_site_in" ; then
        # this isn't an error, not even a soft one.
        echo "$NAME: notice, the autotools site configuration file could not be not created from $config_site_in (continuing anyway)"
    fi 1>&2
fi
if buildconf_here && discover_and_buildconf_the_subdirs; then
    echo "$NAME: notice, now run ./configure [ --prefix=ROOT ] && make { all | check | install }"
    exit 0
else
    echo "$NAME: notice, failing"
    exit 1
fi
