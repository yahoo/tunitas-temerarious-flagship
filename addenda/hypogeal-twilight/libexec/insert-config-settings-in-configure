#!/usr/bin/perl

# Establish CONFIG_SITE reading as the 1st thing in ./configure
# Most repositories expect to have a ./config.settings.in at the top level
# Some repositories use ./etc/config.site.in
#
#    ./configure> #! /bin/sh
#    ./configure> # inserted by ${PWD}/hypogeal-twilight/ac/insert-config-settings-in-configure at YYYY-MM-DD HH:MM:SS
#    ./configure> : ${CONFIG_SITE:=${PWD}/config.settings} ; export CONFIG_SITE
#    ./configure> echo "debug: CONFIG_SITE=${CONFIG_SITE:-unset}"
#    ./configure> # Guess values for system-dependent variables and create Makefiles.
#
# CONFIG_SITE is one of
#    $prefix/share/config.site
#    $prefix/etc/config.site
#    $CONFIG_SITE, the file indicated by the environment variable
#
use strict;
use warnings;
use Cwd qw(&getcwd);
use File::Basename qw(&basename);
use POSIX qw(&localtime &rename &strftime &unlink);
use constant EXHIBITION_LIMIT => 9;

our $CWD = getcwd();
our $NAME = eval {
    my ($name) = ($0 =~ m!(?:.*/)?(.*)!);
    my $cwd = basename($CWD);
    return qq(${name}[$cwd]);
};

sub executable($) { 
    my $fh = shift;
    my @bundle = (stat $fh);
    return undef unless @bundle;
    my $perm = $bundle[2] & 07777;
    return chmod($perm | 0111, $fh);
}

our $VERSION = <<__VERSION__;
$NAME: version v0.45.1-0.devel of hypogeal-twilight
__VERSION__
our $USAGE = <<__USAGE__;
usage $NAME     (no other options)\n
__USAGE__

if (@ARGV) {
    do {
        print $USAGE;
        exit 0;
    } if q(--usage) eq $ARGV[0] || q(--help) eq $ARGV[0] || q(-h) eq $ARGV[0];
    do {
        print $VERSION;
        exit 0;
    } if q(--version) eq $ARGV[0] || q(-V) eq $ARGV[0];
}
die $USAGE unless 0 == @ARGV;

our $CONFIG_SITE=q(CONFIG_SITE); # the standard site-wide one
our $CONFIG_SETTINGS=q(CONFIG_SETTINGS); # this one, the project-specific one

our $sitefile_basename=q(config.settings);
our $sitefile = getcwd() . q(/) . $sitefile_basename;

# edit configure in place...
# expects to be run from the top level from buildconf
our $INPUT = q(./configure);
our $TEMPY = q(./t99.configure~);
our $FINAL = q(./configure);

print STDERR qq($NAME: warning, the environment declares $CONFIG_SETTINGS=$ENV{$CONFIG_SETTINGS}, yet $CONFIG_SETTINGS=$sitefile will be hardcoded into $INPUT\n)
    if defined $ENV{$CONFIG_SETTINGS} && $ENV{$CONFIG_SETTINGS} ne $sitefile;
print qq($NAME: notice, establishing $CONFIG_SETTINGS=$sitefile in $INPUT\n);

our $settings = getcwd();
our $timestamp = strftime("%Y-%M-%d %H:%M:%S", localtime(time));

print qq($NAME: notice, establishing $FINAL from $INPUT, inserting $CONFIG_SETTINGS=$sitefile...\n);

open(my $input, '<', $INPUT) or die qq(failed to open $INPUT because $!\n);
open(my $tempy, '>', $TEMPY) or die qq(failed to open $TEMPY because $!\n);
executable($tempy) or die qq(failed to chmod executable $TEMPY because $!\n);
while (<$input>) {
    if (2 == $.) {
        my $tag = qq(trace[\${0##*/}][.../\${PWD##*/}]);
        print $tempy qq(# begin - inserted by $0 at $timestamp\n);
        print $tempy qq(: \${$CONFIG_SETTINGS:=$sitefile} ; export $CONFIG_SETTINGS\n);
        print $tempy qq(echo "$tag: before sourcing \${$CONFIG_SETTINGS}"\n);
        print $tempy qq(echo "$tag: see $CONFIG_SETTINGS=\${$CONFIG_SETTINGS:-unset}"\n);
        print $tempy qq(echo "$tag: see $CONFIG_SITE=\${$CONFIG_SITE:-unset}"\n);
        print $tempy qq(source \${$CONFIG_SETTINGS} || exit 1\n);
        print $tempy qq(echo "$tag: after sourcing \${$CONFIG_SETTINGS}"\n);
        print $tempy qq(echo "$tag: see $CONFIG_SETTINGS=\${$CONFIG_SETTINGS:-unset}"\n);
        print $tempy qq(echo "$tag: see $CONFIG_SITE=\${$CONFIG_SITE:-unset}"\n);
        print $tempy qq(# end\n\n);
    }
    print $tempy $_;
}
close($input) or die qq(failed to close $INPUT because $!\n);
close($tempy) or die qq(failed to close $TEMPY because $!\n);
rename($TEMPY, $FINAL) or die qq(failed to rename $TEMPY $FINAL because $!\n);

open(my $final, '<', $FINAL) or die qq(failed to open $FINAL because $!\n);
for (my $i=0; $i < EXHIBITION_LIMIT && ($_ = <$final>); $i++) {
    print (qq($NAME| $INPUT--> ), $_);
}
close($final) or die qq(failed to close $FINAL because $!\n);

exit(0);
