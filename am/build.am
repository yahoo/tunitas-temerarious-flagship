# This GNU -*- Makefile -*- fragment may be included directly by automake
# Copyright Yahoo Inc. 2021
# Licensed under the terms of the Apache-2.0 license.
# For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
# For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#
# Nearby with .../am/build.am (suffix matches directory)
#
# Buy everything needed to build all, one call does it all.
#
# Reminder: the ACLOCAL and AUTOMAKE options are both Makefile variables
# and locations for the declarations which are interpreted before make is run
# they are ibnterpreted in a shell eval line, so $(...) is the same as `...`
#
# Usage:  (the Makefile.am)
#     
#    default:
#    ACLOCAL_AMFLAGS = -I m4 -I $(temerarious_flagship_datadir)/ac -I $(temerarious_flagship_datadir)/m4
#    AUTOMAKE_OPTIONS = no-define subdir-objects foreign
#    SUBDIRS = @subdirs@
#    include @temerarious_flagship_datarootdir@/am/build.mk <------------------------------------------- here
#
#    # and more definitions as you learned to do with automake
#    DEVELOPMENT_AREAS = ...
#    TESTING_AREAS = ...
#    INSTALLATION_AREAS = ...
#    default: all
#    module_SOURCE_SET = ...
#    .PHONY: clean-local mostlyclean-local distclean-local
#    clean-local mostlyclean-local distclean-local::
#    include src/.../this.../Makefrag.am
#    include src/.../that.../Makefrag.am
#    include src/.../other.../Makefrag.am
#    bin_PROGRAMS = ...
#    lib_LTLIBRARIES = ...
#    noinst_LTLIBRARIES = ...
#    check_PROGRAMS = ...
#    include tests/.../Makefrag.am
#    TESTS = ...
#    ...etc...
#    
# $(info TRACE hypogeal_twilight_datadir=$(hypogeal_twilight_datadir))
ifneq "0" "$(words $(wildcard $(hypogeal_twilight_datadir)/mk/sys.o.DUMMIES.mk))"
# not (yet) available in hypogeal-twilight 0.46, so look to the else clause
include $(hypogeal_twilight_datadir)/mk/sys.o.DUMMIES.mk
else
# not (yet) available in temerarious-flagship 1.6
ifneq "0" "$(words $(wildcard $(temerarious_flagship_datadir)/mk/sys.o.DUMMIES.mk))"
include $(temerarious_flagship_datadir)/mk/sys.o.DUMMIES.mk
else
# last hope ... is there a development area available?
module_sys_datadir = $(dir $(word 1, $(wildcard $(addsuffix /mk /share/module-sys/mk,$(module_sys_prefix) $(std_tunitas_prefix) $(std_scold_prefix) $(prefix)))))
# $(info DEBUG guessing $(module_sys_datadir)/mk/sys.o.DUMMIES.mk)
# $(info DEBUG wildcard $(wildcard $(module_sys_datadir)/mk/sys.o.DUMMIES.mk))
ifneq "0" "$(words $(wildcard $(module_sys_datadir)/mk/sys.o.DUMMIES.mk))"
include $(module_sys_datadir)/mk/sys.o.DUMMIES.mk
else
#
# WATCHOUT - this isn't an idle omission.  Fix this before you proceed
# Find this makefile fragment before proceeding.
# It allows make to treat "sys.o" as a C++ header in #import, rather than a compiler output.
#
$(warning Missing "support" for import sys.o with the '.o' suffix from $(module_sys_datadir)/mk/sys.o.DUMMIES.mk)
endif
endif
endif
ifneq "0" "$(words $(wildcard $(hypogeal_twilight_datadir)/am/compile.am))"
# current as of hypogeal-twilight >= 0.45.0-0.devel (mainline, Epoch:0)
# WATCHOUT because this idiom MAY NOT be in the "ahead release" series Epoch:2 viz hypogeal-twilight >= 2:0.45
include $(hypogeal_twilight_datadir)/am/compile.am
else
# compatibility with older hypogeal-twilight 0.44 & prior
# note the two includes, where one is required nowadays
# note the .../am/compile.mk which is a deprecated idiom in favor of .../am/compile.am
include $(hypogeal_twilight_datadir)/am/EXTERNAL-PATHS.mk
include $(hypogeal_twilight_datadir)/am/compile.mk
endif
#
# Expected evolution of hypogeal-twilight is something like :
#
#    "bb"-prefixed -\ (then)
#                    |
#                    \---> DC -\ (then)
#                              |
#                              \---> DISCO (finally in hypogeal-twilight >= 0.50)
#
# There MUST be compatibility along the way to allow for Tunitas Technologies and downstream to have continuity.
# temerarious-flagship SHOULD use $(DISCO), but historically uses any of $(DC) $(bbDC) and others
#
$(if $(DC),$(__OK),$(error DC is not set, you should call TF_PROG_DC in configure.ac))
ifeq "FAIL" "$(shell type -p $(DC) 2>/dev/null || echo FAIL)"
$(warning DC=$(DC) and $(DC) is not in your PATH)
ifneq "0" "$(words $(wildcard $(std_scold_prefix)/bin/$(DC)))"
$(warning yet $(std_scold_prefix)/$(DC) exists so as a temporary hack, the build system will use that.)
$(warning SUGGEST adding 'export PATH=$(std_scold_prefix)/bin:$${PATH}' to your build environment or ~/.bash_profile)
DC := $(std_scold_prefix)/bin/$(DC)
$(warning have reset DC=$(DC))
endif
endif
ifneq "1" "$(words $(DISCO))"
$(if $(VERBOSITY_CONDITION),\
     $(warning DISCO is not set, you should call TF_PROG_DISCO in configure.ac)\
     $(warning setting DISCO=$(DC) to provide consistency until TF_PROG_DISCO covers this))
DISCO := $(DC)
endif
ifeq "FAIL" "$(shell type -p $(DISCO) 2>/dev/null || echo FAIL)"
$(warning DISCO=$(DISCO) and $(DISCO) is not in your PATH)
ifneq "0" "$(words $(wildcard $(std_scold_prefix)/bin/$(DISCO)))"
$(warning yet $(std_scold_prefix)/$(DISCO) exists so as a temporary hack, the build system will use that.)
$(warning SUGGEST adding 'export PATH=$(std_scold_prefix)/bin:$${PATH}' to your build environment or ~/.bash_profile)
DISCO := $(std_scold_prefix)/bin/$(DISCO)
$(warning have reset DISCO=$(DISCO))
endif
endif
#
# prefer DISCO=disco'
# allow: DC, bbDC and other variants
# allow 'remonstrate' (the older developmental name)
# hypogeal-twilight still supports (bbDC), $(DC) and of course (DISCO)
#
ifeq "remonstrate" "$(bbDC)"
ifeq "1" "$(words $(DC))"
bbDC = $(DC)
endif
endif
define TF_DISAGGREGATE_COMPILE =
	: AVOID instead use TF_XCPP2CPP in the dependency-tracing style
	$(if $(VERBOSITY_CONDITION),echo verbose dependencies $1, : unverbose shut-up) ; \
	$(call bbHGTW_DISAGGREGATE_COMPILE,$1)
endef
define TF_DEPENDENCIES_COMPILE =
	: AVOID instead use TF_DEPENDENCIES in the dependency-tracing style
	$(if $(VERBOSITY_CONDITION),echo verbose dependencies $1, : unverbose shut-up) ; \
	$(call bbHGTW_DEPENDENCIES_COMPILE,$1)
endef
define TF_COMPILE =
	: AVOID instead use TF_DEPENDENCIES in the dependency-tracing style
	{ $(call TF_DISAGGREGATE_COMPILE, $1) ; } && { $(call TF_DEPENDENCIES_COMPILE, $1) ; }
endef
TF_DISAGGREGATE = $(call TF_COMPILE, $1)$(warning TF_DISAGGREGATE is deprecated, instead prefer TF_COMPILE)
#
#                      ^
#                      |
# The others (above---/+\---above) are deprecated in one way or another
# These      (below---\+/---below) are the go-forward ones
#                      |
#                      v
#
TF_SOURCEStoMODULES = $(call HT_SOURCEStoMODULES, $1)
TF_XCPP2CPP = $(call HT_XCPP2CPP,$1)
TF_DEPENDENCIES = $(call HT_DEPENDENCIES,$1)

include $(hypogeal_twilight_datadir)/mk/distclean.mk
# WATCHOUT - [[deprecated]] this acts upon module_SOURCES_SET as already defined in prior includes or in the top-level Makefile.am
# WATCHOUT - instead prefer INSTALL_MODULES
include $(hypogeal_twilight_datadir)/am/install.mk

$(if $(DEBUGGING_CONDITION),\
$(info .../am/build.am: DEBUG DC=$(DC))\
$(info .../am/build.am: DEBUG DEVELOPMENT_AREAS=$(DEVELOPMENT_AREAS))\
$(comment the HGTW_MODULES series is deprecated, the EXTERNAL_MODULES series is splitting & some are deprecating) \
\
$(info .../am/build.am: DEBUG SEARCHPATH_HGTW_MODULES=$(SEARCHPATH_HGTW_MODULES))\
$(info .../am/build.am: DEBUG LOADPATHPATH_HGTW_MODULES=$(LOADPATHPATH_HGTW_MODULES))\
\
$(info .../am/build.am: DEBUG SEARCHPATH_EXTERNAL_MODULES=$(SEARCHPATH_EXTERNAL_MODULES))\
$(info .../am/build.am: DEBUG LOADPATHPATH_EXTERNAL_MODULES=$(LOADPATHPATH_EXTERNAL_MODULES))\
\
$(info .../am/build.am: DEBUG SEARCHPATH_EXTERNAL_MODULES_NEAR=$(SEARCHPATH_EXTERNAL_MODULES_NEAR))\
$(info .../am/build.am: DEBUG LOADPATHPATH_EXTERNAL_MODULES_NEAR=$(LOADPATHPATH_EXTERNAL_MODULES_NEAR))\
\
$(info .../am/build.am: DEBUG SEARCHPATH_EXTERNAL_MODULES_THERE=$(SEARCHPATH_EXTERNAL_MODULES_THERE))\
$(info .../am/build.am: DEBUG LOADPATHPATH_EXTERNAL_MODULES_THERE=$(LOADPATHPATH_EXTERNAL_MODULES_THERE)))

TF_V_DCDIS = $(TF_V_DIS)$(warning TF_V_DCDIS is deprecated, instead use TF_V_DIS)
TF_V_DC    = $(TF_V_COM)$(warning TF_V_DC is deprecated, instead use TF_V_COM)

TF_V_DIS = $(__tf_DIS)
__tf_DIS = $(__tf_DIS_$V)
__tf_DIS_  = $(__tf_DIS_0)
__tf_DIS_0 = @echo "  TF-DIS   $@";
__tf_DIS_1 = 

TF_V_DEP = $(__tf_DEP)
__tf_DEP = $(__tf_DEP_$V)
__tf_DEP_  = $(__tf_DEP_0)
__tf_DEP_0 = @echo "  TF-DEP   $@";
__tf_DEP_1 =

TF_V_COM = $(__tf_COM)
__tf_COM = $(__tf_COM_$V)
__tf_COM_  = $(__tf_COM_0)
__tf_COM_0 = @echo "  TF-COM   $@";
__tf_COM_1 = 

TF_V_DONE = $(__tf_DUN)
TF_V_DUN = $(__tf_DUN)
__tf_DUN = $(__tf_DUN_$V)
__tf_DUN_  = $(__tf_DUN_0)
__tf_DUN_0_LOUD = @echo "  TF-DONE  $@";
__tf_DUN_0 = @
__tf_DUN_1 = 

#
# The 'tf_' prefix is preferred over the 'ht_' prefix
# but the migration is slow.
#
tf_srcdir = $(ht_srcdir)
tf_objdir = $(ht_objdir)
tf_mkdir = $(ht_mkdir)
tf_cxx_srcdir     = $(ht_cxx_srcdir)
tf_cxx_modulesdir = $(ht_cxx_modulesdir)
tf_cxx_includedir = $(ht_cxx_includedir)
tf_includedir = $(ht_includedir)
tf_modulesdir = $(ht_modulesdir)
tf_cxxdir = $(ht_cxxdir)
#
tf_check_srcdir         = $(ht_check_srcdir)
tf_check_objdir         = $(ht_check_objdir)
tf_check_mkdir          = $(ht_check_mkdir)
tf_check_cxx_srcdir     = $(ht_check_cxx_srcdir)
tf_check_cxx_includedir = $(ht_check_cxx_includedir)
tf_check_cxx_modulesdir = $(ht_check_cxx_modulesdir)
#
# [[disallowed]] but a common mis-use
tf_check_includedir = $(ht_check_includedir)
tf_check_modulesdir = $(ht_check_modulesdir)
tf_check_cxxdir     = $(ht_check_cxxdir)
# [[disallowed]] outrigtf
tf_checksrcdir     = $(ht_checksrcdir)
tf_checkobjdir     = $(ht_checkobjdir)
tf_checkcxx_srcdir = $(ht_checkcxx_srcdir)
# [[deprecating]]
tf_check_obj       = $(ht_check_obj)
tf_checkobj        = $(ht_checkobj)
#
tf_noinst_srcdir         = $(ht_noinst_srcdir)
tf_noinst_objdir         = $(ht_noinst_objdir)
tf_noinst_mkdir          = $(ht_noinst_mkdir)
tf_noinst_cxx_srcdir     = $(ht_noinst_cxx_srcdir)
tf_noinst_cxx_includedir = $(ht_noinst_cxx_includedir)
tf_noinst_cxx_modulesdir = $(ht_noinst_cxx_modulesdir)
#
# [[disallowed]] but a common mis-use
tf_noinst_includedir = $(ht_noinst_includedir)
tf_noinst_modulesdir = $(ht_noinst_modulesdir)
tf_noinst_cxxdir     = $(ht_noinst_cxxdir)
#
# [[disallowed]] outright
tf_noinstsrcdir     = $(ht_noinstsrcdir)
tf_noinstobjdir     = $(ht_noinstobjdir)
tf_noinstcxx_srcdir = $(ht_noinstcxx_srcdir)

