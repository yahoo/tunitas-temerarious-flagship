# This GNU -*- Makefile -*- fragment may be included directly by automake
# Copyright Yahoo Inc. 2021
# Licensed under the terms of the Apache-2.0 license.
# For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
# For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#
# Nearby with .../am/build.am (suffix matches directory)
#
# Buy everything needed to build all, one call does it all.
#
# Reminder: the ACLOCAL and AUTOMAKE options are both Makefile variables
# and locations for the declarations which are interpreted before make is run
# they are ibnterpreted in a shell eval line, so $(...) is the same as `...`
#
# Usage:  (the Makefile.am)
#     
#    default:
#    ACLOCAL_AMFLAGS = -I m4 -I $(temerarious_flagship_datadir)/ac -I $(temerarious_flagship_datadir)/m4
#    AUTOMAKE_OPTIONS = no-define subdir-objects foreign
#    SUBDIRS = @subdirs@
#    include @temerarious_flagship_datarootdir@/am/build.mk <------------------------------------------- here
#
#    # and more definitions as you learned to do with automake
#    DEVELOPMENT_AREAS = ...
#    TESTING_AREAS = ...
#    INSTALLATION_AREAS = ...
#    default: all
#    module_SOURCE_SET = ...
#    .PHONY: clean-local mostlyclean-local distclean-local
#    clean-local mostlyclean-local distclean-local::
#    include src/.../this.../Makefrag.am
#    include src/.../that.../Makefrag.am
#    include src/.../other.../Makefrag.am
#    bin_PROGRAMS = ...
#    lib_LTLIBRARIES = ...
#    noinst_LTLIBRARIES = ...
#    check_PROGRAMS = ...
#    include tests/.../Makefrag.am
#    TESTS = ...
#    ...etc...
#    
ifneq "0" "$(words $(wildcard $(hypogeal_twilight_datadir)/mk/sys.o.DUMMIES.mk))"
# not available in hypogeal-twilight 0.46, so look to the else clause
include $(hypogeal_twilight_datadir)/mk/sys.o.DUMMIES.mk
else
ifneq "0" "$(words $(wildcard $(temerarious_flagship_datadir)/mk/sys.o.DUMMIES.mk))"
include $(temerarious_flagship_datadir)/mk/sys.o.DUMMIES.mk
endif
endif
ifneq "0" "$(words $(wildcard $(hypogeal_twilight_datadir)/am/compile.am))"
# current as of hypogeal-twilight >= 0.45.0-0.devel (mainline, Epoch:0)
# WATCHOUT because this idiom MAY NOT be in the "ahead release" series Epoch:2 viz hypogeal-twilight >= 2:0.45
include $(hypogeal_twilight_datadir)/am/compile.am
else
# compatibility with older hypogeal-twilight 0.44 & prior
# note the two includes, where one is required nowadays
# note the .../am/compile.mk which is a deprecated idiom in favor of .../am/compile.am
include $(hypogeal_twilight_datadir)/am/EXTERNAL-PATHS.mk
include $(hypogeal_twilight_datadir)/am/compile.mk
endif
$(if $(DC),$(__OK),$(error DC is not set, you should call TF_PROG_DC in configure.ac))
ifeq "FAIL" "$(shell type -p $(DC) 2>/dev/null || echo FAIL)"
$(warning DC=$(DC) and $(DC) is not in your PATH)
ifneq "0" "$(words $(wildcard $(std_scold_prefix)/bin/$(DC)))"
$(warning yet $(std_scold_prefix)$(DC) exists so as a temporary hack, the build system will use that.)
$(warning SUGGEST adding 'export PATH=$(std_scold_prefix)/bin:$${PATH}' to your build environment or ~/.bash_profile)
DC := $(std_scold_prefix)/bin/$(DC)
$(warning have reset DC=$(DC))
endif
endif
# temerarious-flagship uses $(DC)
# hypogeal-twilight still uses $(bbDC) but will use $(DC) one day soon
ifeq "remonstrate" "$(bbDC)"
ifeq "1" "$(words $(DC))"
bbDC = $(DC)
endif
endif
define TF_DISAGGREGATE_COMPILE =
	: AVOID instead use TF_XCPP2CPP in the dependency-tracing style
	$(if $(VERBOSITY_CONDITION),echo verbose dependencies $1, : unverbose shut-up) ; \
	$(call bbHGTW_DISAGGREGATE_COMPILE,$1)
endef
define TF_DEPENDENCIES_COMPILE =
	: AVOID instead use TF_DEPENDENCIES in the dependency-tracing style
	$(if $(VERBOSITY_CONDITION),echo verbose dependencies $1, : unverbose shut-up) ; \
	$(call bbHGTW_DEPENDENCIES_COMPILE,$1)
endef
define TF_COMPILE =
	: AVOID instead use TF_DEPENDENCIES in the dependency-tracing style
	{ $(call TF_DISAGGREGATE_COMPILE, $1) ; } && { $(call TF_DEPENDENCIES_COMPILE, $1) ; }
endef
TF_DISAGGREGATE = \
  $(call TF_COMPILE, $1) \
  $(warning TF_DISAGGREGATE is deprecated, instead prefer TF_COMPILE)
TF_SOURCEStoMODULES = \
  $(if $(HT_SOURCEStoMODULES), \
       $(call HT_SOURCEStoMODULES, $1), \
       $(if $(HGTW_SOURCEStoMODULES), \
            $(call HGTW_SOURCEStoMODULES, $1), \
            $(if $(SCOLD_SOURCEStoMODULES), \
                 $(call SCOLD_SOURCEStoMODULES, $1), \
                 $(error no SOURCEStoMODULES at all))))
#
# PREFER the use of TF_XCPP2CPP and TF_DEPENDENCIES
# Usage:
#
#     $(scold_cxxdir)/want/dependencies.mk: $(lib_libwant_la_SOURCES)
#     $(lib_libwant_la_SOURCES) : obj/src/%.cpp : src/%.xcpp
#     	$(TF_V_DIS) $(call TF_XCPP2CPP, $<)
#     	$(TF_V_DUN) test -e $@
#     $(scold_cxxdir)/want/dependencies.mk:
#     	$(TF_V_COM) $(call TF_DEPENDENCIES, $^)
#     	$(TF_V_DUN) test -e $@
#     include $(scold_cxxdir)/want/dependencies.mk
#     clean-dependencies::
#     	rm -f $(scold_cxxdir)/want/dependencies.mk
#
TF_XCPP2CPP = $(call HT_XCPP2CPP,$1)
TF_DEPENDENCIES = $(call HT_DEPENDENCIES,$1)

include $(hypogeal_twilight_datadir)/mk/distclean.mk
# WATCHOUT - [[deprecated]] this acts upon module_SOURCES_SET as already defined in prior includes or in the top-level Makefile.am
# WATCHOUT - instead prefer INSTALL_MODULES
include $(hypogeal_twilight_datadir)/am/install.mk

$(if $(DEBUGGING_CONDITION),\
$(info .../am/build.am: DEBUG DC=$(DC))\
$(info .../am/build.am: DEBUG DEVELOPMENT_AREAS=$(DEVELOPMENT_AREAS))\
$(comment the HGTW_MODULES series is deprecated, the EXTERNAL_MODULES series is splitting & some are deprecating) \
\
$(info .../am/build.am: DEBUG SEARCHPATH_HGTW_MODULES=$(SEARCHPATH_HGTW_MODULES))\
$(info .../am/build.am: DEBUG LOADPATHPATH_HGTW_MODULES=$(LOADPATHPATH_HGTW_MODULES))\
\
$(info .../am/build.am: DEBUG SEARCHPATH_EXTERNAL_MODULES=$(SEARCHPATH_EXTERNAL_MODULES))\
$(info .../am/build.am: DEBUG LOADPATHPATH_EXTERNAL_MODULES=$(LOADPATHPATH_EXTERNAL_MODULES))\
\
$(info .../am/build.am: DEBUG SEARCHPATH_EXTERNAL_MODULES_NEAR=$(SEARCHPATH_EXTERNAL_MODULES_NEAR))\
$(info .../am/build.am: DEBUG LOADPATHPATH_EXTERNAL_MODULES_NEAR=$(LOADPATHPATH_EXTERNAL_MODULES_NEAR))\
\
$(info .../am/build.am: DEBUG SEARCHPATH_EXTERNAL_MODULES_THERE=$(SEARCHPATH_EXTERNAL_MODULES_THERE))\
$(info .../am/build.am: DEBUG LOADPATHPATH_EXTERNAL_MODULES_THERE=$(LOADPATHPATH_EXTERNAL_MODULES_THERE)))

TF_V_DCDIS = $(TF_V_DIS)$(warning TF_V_DCDIS is deprecated, instead use TF_V_DIS)
TF_V_DC    = $(TF_V_COM)$(warning TF_V_DC is deprecated, instead use TF_V_COM)

TF_V_DIS = $(__tf_DIS)
__tf_DIS = $(__tf_DIS_$V)
__tf_DIS_  = $(__tf_DIS_0)
__tf_DIS_0 = @echo "  TF-DIS   $@";
__tf_DIS_1 = 

TF_V_DEP = $(__tf_DEP)
__tf_DEP = $(__tf_DEP_$V)
__tf_DEP_  = $(__tf_DEP_0)
__tf_DEP_0 = @echo "  TF-DEP   $@";
__tf_DEP_1 =

TF_V_COM = $(__tf_COM)
__tf_COM = $(__tf_COM_$V)
__tf_COM_  = $(__tf_COM_0)
__tf_COM_0 = @echo "  TF-COM   $@";
__tf_COM_1 = 

TF_V_DONE = $(__tf_DUN)
TF_V_DUN = $(__tf_DUN)
__tf_DUN = $(__tf_DUN_$V)
__tf_DUN_  = $(__tf_DUN_0)
__tf_DUN_0_LOUD = @echo "  TF-DONE  $@";
__tf_DUN_0 = @
__tf_DUN_1 = 
