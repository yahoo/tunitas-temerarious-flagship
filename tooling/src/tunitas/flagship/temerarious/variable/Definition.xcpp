// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-temerarious-flagship/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/build/temerarious-flagship/tree/LICENSE
#divert <fpp>
#import tunitas.flagship.temerarious.variable.required.string.Viewable
namespace tunitas::flagship::temerarious::variable {
  //
  // A variable definition.
  //
  // Specification:
  //
  //   The pair.
  //
  //   "equivalent" are  std::pair<string::Storage const, string::Storage>
  //   "equivalent" are  std::pair<string::View const, string::View>
  //
  // Design:
  //
  //   Ill-posed.
  //   And yet the "definition" is ill-posed because the Frame, being a std::map separates the definition and the value on its own terms and for its own purposes.
  //
  // Usage:
  //
  //   Oh come on.
  //
  template<required::string::Viewable> struct Definition;
}
#endiv
#divert <hpp>
#import tunitas.string.View
namespace tunitas::flagship::temerarious {
  template<variable::required::string::Viewable VIEW> struct variable::Definition {
    using View = VIEW; // i.e. may or may not provide its own storage
    inline Definition();
    View define;
    View value;
  };
  namespace variable {
    template<> inline Definition<string::View>::Definition();
  }
}
#endiv
#divert <ipp>
namespace tunitas::flagship::temerarious::variable {
  template<required::string::Viewable _> Definition<_>::Definition() { }
  template<> Definition<string::View>::Definition()
    : define{""}
    , value{""}
  { }
}
#endiv
